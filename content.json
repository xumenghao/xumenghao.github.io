[{"title":"JavaScript 原型链","date":"2018-04-19T07:02:05.380Z","path":"/posts/4a17b212/","text":"你知道JavaScript的原型链吗？ James Xu - 中南海保安发来报道 1.结论2.细探 1.原型链解释 2.原型链工作原理3.参考链接 之前常听说 JavaScript 的面向对象是构建于原型链（protype chain）上的，通过逐级向上查找直至 Object 的原型为止，但是具体的工作机制不太清楚，今天查阅了资料，才发现原来自己之前把__proto__与 prototype 混为一谈了o(╯□╰)o。 结论 先抛出来结论： __proto__是原型链查询中实际用到的，它总是指向 prototype；prototype在定义构造函数时自动创建，它总是被 __proto__所指。从上面两点我们还可以推出prototype只能作为构造函数的属性，而__proto__可以作为任意对象的属性 细探 接下来通过一段代码具体的研究一下： function Foo(y) { this.y = y; }; Foo.prototype.x = 10; FOo.prototype.calculate = function () { ... }; let b = new Foo(20); let c = new Foo(30); 这段代码构建的原型链可以用下面的图来表示： 看上去是不是有些晕？ 没关系，看完这篇文章就会觉得很简单了。 原型链解释 首先聚焦于图的中央，也就是蓝色和灰色的块。代码的第一行function Foo(age) { ... }; 定义了构造函数 Foo，此时 Foo 的原型便自动创建，它的 constructor 属性指向 Foo，Foo 的 prototype 属性指向刚刚创建的原型： Foo.prototype.constructor === Foo; // true 接着再看图的左部，也就是黄绿色的块。代码的第四、五行通过 let b = new Foo(20); let c = new Foo(20);创建了对象 b 和 c，每当我们通过new Foo(x)创建对象时，JavaScript 内部会首先创建一个新的对象，将其 __proto__属性指向 Foo 的原型，也就是 Foo.prototype，然后将构造函数中的 this指向刚刚创建的新对象，最后再执行构造函数中的代码： b.proto === Foo.prototype; // truec.proto === Foo.prototype; // true 最后来说说剩下的紫色的块。 既然原型链是一条链，那么它就一定会有起始点。文章的开头就说过原型链查找是逐级向上查找直至 Object 的原型为止，所以说起始点就是 Object.prototype，自然Object.prototype.__proto__的值为 null（因为已经到了链头，链结束了）。 尽管 Foo 是构造函数，但它仍逃不出函数的范畴，所以它的 __proto__指向函数的原型，也就是 Function.prototype。 一切原型链的终点都是Object.prototype，所以 Foo.prototype.__proto__和 Function.prototype.__proto__均指向它。 Foo.proto === Function.prototype; // true Foo.prototype.proto === Object.prototype; //true Function.prototype.proto === Object.prototype; // true Object.prototype.proto === null; // true 原型链工作原理 一句话解释就是：原型链查找就是通过 proto 查找，查找至值为 null （也就是 Object.prototype）时结束，通过几个具体的例子来说明一下： b.y在 b 中找到 y，结果为 20； b.x在 b 中未找到 x，接着通过 b.proto 在 Foo.prototype 中找到 x，结果为 10； b.toString()在 b 中未找到 toString 方法；接着通过 b.proto 在 Foo.prototype 中寻找，未找到；继续通过 Foo.prototype.proto 在 Object.prototype 中寻找，找到，结果为 ‘[object Object]’。 b.noFunc()依次在 b、Foo.prototype、Object.prototype 中寻找，均未L找到，抛出错误。 参考链接 1.StackOverflow - proto vs prototype。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"xumenghao.top/tags/JavaScript/"},{"name":"前端","slug":"前端","permalink":"xumenghao.top/tags/前端/"}]},{"title":"JavaScript 闭包","date":"2018-04-19T03:21:52.573Z","path":"/posts/4a17b211/","text":"大家好，我是闭包，不是B-Boy（舞者），也不是B-Box（口技）！ James Xu - 中南海保安发来报道 1、什么是闭包？JavaScript的闭包是一个特色。官方解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。这句话相信有许多人看不懂。我来表述一下我对JavaScript闭包的理解： 闭包的例子： var count=10;//全局作用域 标记为flag1 function add(){ var count=0;//函数全局作用域 标记为flag2 return function(){ count+=1;//函数的内部作用域 alert(count); } } var s=add() s();//输出1 s();//输出2 add()的返回值是一个函数，首先第一次调用s()的时候，是执行add()的返回的函数，也就是下面这个函数： function(){ count+=1;//函数的内部作用域 alert(count); } 也就是将count+1，在输出，那count是从哪儿来的的呢，根据作用域链的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到window的变量，没有就返回undefined。这里明显count 是函数内部的flag2 的那个count ， var count=10;//全局作用域function add(){ //var count=0;注释掉了 return function(){ count+=1;//函数的内部作用域 alert(count); }} var s=add() s();//输出11 s();//输出12 自然这是体现不出闭包的性质，只为了说明函数作用域链 继续说明：第一次执行，是没有疑问的输出1，那第二次的过程是怎样的呢？ 继续执行那个函数的返回的方法，还是count+=1;然后再输出count ，这里问题就来了，不应该继续向上寻找，找到count=0；然后输出1吗？不知道有没有注意一个问题，那就是s()执行的是下面这个函数 function(){ count+=1;//函数的内部作用域 alert(count); } 也就是说add()，只被执行了一次。然后执行两次s()，那count的值就是只声明了一次。 var s=add()，函数add 只在这里执行了一次。 下面执行的都是s()，那第二次的count的值是从哪儿来的，没错它还是第一次执行add时，留下来的那个变量。 （这怎么可能，函数变量执行完就会被释放啊，为什么还在？这里就是一个垃圾回收机制的引用计数问题）。 “”如果一个变量的引用不为0，那么他不会被垃圾回收机制回收，引用，就是被调用“”。 由于再次执行s()的时候，再次引用了第一次add()产生的变量count ，所以count没有被释放，第一次s(),count 的值为1,第二次执行s()，count的值再加1，自然就是2了。 让我们返回来再看看，根据以上所说，如果执行两次add() ，那就应该输出 都是1，来改一下这个函数 function add(){ var count=0;//函数全局作用域 return function(){ count+=1;//函数的内部作用域 alert(count); } } add()();//输出1 add()();//输出1 果真如此。输出的两次都是1. 另外，我觉得阮一峰说的闭包也是很简洁的：“我的理解是，闭包就是能够读取其他函数内部变量的函数。” 2、变量的作用域要理解闭包，首先必须理解Javascript特殊的变量作用域。 变量的作用域无非就是两种：全局变量和局部变量。 Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量。 Js代码 var n=999; function f1(){ alert(n); } f1(); // 999 另一方面，在函数外部自然无法读取函数内的局部变量。 Js代码 function f1(){ var n=999; } alert(n); // error 这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！ Js代码 function f1(){ n=999; } f1(); alert(n); // 999 有时候需要得到函数内的局部变量，在函数的内部，再定义一个函数。 Js代码 function f1(){ n=999; function f2(){ alert(n); // 999 } } 在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1 就是不可见的。这就是Javascript语言特有的“链式作用域”结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。 既然f2可以读取f1中的局部变量，那么只要把f2作为返回值就可以在f1外部读取它的内部变量了。 Js代码 function f1(){ n=999; function f2(){ alert(n); } return f2; } var result=f1(); result(); // 999 3、使用闭包的注意点1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。 2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。 4、闭包的用途闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。 怎么来理解这句话呢？请看下面的代码。 Js代码 function f1(){ var n=999; nAdd=function(){n+=1} function f2(){ alert(n); } return f2; } var result=f1(); result(); // 999 nAdd(); result(); // 1000 在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。 为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。 这段代码中另一个值得注意的地方，就是“nAdd=function(){n+=1}”这一行，首先在nAdd前面没有使用var关键字，因此 nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。 5、结语理解JavaScript的闭包是迈向高级JS程序员的必经之路，理解了其解释和运行机制才能写出更为安全和优雅的代码。","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"xumenghao.top/tags/JavaScript/"},{"name":"前端","slug":"前端","permalink":"xumenghao.top/tags/前端/"}]},{"title":"JavaScript 骚操作","date":"2018-04-18T08:46:59.955Z","path":"/posts/4a17b210/","text":"我没房没车没钱，但是我骚啊！！！ James Xu - 中南海保安发来报道 前言 如有错误，欢迎批评指正！ 技术无极限，唯一的限制是你的想象力！ 在JavaScript世界中，有些操作会让你无法理解，但是却无比优雅。比如下面这些： 5种方式实现值交换 下面几种方式都行 1. var temp = a; a = b; b = temp; (传统，但需要借助临时变量) 2. a ^= b; b ^= a; a ^= b; (需要两个整数) 3. b = [a, a = b][0] (借助数组) 4. [a, b] = [b, a]; (ES6，解构赋值) 5. a = a + b; b = a - b; a = a - b; (小学奥赛题) 去掉小数部分 下面几种方式都行 parseInt(num) ~~num num &gt;&gt; 0 num | 0 判断 x 是否是整数 下面几种方式都行 function isInt(x) { return (x ^ 0) === x } // return Math.round(x) === x // return (typeof x === &apos;number&apos;) &amp;&amp; (x % 1 === 0) // ES6 -&gt; Number.isInteger() 递归求阶乘 function factorial(n) { return (n &gt; 1) ? n * f(n - 1) : n } 判断符号是否相同 function sameSign(a, b) { return (a ^ b) &gt;= 0 } 克隆数组 arr.slice(0) 数组去重// ES6 Array.from(new Set(arr)) // ES5 arr.filter(function(ele, index, array){ return index===array.indexOf(ele) }) 数组最大值 function maxArr(arr) { return Math.max.apply(null, arr) } 数组最小值 function minArr(arr) { return Math.min.apply(null, arr) } 随机获取数组的一个成员 function randomOne(arr) { return arr[Math.floor(Math.random() * arr.length)] } 产生随机颜色 function getRandomColor() { return `#${Math.random().toString(16).substr(2, 6)}` } 随机生成指定长度的字符串 function randomStr(n) { let standard = &apos;abcdefghijklmnopqrstuvwxyz9876543210&apos; let len = standard.length let result = &apos;&apos; for (let i = 0; i &lt; n; i++) { result += standard.charAt(Math.floor(Math.random() * len)) } return result } 深拷贝 JSON.parse(JSON.stringify(obj)) 打印出来看看 console.log(([][[]] + [])[+!![]] + ([] + {})[!+[] + !![]]) console.log((!(~+[]) + {})[--[~+&apos;&apos;][+[]] * [~+[]] + ~~!+[]] + ({} + [])[[~!+[]] * ~+[]]) 美化console console.info(&quot;%c哈哈&quot;, &quot;color: #3190e8; font-size: 30px; font-family: sans-serif&quot;);","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"xumenghao.top/tags/JavaScript/"},{"name":"前端","slug":"前端","permalink":"xumenghao.top/tags/前端/"}]},{"title":"赌王儿子何猷君：如何拥有自己的“开挂”人生！","date":"2018-04-11T03:52:17.020Z","path":"/posts/4a17b207/","text":"“投胎是个技术活”，但偏偏就有人不仅会投胎，含着金汤匙生在了终点线上，还顺便在终点线上创造了一堆记录，何猷君就绝对是这样一个存在。 James Xu - 中南海保安发来报道 大家看了前两天开播的《最强大脑》了吗？我看完之后，已经深深被何猷君吸引了。 不认识他？澳门赌王何鸿燊你们认识了吧，没错，他就是何鸿燊的儿子。 即使出生在终点线，拥有大多数人奋斗几辈子都难以企及的财富，但也绝不坐享其成，被称为“明明可以靠家世靠颜值，可他偏偏就要靠智商，靠才华，关键还能秒杀全场。” 在最新的《最强大脑》第一期中，凭借实力拿下两个环节第一名，直通30强。不过这点小成绩对他来说可能根本不算什么，因为人家从小就是数学天才啊！ 小学时，他连续两年在“世界数学测试”邀请赛中获奖，爸爸何鸿燊亲自为他颁奖。 18岁那年同时拿到牛津大学与麻省理工学院的录取通知。 后来他选择了进入麻省理工学院就读，只花了3年的时间就完成了4年的学业。2016年3月，何猷君继续考取MIT的金融硕士，是史上最年轻的学生，那年他才21岁。 他曾在网上晒过一份本科成绩单，科科接近满分。 毕业后也没有像哥哥姐姐一样加入家族事业，不仅拿到了世界最大金融公司的Offer、还创办了一个慈善机构。 除了读书，何猷君会的事还多着呢。 他打网球很有天分，在法国公开赛上获过奖杯，甚至曾经考虑过走职业网球选手的路。 音乐方面也难不倒他，钢琴吉他什么的也是上手就来。 不仅出得了厅堂，而且下得了厨房！对亲朋好友都好得不得了，经常给朋友们亲自下厨，来一场惊喜的爱心晚餐。 在大家眼中，何猷君应该开着名车，穿着名牌，横跨整个城市去高谈阔论，可他的日常却是乘地铁上班。他说，“不会迟到，很正常” 除此之外，何猷君还是个超级爱家人的大暖男。对自己的妹妹何超欣超级宠爱，简直就是“妹控”。 他和妈妈梁安琪关系也是非常好，在麻省提前一年毕业的事，他一直没有告诉妈妈，直到毕业前几星期才订票叫妈妈过来参加毕业典礼。 当被问到为什么要这么努力，何猷君给出的理由也很硬气——“因为我想让世界知道，我可以用我的双手达到一个正常麻省理工高材生也很难达到的目标，因为我就是我。” 何猷君这种发自内心觉得我生下来就是要努力比别人强大的想法和觉悟，其实并不是每个人都能有的——上一辈积累的财富给了他们接受优质教育，跻身精英阶层的机会。但说到底，拥有精英的想法，最终靠的不是财富，而是教育。 没有赌王的丰厚家底，平凡的我们又该如何像何猷君那样拥有自己的“开挂”人生呢？ 好好读书 赌王女儿何超莲说，“爸爸对我们只有一个要求，就是好好读书。” 赌王告诉子女的四字真言，实际上源自他真实的人生启示。何鸿燊出生于富贵的家庭，小时候衣食无忧，却不爱读书，用纨绔子弟来形容也不为过。但由于父亲投资失败家道中落，何鸿燊尝尽了人世冷暖。 觉醒后的赌王发奋读书，以优秀的成绩考入香港大学，并获得奖学金。并用自己的努力重新建立起庞大的商业帝国。在他心中，即使现在的家境优渥，一切皆会有变数，唯有凭借自己的实力，才能应对未知的变化。 多勤奋 赌王说，我没有什么秘诀，一是做事必须勤奋；二是锲而不舍，有始有终。勤劳努力，战胜困难，才是最大的资本。没有到收工钟响已经洗干净手的人，一定是老板最看不起的人，也是人生不会成功的人。 有父亲这样的榜样，子女也耳濡目染。何猷君哪怕是个富二代，也会努力拼搏创业。坐经济舱、挤地铁、任何工作都亲历亲为，找项目找办公室，和小伙伴挤在几平米的小屋里。 自己的事情自己解决 何猷君曾发微博称近日与好友坐经济舱出行，因护照丢失无法入境，他多次求助航空公司，但对方爱答不理，不予配合寻找，导致他和朋友在机场等了一夜。直到管理人员认出他的身份，态度大变，10分钟之內找到护照。 事情一发生，网友们都称赞他没有搬出自己的身份，也没有求助妈妈要求特殊待遇。而妈妈梁安琪则说，这个儿子从小到大喜欢自己解决问题，如果不是媒体告诉我，我完全不知道。 从而可以看出，虽然何猷君在家里什么都不缺，但他丝毫没有“一切人都要为我服务”的想法。 你以为别人头顶光环，不需要努力就能得到想要的一切，但真正可怕的还是，比你优秀的人偏偏还比你努力千百倍。我们又有什么理由不努力呢？","tags":[{"name":"话题","slug":"话题","permalink":"xumenghao.top/tags/话题/"},{"name":"人物","slug":"人物","permalink":"xumenghao.top/tags/人物/"}]},{"title":"404 NOT FOUND!","date":"2018-04-10T07:47:10.312Z","path":"/posts/4a17b205/","text":"抱歉，沒有找到您需要的文章！！ James Xu - 中南海保安发来报道 404页面是网站必备的一个页面，它承载着用户体验与SEO优化的重任。404页面通常为用户访问了网站上不存在或已删除的页面，服务器返回的404错误。如果站长没有设置404页面，会出现死链接，蜘蛛爬行这类网址时，不利于搜索引擎收录。 404 Not Found 由来 据说在第三次科技革命之前，互联网的形态就是一个大型的中央数据库，这个数据库就设置在404房间里面。那时候所有的请求都是由人工手动完成的，如果在数据库中没有找到请求者所需要的文件，或者由于请求者写错了文件编号，用户就会得到一个返回信息：room 404 : file not found。后来互联网兴起后，人们也就习惯了用404作为服务器未找到文件的错误代码了。当然实际考证传说中的room 404是不存在的。 设置404页面的两大好处 引导用户不要关闭网站，增强用户体验。 防止网站出现死链接。 查看更多 HTTP状态码介绍","tags":[{"name":"HTTP","slug":"HTTP","permalink":"xumenghao.top/tags/HTTP/"},{"name":"浏览器","slug":"浏览器","permalink":"xumenghao.top/tags/浏览器/"}]},{"title":"饭后嚼两粒木糖醇，有用吗？","date":"2018-04-10T02:25:41.943Z","path":"/posts/4a17b204/","text":"嚼口香糖太久可能把脸变大？ James Xu - 中南海保安发来报道 嚼木糖醇可以替代刷牙吗？ 1.木糖醇是蔗糖的一种替代品，可以在吃甜食的同时减少热量的摄入。但是，到目前为止，并没有研究表明木糖醇有预防龋齿的效果。2.相比糖果，木糖醇口香糖对口腔有一些好处，但不能替代刷牙。另外，咀嚼口香糖的时间过长可能会造成咬肌太过发达，使脸变大。 嚼木糖醇可以预防龋齿吗？ 1.大家可能都看过口香糖的广告。吃过东西以后，由于细菌产酸，口腔内的 pH 值会快速下降，口腔环境趋于酸性，久而久之会导致龋齿。2.吃上两粒口香糖，pH值迅速回升，口腔环境变为中性或者弱碱性，可以很好地预防龋齿。3.然后出现画外音：“这个糖不是一般的糖，是木糖醇，木糖醇是好东西，能预防龋齿的。”真的是这样吗？ 一、木糖醇是什么？木糖醇，是蔗糖的一种替代品。为什么要寻找蔗糖的替代品呢？近些年大家逐渐意识到了：糖，不是好东西，吃多了会产生各种问题：比如热量过高导致肥胖、血糖太高诱发糖尿病、糖被口腔里的细菌分解后产生酸性物质腐蚀牙齿等。然而，我们的身体对糖的渴望是写在基因里的：糖是有甜味的，能够提供能量，自然界中的纯糖极其少见，一旦糖能够被无限量地供应，很多人都会沉迷在“糖瘾”里，对健康有极大损害。 所以，食品界一直在寻找糖的替代品，一方面满足我们的口腹之欲，另一方面减少甚至消除对健康的危害，最好再有点好处。木糖醇就是在这一背景下被发现的，它和蔗糖差不多甜，但热量只有蔗糖的60%左右。而且教科书上说，细菌吃了木糖醇以后并不会产酸，也就是说，它不会对牙齿有什么危害。如果细菌吃多了木糖醇，还会撑死，简直就是天大的好处了！在这样的概念之下，木糖醇很快被添加到了口香糖中，要扭转大众“吃糖会坏牙”的观念。 二、每天嚼一嚼，蛀牙远离我？但是，我们每天嚼嚼口香糖就可以彻底告别虫牙了吗？查阅了相关研究后，我发现它并没有那么“美好”。木糖醇不产酸这个事是真的，热量相对较低也是真的，但它的预防龋齿作用受到了不少学者的质疑： 一般认为，要是想通过吃木糖醇预防龋齿，则每天需要吃6克以上的木糖醇，但这不具备实际可操作性，木糖醇口香糖一般每颗含木糖醇0.35g左右。这样算来，每次嚼3粒，每天嚼5次，可能才能达到有效剂量。 不能确定木糖醇能否杀细菌。随着研究的深入，关于木糖醇是否真的可以杀死口腔内的致病菌，是有争议的。龋病是个慢性病，想查看木糖醇预防龋齿的临床实验效果，需要观察患者几年以上的时间才有意义，而这种长期临床实验受多种因素的影响和制约，想要得出令人信服的结果是非常困难的。 美国儿童牙科学会2015年专门为木糖醇发了一份指南，结合现状它的态度是： 支持使用木糖醇替代蔗糖； 木糖醇的防龋或者抑菌效果，有待进一步证实； 关于该吃多少木糖醇、一天吃几次才是理想的防龋剂量，也需要更多的研究。 三、吃木糖醇还是有好处的虽然能不能预防龋齿还有待进一步研究，但是吃木糖醇还是有不少好处： 木糖醇是好东西，特别是对于爱坏牙又爱吃糖的小朋友，如果非要吃糖，那么吃点木糖醇糖果是没有害处的。 在咀嚼口香糖过程中，会促进唾液的分泌，这对于口腔是有好处的。 胶状的口香糖还可以粘附牙齿的上的食物残渣，对于牙齿也是有一定清洁作用。 吃木糖醇口香糖，口腔里的 pH值并没有因为糖的存在而降低，不会对牙齿有腐蚀。但是，这些作用并没有那么神奇，我觉得从效率和效果上甚至还不如清水漱口，还不足以宣称可以“预防龋齿”，该刷牙还是要好好刷牙，不能用木糖醇口香糖替代刷牙。 最后，还有一个小提醒，嚼口香糖时间不能太长，有实验表明，木糖醇在口腔里的浓度峰值一般都出现在5分钟以内，再嚼也就没什么太多作用了。而且长时间咀嚼会加重咬合肌肉以及颞下颌关节的负担，脸会由于肌肉发达而变大。","tags":[{"name":"话题","slug":"话题","permalink":"xumenghao.top/tags/话题/"},{"name":"健康","slug":"健康","permalink":"xumenghao.top/tags/健康/"}]},{"title":"烟草行业的暴利","date":"2018-04-03T01:43:52.873Z","path":"/posts/4a17b203/","text":"65元中华烟成本不到3元 James Xu - 中南海保安发来报道 &nbsp;&nbsp;都知道烟草行业暴利，但暴利到何种程度大家又都说不清楚，市面上65元一包的软中华成本又是多少？本文揭露了烟草行业的种种暴利，从成本到税收，全部无所遁形。 &nbsp;&nbsp;我国是世界上烟草生产和消费最大的国家，吸烟率在38％以上。有资料统计，世界上的吸烟人数正在下降，而与此同时，中国的烟民队伍却在不断扩大：我国现有烟民3.5亿，比美国的人口总数还多。 &nbsp;&nbsp;中国已经成为名副其实的“第一吸烟大国”。 几块钱的烟和几百块的烟 成本并不大&nbsp;&nbsp;尽管国家在去年出台了“史上最严”禁烟令，但依然不妨碍中国烟民的与日俱增。 &nbsp;&nbsp;而这也与中国源远流长的“烟文化”息息相关。在中国特定的社会环境下，烟不仅是提神解闷的“尤物”，更是待客访友的“信使”。 &nbsp;&nbsp;中国人讲面子、讲排场，吸烟不仅仅是一种消遣方式，也是一种身份的象征。找个关系、谈个生意，不送几条高档香烟是绝对不行的。 &nbsp;&nbsp;我们知道，市面上的香烟价格有几块钱到上百块不等，那么便宜的几块钱的香烟和上百块钱的香烟为什么中间的差价这么大呢？ &nbsp;&nbsp;就拿65元一包的软中华来说，这样的价格对于普通白领来说并不便宜，这寥寥烟草，为何能卖到如此天价呢？ &nbsp;&nbsp;先来看看制造香烟的成本费用。 &nbsp;&nbsp;其实，无论高档烟还是低档烟，它们的原料都大同小异，烟叶原料等级虽有不同，但价格差不了太多。从收购商到种植者每公斤大约是二十多块钱，甚至有些更便宜。 &nbsp;&nbsp;唯一的差异可能在制作工序上。从复烤、筛选到剪丝、成型，一直到最后包装成品，不同高档烟一般会选烟的中部作为烟草，而香精的添加量会多些，用最好的烟嘴，采用高浸透滤棒，再加上高端的包装。 &nbsp;&nbsp;即使如此，一包65元的中华烟成本也不会超过3元，而那些上百块钱的香烟成本也不会超过8块钱。烟草行业的利润可想而知。 烟草行业的暴利&nbsp;&nbsp;根据前瞻产业研究院发布的《2013-2017年中国烟草制品行业产销需求与投资预测分析报告》，2001-2012年，中国烟草制品行业毛利率维持在57%以上的较高水平，且呈现逐年上升的态势，到2012年行业的毛利率达到了74.06%。 74%的毛利率是一个神马概念？&nbsp;&nbsp;我们不妨与盈利能力较强的上市公司对比一下。2012年同一年，第一季报上市公司的平均毛利率水平为18.18%。也就是说，烟草行业毛利率约为A股上市公司平均毛利率的4倍！ &nbsp;&nbsp;同样的投入，A股上市公司挣1块钱，烟草业却可以挣4块钱！ &nbsp;&nbsp;成本那么低，利润那么高，香烟到消费者手上变得那么贵，原因是什么？个中缘由其实也并不难猜，最关键在于烟草税。 谁在“保护”烟草暴利？烟草税！&nbsp;&nbsp;烟草行业的“暴利”令人咋舌，但与这个行业的“暴税”相比，又是大巫见小巫了。 &nbsp;&nbsp;众所周知，烟草税占据国家税收很大一部分，烟草行业是纳税大户； &nbsp;&nbsp;由于中国烟民太多，国家对烟草行业一直抽重税，对于国家来说这是一笔不菲的收入。 &nbsp;&nbsp;实际上一包烟的成本，由卷烟厂代征54.5%的烟草消费税，而这些税中含有：增值税、所得税、印花税等等，再加上卷烟厂生产成本和利润，然后把烟卖给烟草专卖局，专卖局再转手卖批发给零售商，所以香烟高的价格是高在税费上。 &nbsp;&nbsp;据央广网报道，2016年烟草行业全年实现工商税利10795亿元。整个“十二五”期间，累计实现工商税利总额47680亿元，其中约87%上缴国家财政，累计上缴41323亿元！ 4万亿是什么概念？&nbsp;&nbsp;在2008年金融危机爆发后，我国政府曾经出台过一轮经济刺激计划，其后遗症至今仍被广为诟病，而那轮影响深远的货币投放总量也不过才4万亿。 &nbsp;&nbsp;财政部发布的2015年财政收支情况显示，当年全国一般公共预算收入152217亿元，烟草单个行业上缴的数额占财政收入的7%还多。——烟草之于政府“钱袋子”的紧密关系就非常明了了。 &nbsp;&nbsp;难怪，近年来社会上破垄断呼声颇高，连千百年来铁板一块的盐业都开始松动，但烟草垄断依然是纹丝不动。 &nbsp;&nbsp;烟草现在的平均综合税率在68%左右，这一部分被国家拿走了。 &nbsp;&nbsp;还剩下32%，零售户的利润一般要求保持在10%左右。 &nbsp;&nbsp;那还有22%，这22%的毛利听起来还不错，但这包括物流成本、仓库成本等，烟草企业最终的实际利润率并不高。","tags":[{"name":"健康","slug":"健康","permalink":"xumenghao.top/tags/健康/"},{"name":"烟草","slug":"烟草","permalink":"xumenghao.top/tags/烟草/"}]},{"title":"手机端页面自适应解决方案—rem布局进阶版","date":"2018-03-23T01:01:46.678Z","path":"/posts/4a17b202/","text":"好玩的rem布局 James Xu - 中南海保安发来报道 一年前笔者写了一篇 《手机端页面自适应解决方案—rem布局》，意外受到很多朋友的关注和喜欢。但随着时间的推移，该方案已然过时，故为大家介绍一个目前我极力推荐使用的，更加完美的方案——rem布局（进阶版） 另外： 此方案仅适用于移动端web 文章底部常见问题说明第四条 ，笔者已给出一个相当便捷的解决方案，欢迎留言交流。（2018/3/23） 该方案使用相当简单，把下面这段已压缩过的 原生JS（仅1kb，源码已在文章底部更新） 放到 HTML 的 head 标签中即可（注:不要手动设置viewport，该方案自动帮你设置） &lt;script&gt; !function(e){function t(a){if(i[a])return i[a].exports;var n=i[a]={exports:{},id:a,loaded:!1};return e[a].call(n.exports,n,n.exports,t),n.loaded=!0,n.exports}var i={};return t.m=e,t.c=i,t.p=&quot;&quot;,t(0)}([function(e,t){&quot;use strict&quot;;Object.defineProperty(t,&quot;__esModule&quot;,{value:!0});var i=window;t[&quot;default&quot;]=i.flex=function(normal,e,t){var a=e||100,n=t||1,r=i.document,o=navigator.userAgent,d=o.match(/Android[\\S\\s]+AppleWebkit\\/(\\d{3})/i),l=o.match(/U3\\/((\\d+|\\.){5,})/i),c=l&amp;&amp;parseInt(l[1].split(&quot;.&quot;).join(&quot;&quot;),10)&gt;=80,p=navigator.appVersion.match(/(iphone|ipad|ipod)/gi),s=i.devicePixelRatio||1;p||d&amp;&amp;d[1]&gt;534||c||(s=1);var u=normal?1:1/s,m=r.querySelector(&apos;meta[name=&quot;viewport&quot;]&apos;);m||(m=r.createElement(&quot;meta&quot;),m.setAttribute(&quot;name&quot;,&quot;viewport&quot;),r.head.appendChild(m)),m.setAttribute(&quot;content&quot;,&quot;width=device-width,user-scalable=no,initial-scale=&quot;+u+&quot;,maximum-scale=&quot;+u+&quot;,minimum-scale=&quot;+u),r.documentElement.style.fontSize=normal?&quot;50px&quot;: a/2*s*n+&quot;px&quot;},e.exports=t[&quot;default&quot;]}]); flex(false,100, 1); &lt;/script&gt; 作者：minooo链接：https://www.jianshu.com/p/985d26b40199來源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 代码原理这是阿里团队的高清方案布局代码，所谓高清方案就是利用rem的特性（我们知道默认情况下html的1rem = 16px），根据设备屏幕的DPR（设备像素比，又称DPPX，比如dpr=2时，表示1个CSS像素由4个物理像素点组成）根据设备DPR调整页面的压缩比率（即：1/dpr），同时动态设置 html 的font-size为（50 * dpr)，进而达到高清效果。 有何优势 引用简单，布局简便 根据设备屏幕的DPR,自动设置最合适的高清缩放。 保证了不同设备下视觉体验的一致性。（老方案是，屏幕越大元素越大；此方案是，屏幕越大，看的越多） 有效解决移动端真实1px问题（这里的1px 是设备屏幕上的物理像素） 如何使用重要的事情说三遍！绝不是每个地方都要用rem，rem只适用于固定尺寸！绝不是每个地方都要用rem，rem只适用于固定尺寸！绝不是每个地方都要用rem，rem只适用于固定尺寸！在相当数量的布局情境中（比如底部导航元素平分屏幕宽，大尺寸元素），你必须使用百分比或者flex才能完美布局！ 看过 ‘《手机端页面自适应解决方案—rem布局》’的朋友，应该对rem有所了解，这里不再赘述，此方案也是默认 1rem = 100px，所以你布局的时候，完全可以按照设计师给你的效果图写各种尺寸啦。比如你在效果图上量取的某个按钮元素长 55px, 宽37px ，那你直接可以这样写样式： .myBtn { width: 0.55rem; height: 0.37rem; } 为了让朋友们更清晰感受此方案的巨大优势，下面是源码和Demo实践应用1（请在手机端或者手机模式下浏览效果更佳！） 实践应用2（请在手机端或者手机模式下浏览效果更佳！） 线上项目（请在手机端或者手机模式下浏览效果更佳！） 示例源码 常见问题说明，新手很有必要看一下（2018/3/23） 许多同学对该方案存在不少误解导致使用出现各种问题，这里统一回复下。 1.问：为啥手机网页效果图宽度是要640或者750的，我非得弄个666的不行咩？ 答：老实说当然可以，不过为了规范，640或者750是相对合适的。拿Iphone 5s 举例，它的css像素宽度是320px，由于它的dpr=2，所以它的物理像素宽度为320 × 2 = 640px，这也就是为什么，你在5s上截了一张图，在电脑上打开，它的原始宽度是640px的原因。那 iphone 6 的截图宽度呢？ 375 × 2 = 750那 iphone 6 sp 的截图宽度呢？ 414 × 3 = 1242以此类推，你现在能明白效果图为什么一般是 640 ，750 甚至是 1242 的原因了么？（真没有歧视安卓机的意思。。。） 2.问：宽度用rem写的情况下， 在 iphone6 上没问题， 在 iphone5上会有横向滚动条，何解？ 答：假设你的效果图宽度是750，在这个效果图上可能有一个宽度为7rem（高清方案默认 1rem = 100px）的元素。我们知道，高清方案的特点就是几乎完美还原效果图，也就是说，你写了一个宽度为 7rem 的元素，那么在目前主流移动设备上都是7rem。然而，iphone 5 的宽度为640，也就是6.4rem。于是横向滚动条不可避免的出现了。怎么办呢？ 这是我目前推荐的比较安全的方式：如果元素的宽度超过效果图宽度的一半（效果图宽为640或750），果断使用百分比宽度，或者flex布局。就像把等屏宽的图片宽度设为100%一样。 3.问：不是 1rem = 100px吗，为什么我的代码写了一个宽度为3rem的元素，在电脑端的谷歌浏览器上宽度只有150px? 答：先说高清方案代码，再次强调咱们的高清方案代码是根据设备的dpr动态设置html 的 font-size，如果dpr=1(如电脑端），则html的font-size为50px，此时 1rem = 50px如果dpr=2(如iphone 5 和 6），则html的font-size为100px，此时 1rem = 100px如果dpr=3(如iphone 6 sp），则html的font-size为150px，此时 1rem = 150px如果dpr为其他值，即便不是整数，如3.4 , 也是一样直接将dpr 乘以 50 。 再来说说效果图，一般来讲，我们的效果图宽度要么是640，要么是750，无论哪一个，它们对应设备的dpr=2，此时，1 rem = 50 × 2 = 100px。这也就是为什么高清方案默认1rem = 100px。而将1rem默认100px也是好处多多，可以帮你快速换算单位，比如在750宽度下的效果图，某元素宽度为53px，那么css宽度直接设为53/100=0.53rem了。 然而极少情况下，有设计师将效果图宽定为1242px，因为他手里只有一个iphone 6 sp (dpr = 3)，设计完效果图刚好可以在他的iphone 6 sp里查看调整。一切完毕之后，他将这个效果图交给你来切图。由于这个效果图对应设备的dpr=3，也就是1rem = 50 × 3 = 150px。所以如果你量取了一个宽度为90px的元素，它的css宽度应该为 90/150=0.6rem。由于咱们的高清方案默认1rem=100px，为了还原效果图，你需要这样换算。当然，一个技巧就是你可以直接修改咱们的高清方案的默认设置。在代码的最后 你会看到 flex(false, 100, 1) ，将其修改成flex(false, 66.66667, 1)就不用那么麻烦的换算了，此时那个90px的直接写成0.9rem就可以了。 4.问：在此方案下，我如果引用了别的UI库，那些UI库的元素会显得特别小，如何解决？ 答：可以这样去理解问题的原因，如果不用高清方案，别的UI库的元素在移动设备上（假设这个设备是iphone 5好了）显示是正常的，这没有问题，然后我们在这个设备上将该页面截图放到电脑上看，发现宽度是640（问答1解释过了），根据你的像素眼大致测量，你发现这个设备上的某个字体大小应该是12px，而你在电脑上测量应该是24px。 现在我们使用高清方案去还原这个页面，那么字体大小应该写为 0.24rem 才对！ 所以，如果你引用了其他的UI库，为了兼容高清方案，你需要对该UI库里凡是应用px的地方做相应处理，即： a px =&gt; a*0.02 rem(具体处理方式因人而异，有模块化开发经验的同学可使用类似的 px2rem 的插件去转化，也可以完全手动处理） （2018/3/23更新）然而真实情况往往更为复杂，比如，你引入了百度地图（N个样式需要处理转换）；或者你引入了一个framework；又或者你使用了 video 标签，上面默认的尺寸样式很难处理。等等这些棘手问题 面对这些情况，此时我们的高清方案如果不再压缩页面，那么以上问题将迎刃而解。基于这样的思路，笔者对高清方案的源码做了如下修改，即添加一个叫做 normal 的参数，由它来控制页面是否压缩。在文章顶部代码的最后，你会看到 flex(false, 100, 1)，默认情况下页面是开启压缩的。 如果你需要禁止压缩，由于我们的源码执行后，直接将flex函数挂载到全局变量window上了，此时你直接在需要禁止压缩的页面执行 window.flex(true) 就可以了，而rem的用法保持不变。 有一点美中不足的是，如果禁止了页面压缩，高清屏的1像素就不能实现了，如果你必须要实现1像素，那么自行谷歌：css 0.5像素，有N多的解决方案，这里不再赘述。 5.问：有时候字体会不受控制的变大，怎么办？ 答：在X5新内核Blink中，在排版页面的时候，会主动对字体进行放大，会检测页面中的主字体，当某一块字体在我们的判定规则中，认为字号较小，并且是页面中的主要字体，就会采取主动放大的操作。然而这不是我们想要的，可以采取给最大高度解决 解决方案： *, *:before, *:after { max-height: 100000px } 补充：有同学反映，在一些情况下textarea 标签内的字体大小即便加上上面的方案，字体也会变大，无法控制。此时你需要给 textarea 的 display 设为 table 或者 inline-table即可恢复正常。 6.问：我在底部导航用的flex感觉更合适一些，请问这样子混着用可以吗？ 答：咱们的rem适合写固定尺寸。其余的根据需要换成flex或者百分比。源码示例中就有这三种的综合运用。 7.问：用了这个方案如何使用媒体查询呢？ 一般来讲，使用了这个方案是没必要用媒体查询了，如果你必须要用，假设你要对 iphone5 （css像素宽度320px,这里需要取其物理像素，也就是640）宽度下的类名做处理，你可以这样 @media screen and (max-width: 640px) { .yourLayout { width:100%; } } 8.问：可以提供下这个高清方案的源码吗？ &apos;use strict&apos; /** * @param {Boolean} [normal = false] - 默认开启页面压缩以使页面高清; * @param {Number} [baseFontSize = 100] - 基础fontSize, 默认100px; * @param {Number} [fontscale = 1] - 有的业务希望能放大一定比例的字体; */ const win = window; export default win.flex = (normal, baseFontSize, fontscale) =&gt; { const _baseFontSize = baseFontSize || 100; const _fontscale = fontscale || 1; const doc = win.document; const ua = navigator.userAgent; const matches = ua.match(/Android[\\S\\s]+AppleWebkit\\/(\\d{3})/i); const UCversion = ua.match(/U3\\/((\\d+|\\.){5,})/i); const isUCHd = UCversion &amp;&amp; parseInt(UCversion[1].split(&apos;.&apos;).join(&apos;&apos;), 10) &gt;= 80; const isIos = navigator.appVersion.match(/(iphone|ipad|ipod)/gi); let dpr = win.devicePixelRatio || 1; if (!isIos &amp;&amp; !(matches &amp;&amp; matches[1] &gt; 534) &amp;&amp; !isUCHd) { // 如果非iOS, 非Android4.3以上, 非UC内核, 就不执行高清, dpr设为1; dpr = 1; } const scale = normal ? 1 : 1 / dpr; let metaEl = doc.querySelector(&apos;meta[name=&quot;viewport&quot;]&apos;); if (!metaEl) { metaEl = doc.createElement(&apos;meta&apos;); metaEl.setAttribute(&apos;name&apos;, &apos;viewport&apos;); doc.head.appendChild(metaEl); } metaEl.setAttribute(&apos;content&apos;, `width=device- width,user-scalable=no,initial-scale=${scale},maximum-scale=${scale},minimum-scale=${scale}`); doc.documentElement.style.fontSize = normal ? &apos;50px&apos; : `${_baseFontSize / 2 * dpr * _fontscale}px`; }; 10.问：我在使用 rem 布局进阶方案的时候遇到了XXX的问题，如何解决？ 此方案久经考验，具有普遍适用性，自身出致命问题的情况很少，至少笔者是没遇到过。 绝大多数你遇到的问题，都是由于对rem布局理解不到位导致的。本文对rem布局做了大量的解释说明，配置了若干 demo，你可以把你遇到的问题放到demo里测试。遇到问题时，首先问自己，为什么这明显的错误大家没遇到就我遇到了？？ 如果你真的经过充分验证，比对，确实是rem布局自身出了问题，那么请私信我，把还原问题场景的 demo 或者文件发给我。谢谢！","tags":[{"name":"前端","slug":"前端","permalink":"xumenghao.top/tags/前端/"},{"name":"rem布局","slug":"rem布局","permalink":"xumenghao.top/tags/rem布局/"},{"name":"HTML5","slug":"HTML5","permalink":"xumenghao.top/tags/HTML5/"}]},{"title":"为什么喝碳酸饮料的人越来越少？","date":"2018-03-23T00:43:11.470Z","path":"/posts/4a17b201/","text":"最近，某饮料巨头公布了2017年的成绩单。财报显示，无论是净收入还是净利润都出现了下滑。事实上，这并非饮料行业第一次出现糟糕局面。据统计，美国碳酸软饮料销量连续11年下跌。20世纪可以说是属于碳酸饮料的世纪，碳酸饮料风靡全球，甚至代表了一种文化。然而到了现在，碳酸饮料为什么不行了？ James Xu - 中南海保安发来报道 近年来，由于生活方式的改变，越来越多的人开始关心饮食的安全、健康问题，碳酸饮料销量的下滑是健康观念转变的结果。 碳酸饮料已经出现100多年了，人类的娱乐、通讯、工作、饮食等等都发生了翻天覆地的变化，但它几乎没什么变化，还是熟悉的配方，熟悉的味道。 碳酸饮料已经出现100多年了，人类的娱乐、通讯、工作、饮食等等都发生了翻天覆地的变化，但它几乎没什么变化，还是熟悉的配方，熟悉的味道。 几乎所有的碳酸饮料都正在经历全球范围内的销量下滑 &nbsp;&nbsp;2016年，美国饮料行业刊物《饮料文摘》报告显示，美国碳酸软饮料销量连续11年下跌，2015年下降1.2%，降幅大于2014年的0.9%。行业内三大巨头销售量皆有所下降。同时，2015年碳酸软饮料人均消费量下降至153.7升，创自1985年来的30年最低。 在过去的二十年里，汽水在美国的销量暴跌 &nbsp;&nbsp;中国的情况也不容乐观。数据显示，2015年中国碳酸饮料产量1794.5万吨，较2014年的1810万吨下滑0.86%。 &nbsp;&nbsp;2016年，中国质量协会发布的《饮料行业整体综合满意度指数》显示，2016年消费者偏好度最低的饮料是碳酸饮料，排在包装水、蛋白质饮料、功能性饮料、茶饮料、果汁饮料之后。 图片来源：《京华时报》资料 &nbsp;&nbsp;20世纪可以说是属于碳酸饮料的世纪，一系列碳酸饮料风靡全球，甚至代表了一种文化。然而到了今天，碳酸饮料为什么不行了？ 相比微甜的口感和畅饮的快感，现代人更加注重健康 &nbsp;&nbsp;说到碳酸饮料，你会想到什么？在美国问答网站Quara上有一个回答很精辟：美国、糖和肥胖。 &nbsp;&nbsp;近年来，由于生活方式的改变，越来越多的人开始关心饮食的安全、健康问题。地中海饮食的流行是一个例子，碳酸饮料销量的下滑同样是健康观念转变的结果。 &nbsp;&nbsp;碳酸饮料被认为对人体健康有负面影响，例如导致人的骨质疏松、蛀牙、肥胖等等，当然，其中一些也还存在争议。但可以确信的一点是，碳酸饮料中的糖含量实在是太高了。 &nbsp;&nbsp;根据《中国居民膳食指南2016》中的建议：“控制添加糖的摄入量，每天摄入不超过50克，最好控制在25克以下。”所谓添加糖就是食物中额外添加的糖，比如冰糖、白砂糖、果葡糖浆等等，这些糖已经被研究证实，会引发肥胖、扰乱代谢等等。 碳酸饮料业绩的大幅下滑，预示着整个中国乃至全球大健康消费浪潮的全面来临 &nbsp;&nbsp;就拿一款流行的碳酸饮料来说，每100毫升的含糖量为10.6克，一瓶500毫升，含糖量达到53克，超过了膳食指南建议的一天的糖摄入量。 &nbsp;&nbsp;北京大学中国社会科学调查中心2015年发布的报告显示，与2002年相比，2013年中国7岁至17岁城市儿童青少年超重率和肥胖率分别上升2.4个和3.1个百分点，而农村则分别上升5.1个和3.6个百分点，均高于城市。 &nbsp;&nbsp;同样是在2013年，北京市教委就一纸禁令将碳酸饮料挡在了中小学校园门外：通知明确规定，中小学不得出售碳酸饮料等不利于健康的食品饮料。 &nbsp;&nbsp;中国还没有从国家层面对食品减糖的措施和标准做出进一步要求，但已经有一些国家这样做了。 &nbsp;&nbsp;2014年1月，以国民饮食习惯不健康、肥胖问题严重而“著称”的墨西哥对碳酸饮料征税1比索/升，成为全球第一个开征“糖税”的国家。短短几年间，这一新的税种已在全球蔚然成风。刚刚过去的2017年，包括英国、法国在内的多个国家纷纷加入征收“糖税”的行列，还有十几个国家的征税计划已在议会讨论之中。 图片来源：《财经》杂志 &nbsp;&nbsp;在一些健康研究机构看来，以碳酸饮料为代表的含糖饮料是造成肥胖的罪魁祸首之一。在很多国家，肥胖问题最突出的群体就是贫困人口，他们消费这种高糖、高热量的食品比较多，而且又对价格比较敏感，“糖税”的征收使碳酸饮料销路更窄。 &nbsp;&nbsp;碳酸饮料销量连续下跌，第一个原因，是因为消费者的健康意识提升了。碳酸饮料不健康，卡路里含量太高，长期饮用者肥胖率会大幅度提升。而健康的果汁和苏打水则要健康得多，天然的甜香口感不是人工甜味剂能比的。 100年来，碳酸饮料的创新实在是微不足道 &nbsp;&nbsp;除了因为健康原因主动或被动远离碳酸饮料的消费者，碳酸饮料销量的下滑也与自身的固步自封有关。 &nbsp;&nbsp;碳酸饮料已经出现100多年了，在这100多年的时间里，人类的娱乐、通讯、工作、饮食等等都发生了翻天覆地的变化。碳酸饮料的广告和包装虽然一年比一年花哨，营销方式经常也是其他行业学习的样本，但是它推出的产品，百年来几乎没什么变化，还是熟悉的配方，熟悉的味道。 是洋葱，我加了洋葱（纯属无厘头） &nbsp;&nbsp;“小步快跑，试错迭代 。”吴晓波在《腾讯传》中多次提到腾讯致胜的方法。碳酸饮料不好卖，首要还在于产品的创新。事实上，碳酸饮料曾在口味上做出新的尝试，但最终以失败告终。此后，并没有其他太多爆品。 &nbsp;&nbsp;连娃哈哈老总宗庆后也曾反思，饮料企业这几年在产品创新方面确实没有做好，研发人员主要还是待在实验室里闭门造车，推出来的产品不能满足需求，因而消费者也不买账，很难打开市场。 对消费者来说，碳酸饮料也不再是酷与潮流的代表 &nbsp;&nbsp;而在中国，碳酸饮料销量的下滑除了健康和固步自封以外，还有其他的原因。 &nbsp;&nbsp;以前物质不充裕，饮料只要口感好、能解渴，就会卖的不错。但是现在不一样了，除了关心健康的人群会选择无糖饮料或者包装水以外，就算选择有糖饮料的人大多时候也都不会选择碳酸饮料。 &nbsp;&nbsp;一方面，随着中国人收入的增长，可以负担并选择得起其他饮料了，尽管碳酸饮料20年没有涨价，但很多人还是愿意花上数倍的价钱买杯咖啡或者奶茶。 &nbsp;&nbsp;另一方面，现在喝饮料不仅仅是为了解渴，经常还是一种社交行为，奶茶店、咖啡馆贩卖的不仅是饮品，还是空间和体验。 &nbsp;&nbsp;还有一点要承认，在精神层面碳酸饮料已经过时了，不再是酷与潮流的代表。 &nbsp;&nbsp;对80后来说，在大家都喝北冰洋和黑加仑饮料的年代，谁要是能拿出一瓶国外品牌的碳酸饮料，是件极其有面儿的事。很多人喝完碳酸饮料之后，还故意打出一个嗝，让别人不爽，但自己很爽。 &nbsp;&nbsp;而现在，只是一款普通得不能再普通的饮料。中国质量协会发布的报告指出，碳酸饮料目前只是依靠消费者对于口感的认可和个人习惯在保持着一定的用户黏性，其主要的消费人群80后、90后很多也大多是在青少年时期养成的习惯。 &nbsp;&nbsp;消费升级对碳酸饮料销量的影响，首先是消费者会选择更好、更健康的东西，这也是很多人都能感知到的。 越来越注重健康饮食的消费者开始逐渐“抛弃”碳酸饮料、转投健康饮品了 &nbsp;&nbsp;而消费升级中还有一类人，喜欢新鲜和个性，要不一样的东西。一份针对33个年收入超过40万以上的家庭访谈显示，海淘在很大程度上属于为精神需求买单的产物，很多小众品牌比传统奢侈品更受欢迎。 &nbsp;&nbsp;在饮料这样的快消品中也一样，百年未变的碳酸饮料在当下只是一瓶饮料，它无法提供商品以外的精神价值，也无法触达这一代消费者的心智。 &nbsp;&nbsp;而酷与时尚的代表在这个时代也早已变成了奶茶。就像那些买到网红奶茶的年轻人，第一件事不是喝奶茶，而是迅速拿出手机，用镜头拍下这一刻。 上世纪80年代，可乐是一种时尚，不少地方的饮料厂都跟进生产自己的可乐'' 可以说，在自身（产品固步自封）与时代（消费升级、健康观念转变）的共同作用下，碳酸饮料的时代或许要结束了。","tags":[{"name":"健康","slug":"健康","permalink":"xumenghao.top/tags/健康/"},{"name":"饮料","slug":"饮料","permalink":"xumenghao.top/tags/饮料/"}]},{"title":"“炸裂的《复联3》预告里，唯独就少了他的影子？","date":"2018-03-22T06:46:48.866Z","path":"/posts/4a17b200/","text":"《复仇者联盟3：无限战争》的首支预告在去年以24小时2.3亿的浏览量，创造了有史以来的最高纪录 James Xu - 中南海保安发来报道 前几天第二支预告更是在人群中炸开了花，只见叔的首页一片哀嚎。 美队徒手单挑灭霸，虐。 锤哥惨遭捏头，虐。 奇异博士被强行针灸，太虐了。 而且这些之前的预告里，大家已经看到了悲壮的画面。 比如幻视脑门的心灵宝石不保。 钢铁侠被灭霸一拳打飞。 小蜘蛛狠狠摔在地上，灭霸被指虐童。 不得不说，漫威连发刀子都不带重样，活活是要粉丝心碎的节奏。 而且官方早早就传出这一部电影中，会有重要角色死去。 鉴于退休，换血和合约到期等消息，美队和钢铁侠牺牲的可能性非常大，建议影迷们提早给自己做好心理建设，以免一时无法接受。 叔觉得，这些都还不是最惨的。 有一位超级英雄，迄今为止，在《复联3》的任何预告和片段里都没有出现。 没错，那个消失的男人，就是鹰眼。 叔一帧一帧的确认过，不算漫威的片头logo，就真的连一丁点迹象都没有。 公布的电影海报，也没有鹰眼的一席之地。 粉丝们都看不下去了，纷纷开启了改图模式。 有些是灵魂p图，有些是满屏鹰眼，还有凭借抠图让鹰眼一人分饰所有角色，以及纵向延展画幅，找到了头顶重担的鹰眼。 《娱乐周刊》整整放出了15张角色海报，他也没在其中。 善良的外国网友索性自制了一款封面，尽力挽尊。 不要说：“蚁人不是也没出场嘛。“ 也不要用“《复联3》里有67个超级英雄，不能每一个都顾及到”来反驳叔。 首先，蚁人最起码是有个人独立电影的，何况《蚁人2：黄蜂女现身》也马上要在今年暑期上映了。 再看看鹰眼。 他第一次现身于《雷神》（2011）的彩蛋，是《复仇者联盟》（2012）中的初代复仇者之一，怎么着都算是MCU中比较元老级的人物了。 然后美队、雷神、浩克、钢铁侠、黑寡妇都有镜头，只有他音信全无，还是不是一起战斗过的盆友了？ 不仅如此，他也是初代复仇者里面，唯一一个没有独立电影项目的成员。 《黑寡妇》已定于2020年上映，片酬都定了下来。如果到时候电影票房超过9亿，斯嘉丽·约翰逊一共能拿到3100万美元，将成为好莱坞片酬最高的女演员。 鹰眼却没有得到重视，后来传言这个角色可能会交给Netflix制作成剧，但计划迟迟未能拍板。 对此鹰眼的饰演者杰瑞米·雷纳表示：“我不知道这个想法现实不现实，但我饰演的每一位角色，我都非常想要深挖一下他们的故事，我总觉得我很多角色都没拍够，毫无疑问鹰眼也是其中一个！” 雷纳说得很在理，漫画中鹰眼克林特·巴顿绝对是个有故事的男同学。 身为一个在马戏团长大的孤儿，他有过污点，碰过黑钱，努力惩恶扬善，也曾自甘堕落。 他的感情线也足够丰富，迷恋过黑寡妇和猩红女巫，跟黄蜂女有过一腿，还和仿生鸟芭芭拉·莫尔斯结过婚。 不过叔最看重的，还是他的那一份坚持。 他没有超级血清，也没有酷炫装甲，更没有变种基因，却一次次义无反顾地用血肉之躯冲锋陷阵。 哪怕身负重伤，出院痊愈后，依然会不遗余力地维护正义。 这才是超级英雄真正的奥义啊。 在今年1月发售的《老人鹰眼》中，鹰眼还尽力赶在自己完全失明前，为昔日的队友复仇。 执着的精神和忠诚度都十分感人。 当周围都是超能力者和神的时候，鹰眼自然会显得普通。 恰恰是他平凡人的身份，在队伍中起到了平衡互补的作用。他既能提醒着那些能力超群的英雄们不要飞得离太阳太近，也在以他们为目标提升着自我。 鹰眼接受过全面的训练，擅长远程武器，尤其是弓箭，不同的箭头会有发挥不同的功能，包括套索，电击，爆炸等。 他赤手空拳的技能过关，还能轻易把身边的物体当作带有攻击性的武器，锡盘、纸牌、硬币这些东西到他手里都可以是危险品。 记得《蜘蛛侠：英雄归来》上映之后流行起了“没有战衣我什么都不是。”的梗。 所以没有弓箭的鹰眼，仍会是个厉害的家伙。 值得一提的是，他的臂力惊人。他的那把250磅力的弓，超级反派“交火”拿在手里连弓弦都拉不动。 本是一介凡人的他恪守着“从不失手”的信条，让自己变得超凡。 “我一旦失手,就只不过是个拿着弓箭的普通人而已。我心里一直都在欺骗着自己。这就是为什么我从不射失。” 虽然有时喜剧、综艺和观众私底下都会开玩笑地吐槽鹰眼弱，存在感低，官方也会自黑。 没了箭我只是个穿着滑稽的男人 但作为一个漫威老粉，叔这次真心觉得MCU对这个角色有点“始乱终弃”。 在电影宇宙中，鹰眼也是蛮苦逼了。 《复联》第一部，没等大显身手就被洛基用手杖蛊惑，瞬间反水，直到影片后半段才被黑寡妇的拳头打醒。 《复联2》上映前，猩红女巫的加入，把鹰眼的flag给立得高高的。 众人纷纷怀疑克林特会像漫画的情节一样，会死在精神失控的猩红女巫所制造的灾难中。 结果鹰眼又是在电影刚开场的一战中就受了伤，之后居然还交代出自己已婚育有3个孩子，还坐拥一个农场。 按这种电影的套路来讲，幸福家庭里的顶梁柱基本都命不久矣。 没想到快银竟然替他领了便当。 到了《美队3：内战》，决定回归家庭的鹰眼刚退休5分钟，就应美队的召唤前来支援。 最后他被和猎鹰、蚁人与猩红女巫一起关进了海底监狱，美队又把他们救了出来。 叔经常会看到有人吹捧钢铁侠美国队长。萝卜白菜各有所爱，这点无可非议。 但某些人对鹰眼一脸嫌弃，顺便还要中伤演员，叔就忍不住要评评理了。 杰瑞米·雷纳跟鹰眼有着一定的相似之处，都是草根出身，通过不懈的付出才取得了今天的成就。 他是大器晚成型的演员，在不出名的时候演过很多小型的独立电影。 一路打拼追寻表演梦的他，凭借08年的《拆弹部队》提名了奥斯卡影帝。 主要靠翻修房子为生的他那时远没有现在这么富裕，因为家里还没接上自来水，参加颁奖典礼之前是去星巴克洗的漱。 与阿汤哥合作的《碟中谍4》是他进入好莱坞商业制作的敲门砖，在此之后塑造起了硬汉形象。 2017年，《福布斯》公布的年度吸金力最强男星榜单中，杰瑞米·雷纳以1900万美元排名17，“美队”克里斯·埃文斯，“星爵”克里斯·普拉特和“绿巨人”马克·鲁弗洛都位列其后。 MCU里的男星也有不少人表达了自己对雷纳和鹰眼的青睐。 动作捕捉大师安迪·瑟金斯非常想和鹰眼组队，因为穿战服的雷纳相当有型。 当被问到想成为哪个超级英雄时，“冬兵“塞巴斯蒂安·斯坦表示鹰眼就很酷。 “幻视”保罗·贝坦尼也是对鹰眼称赞了一番。 这么多事实摆在这，瞧不起鹰眼的黑子服气吗？ 还不服的话，那只能靠杰瑞米·雷纳机智不失涵养的言辞来回怼毒评了。 罗素兄弟表示鹰眼在这部电影在进行他个人的旅程，《复联3》出镜少的角色会是《复联4》的主力。 有网友用《复联4：鹰蚁奇迹》这么个讽刺的标题，说出了大家心中的质疑。 尽管鹰眼换了发型，被拍到穿了新的战衣，也并不能确定鹰眼会更名转型成漫画中的“浪人”，毕竟我们也不是没被漫威骗过。 不管鹰眼身上是有不能透露的契口，还是彻底打了酱油，叔都希望漫威能给这个角色应有的待遇。","tags":[{"name":"话题","slug":"话题","permalink":"xumenghao.top/tags/话题/"},{"name":"复联3","slug":"复联3","permalink":"xumenghao.top/tags/复联3/"},{"name":"漫威","slug":"漫威","permalink":"xumenghao.top/tags/漫威/"}]},{"title":"前端常见跨域解决方案","date":"2018-03-22T06:19:57.576Z","path":"/posts/4a17b157/","text":"学习下跨域 James Xu - 中南海保安发来报道 什么是跨域？跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。 广义的跨域： 1.资源跳转： A链接、重定向、表单提交 2.资源嵌入：&lt;link&gt;、&lt;script&gt;、&lt;img&gt;、&lt;frame&gt;等dom标签，还有样式中background:url()、@font-face()等文件外链 3.脚本请求： js发起的ajax请求、dom和js对象的跨域操作等 其实我们通常所说的跨域是狭义的，是由浏览器同源策略限制的一类请求场景。 什么是同源策略？ 同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。 同源策略限制以下几种行为： 1.Cookie、LocalStorage 和 IndexDB 无法读取 2.DOM 和 Js对象无法获得 3.AJAX 请求不能发送 常见跨域场景 URL 说明 是否允许通信http://www.domain.com/a.jshttp://www.domain.com/b.js 同一域名，不同文件或路径 允许http://www.domain.com/lab/c.js http://www.domain.com:8000/a.jshttp://www.domain.com/b.js 同一域名，不同端口 不允许http://www.domain.com/a.jshttps://www.domain.com/b.js 同一域名，不同协议 不允许http://192.168.4.12/b.js 域名和域名对应相同ip 不允许http://www.domain.com/a.jshttp://www.domain.com/a.jshttp://x.domain.com/b.js 主域相同，子域不同 不允许http://domain.com/c.jshttp://www.domain1.com/a.jshttp://www.domain2.com/b.js 不同域名 不允许 跨域解决方案 1.通过jsonp跨域 2.document.domain + iframe跨域 3.location.hash + iframe 4.window.name + iframe跨域 5.postMessage跨域 6.跨域资源共享（CORS） 7.nginx代理跨域 8.nodejs中间件代理跨域 9.WebSocket协议跨域 一、通过jsonp跨域 通常为了减轻web服务器的负载，我们把js、css，img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信。 1.原生实现： &nbsp;&nbsp; var script = document.createElement(‘script’); &nbsp;&nbsp; script.type = ‘text/javascript’; &nbsp;&nbsp; // 传参并指定回调执行函数为onBack &nbsp;&nbsp; script.src = ‘http://www.domain2.com:8080/login? user=admin&amp;callback=onBack’; document.head.appendChild(script); // 回调执行函数 &nbsp;&nbsp;function onBack(res) { &nbsp;&nbsp;&nbsp;&nbsp; alert(JSON.stringify(res)); &nbsp;&nbsp;}服务端返回如下（返回时即执行全局函数）： onBack({“status”: true, “user”: “admin”}) 2.jquery ajax： $.ajax({&nbsp;&nbsp; url: ‘http://www.domain2.com:8080/login&#39;,&nbsp;&nbsp; type: ‘get’,&nbsp;&nbsp; dataType: ‘jsonp’, // 请求方式为jsonp&nbsp;&nbsp; jsonpCallback: “onBack”, // 自定义回调函数名&nbsp;&nbsp; data: {}}); 3.vue.js： this.$http.jsonp(‘http://www.domain2.com:8080/login&#39;, {&nbsp;&nbsp; params: {},&nbsp;&nbsp; jsonp: ‘onBack’}).then((res) =&gt; {&nbsp;&nbsp; console.log(res);}) 后端node.js代码示例： var querystring = require(‘querystring’);var http = require(‘http’);var server = http.createServer(); server.on(‘request’, function(req, res) {&nbsp;&nbsp; var params = qs.parse(req.url.split(‘?’)[1]);&nbsp;&nbsp; var fn = params.callback; &nbsp;&nbsp; // jsonp返回设置&nbsp;&nbsp; res.writeHead(200, { ‘Content-Type’: ‘text/javascript’ });&nbsp;&nbsp; res.write(fn + ‘(‘ + JSON.stringify(params) + ‘)’);&nbsp;&nbsp;&nbsp;&nbsp; res.end();}); server.listen(‘8080’);console.log(‘Server is running at port 8080…’); jsonp缺点：只能实现get一种请求。 二、 document.domain + iframe跨域此方案仅限主域相同，子域不同的跨域应用场景。 实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。 1.父窗口：(http://www.domain.com/a.html) &lt;iframe id=&quot;iframe&quot; src=&quot;http://child.domain.com/b.html&quot;&gt;&lt;/iframe&gt;&lt;script&gt; &nbsp;&nbsp;document.domain = ‘domain.com’; &nbsp;&nbsp;var user = ‘admin’;&lt;/script&gt; 2.子窗口：(http://child.domain.com/b.html) &lt;script&gt; &nbsp; document.domain = ‘domain.com’; &nbsp; // 获取父窗口中变量 &nbsp; alert(‘get js data from parent —&gt; ‘ + window.parent.user);&lt;/script&gt; 三、 location.hash + iframe跨域实现原理： a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。 具体实现：A域：a.html -&gt; B域：b.html -&gt; A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。 1.a.html：(http://www.domain1.com/a.html) &lt;iframe id=&quot;iframe&quot; src=&quot;http://www.domain2.com/b.html&quot; style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;&lt;script&gt; &nbsp; var iframe = document.getElementById(‘iframe’); &nbsp; // 向b.html传hash值 &nbsp; setTimeout(function() { &nbsp;&nbsp; iframe.src = iframe.src + ‘#user=admin’; &nbsp;}, 1000); &nbsp; // 开放给同域c.html的回调方法 &nbsp;&nbsp; alert(‘data from c.html —&gt; ‘ + res); &nbsp; }&lt;/script&gt; 2.b.html：(http://www.domain2.com/b.html) &lt;iframe id=&quot;iframe&quot; src=&quot;http://www.domain1.com/c.html&quot; style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;&lt;script&gt; &nbsp; var iframe = document.getElementById(‘iframe’); &nbsp; // 监听a.html传来的hash值，再传给c.html &nbsp; window.onhashchange = function () { &nbsp;&nbsp; iframe.src = iframe.src + location.hash; &nbsp; };&lt;/script&gt; 3.c.html：(http://www.domain1.com/c.html) &lt;script&gt; // 监听b.html传来的hash值 &nbsp; window.onhashchange = function () { &nbsp;&nbsp; // 再通过操作同域a.html的js回调，将结果传回 &nbsp;&nbsp;window.parent.parent.onCallback (‘hello:’+location.hash.replace(‘#user=’,’’)); &nbsp;};&lt;/script&gt; 四、 window.name + iframe跨域window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。 1.a.html：(http://www.domain1.com/a.html) var proxy = function(url, callback) {&nbsp;&nbsp; var state = 0;&nbsp;&nbsp; var iframe = document.createElement(‘iframe’); &nbsp;&nbsp; // 加载跨域页面&nbsp;&nbsp; iframe.src = url; &nbsp;&nbsp; // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name&nbsp;&nbsp; iframe.onload = function() {&nbsp;&nbsp;&nbsp; if (state === 1) {&nbsp;&nbsp;&nbsp;&nbsp; // 第2次onload(同域proxy页)成功后，读取同域window.name中数据&nbsp;&nbsp;&nbsp;&nbsp; callback(iframe.contentWindow.name);&nbsp;&nbsp;&nbsp;&nbsp; destoryFrame(); &nbsp;&nbsp;&nbsp; } else if (state === 0) {&nbsp;&nbsp;&nbsp; // 第1次onload(跨域页)成功后，切换到同域代理页面&nbsp;&nbsp;&nbsp; iframe.contentWindow.location = ‘http://www.domain1.com/proxy.html&#39;;&nbsp;&nbsp;&nbsp; state = 1;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp; }; &nbsp; document.body.appendChild(iframe); &nbsp;&nbsp; // 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）&nbsp;&nbsp; function destoryFrame() {&nbsp;&nbsp;&nbsp;&nbsp; iframe.contentWindow.document.write(‘’);&nbsp;&nbsp;&nbsp;&nbsp; iframe.contentWindow.close();&nbsp;&nbsp;&nbsp;&nbsp; document.body.removeChild(iframe);&nbsp;&nbsp; }}; // 请求跨域b页面数据proxy(‘http://www.domain2.com/b.html&#39;, function(data){&nbsp;&nbsp; alert(data);}); 2.proxy.html：(http://www.domain1.com/proxy….中间代理页，与a.html同域，内容为空即可。 3.b.html：(http://www.domain2.com/b.html) &lt;script&gt; &nbsp;&nbsp;window.name = ‘This is domain2 data!’;&lt;/script&gt; 总结：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。 五、 postMessage跨域postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题： 页面和其打开的新窗口的数据传递 多窗口之间消息传递 页面与嵌套的iframe消息传递 上面三个场景的跨域数据传递 用法：postMessage(data,origin)方法接受两个参数data： html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。origin： 协议+主机+端口号，也可以设置为”*”，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为”/”。 1.a.html：(http://www.domain1.com/a.html) &lt;iframe id=&quot;iframe&quot; src=&quot;http://www.domain2.com/b.html&quot; style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;&lt;script&gt; &nbsp;var iframe = document.getElementById(‘iframe’); &nbsp;iframe.onload = function() { &nbsp;&nbsp;var data = { &nbsp;&nbsp;&nbsp;name: ‘aym’ &nbsp;}; &nbsp; // 向domain2传送跨域数据 &nbsp;iframe.contentWindow.postMessage(JSON.stringify(data),’http://www.domain2.com&#39;); }; &nbsp; // 接受domain2返回数据 &nbsp; window.addEventListener(‘message’, function(e) { &nbsp;&nbsp; alert(‘data from domain2 —&gt; ‘ + e.data); &nbsp;&nbsp;}, false);&lt;/script&gt; 2.）b.html：(http://www.domain2.com/b.html) &lt;script&gt;// 接收domain1的数据window.addEventListener(‘message’, function(e) {&nbsp;&nbsp;alert(‘data from domain1 —&gt; ‘ + e.data); var data = JSON.parse(e.data); &nbsp; if (data) { &nbsp;&nbsp;data.number = 16; &nbsp;&nbsp; // 处理后再发回domain1 &nbsp;&nbsp; window.parent.postMessage(JSON.stringify (data), &gt;&nbsp;&nbsp;&nbsp;’http://www.domain1.com&#39;); &nbsp;&nbsp; } }, false);&lt;/script&gt; 六、 跨域资源共享（CORS）普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置。带cookie请求：前后端都需要设置字段，另外需注意：所带cookie为跨域请求接口所在域的cookie，而非当前页。目前，所有浏览器都支持该功能(IE8+：IE8/9需要使用XDomainRequest对象来支持CORS）)，CORS也已经成为主流的跨域解决方案。 一、前端设置： 1.原生ajax // 前端设置是否带cookiexhr.withCredentials = true; 示例代码： var xhr = new XMLHttpRequest(); // IE8/9需用window.XDomainRequest兼容 // 前端设置是否带cookiexhr.withCredentials = true; xhr.open(‘post’, ‘http://www.domain2.com:8080/login&#39;, true);xhr.setRequestHeader(‘Content-Type’, ‘application/x-www-form-urlencoded’);xhr.send(‘user=admin’); xhr.onreadystatechange = function() {&nbsp;&nbsp; if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) {&nbsp;&nbsp;&nbsp;&nbsp; alert(xhr.responseText);&nbsp;&nbsp; }}; 2.jQuery ajax $.ajax({&nbsp;&nbsp; …&nbsp;&nbsp; xhrFields: {&nbsp;&nbsp;&nbsp;&nbsp; withCredentials: true // 前端设置是否带cookie&nbsp;&nbsp; },&nbsp;&nbsp; crossDomain: true, // 会让请求头中包含跨域的额外信息，但不会含cookie&nbsp;&nbsp; …}); 3.vue框架 在vue-resource封装的ajax组件中加入以下代码： Vue.http.options.credentials = true 二、 服务端设置： 若后端设置成功，前端浏览器控制台则不会出现跨域报错信息，反之，说明没设成功。 1.）Java后台： /* 导入包：import javax.servlet.http.HttpServletResponse; 接口参数中定义：HttpServletResponse response*/response.setHeader(“Access-Control-Allow-Origin”, “http://www.domain1.com&quot;); // 若有端口需写全（协议+域名+端口）response.setHeader(“Access-Control-Allow-Credentials”, “true”); 2.）Nodejs后台示例： var http = require(‘http’);var server = http.createServer();var qs = require(‘querystring’); server.on(‘request’, function(req, res) {&nbsp;&nbsp; var postData = ‘’; &nbsp;&nbsp; // 数据块接收中&nbsp;&nbsp; req.addListener(‘data’, function(chunk) {&nbsp;&nbsp;&nbsp;&nbsp; postData += chunk;&nbsp;&nbsp; }); &nbsp;&nbsp; // 数据接收完毕&nbsp;&nbsp; req.addListener(‘end’, function() {&nbsp;&nbsp;&nbsp;&nbsp; postData = qs.parse(postData); &nbsp;&nbsp;&nbsp;&nbsp; // 跨域后台设置&nbsp;&nbsp;&nbsp;&nbsp; res.writeHead(200, {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ‘Access-Control-Allow-Credentials’: ‘true’, // 后端允许发送Cookie&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ‘Access-Control-Allow-Origin’: ‘http://www.domain1.com&#39;, // 允许访问的域（协议+域名+端口）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ‘Set-Cookie’: ‘l=a123456;Path=/;Domain=www.domain2.com;HttpOnly&#39; // HttpOnly:脚本无法读取cookie&nbsp;&nbsp;&nbsp;&nbsp; }); &nbsp;&nbsp; res.write(JSON.stringify(postData));&nbsp;&nbsp; res.end();&nbsp;&nbsp; });}); server.listen(‘8080’);console.log(‘Server is running at port 8080…’); 七、 nginx代理跨域1、 nginx配置解决iconfont跨域 浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。 location / { add_header Access-Control-Allow-Origin *;} 2、 nginx反向代理接口跨域 跨域原理： 同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。 实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。 nginx具体配置： #proxy服务器server { listen 81; server_name www.domain1.com; location / { proxy_pass http://www.domain2.com:8080; #反向代理 proxy_cookie_domain www.domain2.com www.domain1.com; #修改cookie里域名 index index.html index.htm; 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用 add_header Access-Control-Allow-Origin http://www.domain1.com; #当前端只跨域不带cookie时，可为* add_header Access-Control-Allow-Credentials true; }} 1.前端代码示例： var xhr = new XMLHttpRequest(); // 前端开关：浏览器是否读写cookiexhr.withCredentials = true; // 访问nginx中的代理服务器xhr.open(‘get’, ‘http://www.domain1.com:81/?user=admin&#39;, true);xhr.send(); Nodejs后台示例： var http = require(‘http’);var qs = require(‘querystring’);var server = http.createServer(); server.on(‘request’, function(req, res) {&nbsp;&nbsp; var params = qs.parse(req.url.substring(2)); &nbsp;&nbsp; // 向前台写cookie&nbsp;&nbsp; res.writeHead(200, {&nbsp;&nbsp;&nbsp;&nbsp; ‘SetCookie’:’l=a123456;Path=/;Domain=www.domain2.com;HttpOnly&#39; // HttpOnly:脚本无法读取&nbsp;&nbsp; }); &nbsp;&nbsp; res.write(JSON.stringify(params));&nbsp;&nbsp; res.end();}); server.listen(‘8080’);console.log(‘Server is running at port 8080…’); 八、 Nodejs中间件代理跨域node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发。 一、 非vue框架的跨域（2次跨域） 利用node + express + http-proxy-middleware搭建一个proxy服务器。 1.前端代码示例： var xhr = new XMLHttpRequest(); // 前端开关：浏览器是否读写cookiexhr.withCredentials = true; // 访问http-proxy-middleware代理服务器xhr.open(‘get’, ‘http://www.domain1.com:3000/login?user=admin&#39;, true);xhr.send(); 2.中间件服务器： var express = require(‘express’);var proxy = require(‘http-proxy-middleware’);var app = express(); app.use(‘/‘, proxy({&nbsp;&nbsp; // 代理跨域目标接口&nbsp;&nbsp; target: ‘http://www.domain2.com:8080&#39;,&nbsp;&nbsp; changeOrigin: true, &nbsp;&nbsp; // 修改响应头信息，实现跨域并允许带cookie&nbsp;&nbsp; onProxyRes: function(proxyRes, req, res) {&nbsp;&nbsp;&nbsp;&nbsp; res.header(‘Access-Control-Allow-Origin’, ‘http://www.domain1.com&#39;);&nbsp;&nbsp;&nbsp;&nbsp; res.header(‘Access-Control-Allow-Credentials’, ‘true’);&nbsp;&nbsp; }, &nbsp;&nbsp; // 修改响应信息中的cookie域名&nbsp;&nbsp; cookieDomainRewrite: ‘www.domain1.com&#39; // 可以为false，表示不修改})); app.listen(3000);console.log(‘Proxy server is listen at port 3000…’); 3.Nodejs后台同（六：nginx） 二、 vue框架的跨域（1次跨域） 利用node + webpack + webpack-dev-server代理接口跨域。在开发环境下，由于vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域，无须设置headers跨域信息了。 webpack.config.js部分配置： module.exports = {&nbsp;&nbsp; entry: {},&nbsp;&nbsp; module: {},&nbsp;&nbsp; …&nbsp;&nbsp; devServer: {&nbsp;&nbsp;&nbsp;&nbsp; historyApiFallback: true,&nbsp;&nbsp;&nbsp;&nbsp; proxy: [{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; context: ‘/login’,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; target: ‘http://www.domain2.com:8080&#39;, // 代理跨域目标接口&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; changeOrigin: true,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cookieDomainRewrite: ‘www.domain1.com&#39; // 可以为false，表示不修改&nbsp;&nbsp;&nbsp;&nbsp; }],&nbsp;&nbsp; noInfo: true&nbsp;&nbsp; }} 九、 WebSocket协议跨域WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。原生WebSocket API使用起来不太方便，我们使用Socket.io，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。 1.前端代码： &lt;div&gt;user input：&lt;input type=&quot;text&quot;&gt;&lt;/div&gt; &lt;script src=&quot;./socket.io.js&quot;&lt;/script&gt;var socket = io(‘http://www.domain2.com:8080&#39;);// 连接成功处理socket.on(‘connect’, function() {&nbsp;&nbsp; // 监听服务端消息&nbsp;&nbsp; socket.on(‘message’, function(msg) {&nbsp;&nbsp;&nbsp;&nbsp; console.log(‘data from server: —&gt; ‘ + msg);&nbsp;&nbsp; });&nbsp;&nbsp; // 监听服务端关闭&nbsp;&nbsp; socket.on(‘disconnect’, function() {&nbsp;&nbsp;&nbsp;&nbsp; console.log(‘Server socket has closed.’);&nbsp;&nbsp; });});document.getElementsByTagName(‘input’)[0].onblur = function() {&nbsp;&nbsp; socket.send(this.value);};2.Nodejs socket后台： var http = require(‘http’);var socket = require(‘socket.io’);// 启http服务 var server = http.createServer(function(req, res) {&nbsp;&nbsp; res.writeHead(200, {&nbsp;&nbsp;&nbsp;&nbsp; ‘Content-type’: ‘text/html’&nbsp;&nbsp; });&nbsp;&nbsp; res.end();}); server.listen(‘8080’);console.log(‘Server is running at port 8080…’); // 监听socket连接socket.listen(server).on(‘connection’, function(client) {&nbsp;&nbsp; // 接收信息&nbsp;&nbsp; client.on(‘message’, function(msg) {&nbsp;&nbsp;&nbsp;&nbsp; client.send(‘hello：’ + sg);&nbsp;&nbsp;&nbsp;&nbsp; console.log(‘data from client: —&gt; ‘ + msg);&nbsp;&nbsp; }); &nbsp;&nbsp; // 断开处理&nbsp;&nbsp; client.on(‘disconnect’, function() {&nbsp;&nbsp;&nbsp;&nbsp; console.log(‘Client socket has closed.’);&nbsp;&nbsp; });});","tags":[{"name":"前端","slug":"前端","permalink":"xumenghao.top/tags/前端/"},{"name":"跨域","slug":"跨域","permalink":"xumenghao.top/tags/跨域/"},{"name":"postmessage","slug":"postmessage","permalink":"xumenghao.top/tags/postmessage/"}]},{"title":"不重视睡眠，谈什么健康？","date":"2018-03-22T06:19:57.553Z","path":"/posts/4a17b159/","text":"早睡早起精神好！ James Xu - 中南海保安发来报道 &nbsp;&nbsp;一个公认的事实是，现在人们越来越重视健康了，所以相关行业蓬勃发展。但事实也证明，许多人尽管重视健康，却不知道如何实现健康的目的，一边定期体检、做疾病筛查，购买健康保险，定期健身，按卡路里和营养搭配三餐，一边却连某些基本的健康法则都很难做到，比如养成良好的作息习惯，保证充足睡眠。 玩手机，从小孩子抓起。。。 &nbsp;&nbsp;3月21日是第18个世界睡眠日，今年的主题为“规律作息，健康睡眠”。一项针对全国20多个省（区市）的《2018年中国的90后年轻人睡眠指数研究》显示，90后的睡眠均值为66.26（满分为100），普遍睡眠不佳，31.1%的人晚睡晚起，能保持早睡早起作息的只占17.5%，接近1/3的人上午9点后起床。 早睡早起很难吗 &nbsp;&nbsp;超过80%的90后不能早睡早起，当然不排除一些人是受工作性质所迫，但身边的无数案例告诉我们，至少有很大一部分人是耽于玩乐，舍不得早睡，自然也就很难早起了。玩乐者，有的是捧着手机对着电脑“独乐乐”，有的是跟朋友一起“众乐乐”，无论哪一种，恐怕都没有非熬夜不可的必要性，只是习惯了，缺乏足够动力去调整生物钟。 工作学习导致不能早睡？ &nbsp;&nbsp;有人从“年轻时拿命换钱，年老时拿钱换命”这句俗语中看出了年轻人轻忽健康的某种历史经验，以为“都是这么过来的”，这实在是一种错误的经验主义。须知今天的年轻人跟过去的相比，可玩的多了，夜生活多了，运动得少了，生活习惯从整体来看更加不利于健康，现在的青少年儿童近视率高发、身体素质下降，小小年纪得颈椎病、三高，这些都是过去的孩子所没有的。比如，80后就不像90后、00后，在十几岁时大多没有熬夜刷手机的经历，作息时间和视力没有经历过严重“摧残”，“过来人”的经验，有些已经不适用于年轻人了，仅从健康角度来说，等90后、00后步入中年，可能会面临与今天的中年人不同的健康问题和风险。 玩手机时间长有害视力 &nbsp;&nbsp;科学研究结果表明，长期缺乏优质睡眠会导致抑郁、焦虑，记忆力下降等等，危害不比忽视疾病筛查、定期体检等等来得小。当今世界上有不少呼吁疾病筛查、关注XX健康的公益项目，当然都很有价值，但对许多人特别是广大网友来说，呼吁“规律作息，健康睡眠”的意义可能更为直接迫切。要真的重视健康，就不能对睡眠这件大事视而不见，否则就别奢谈养生、健身、治未病，因为那跟“可乐加枸杞”“啤酒泡党参”一样，只能是个笑话。","tags":[{"name":"睡眠","slug":"睡眠","permalink":"xumenghao.top/tags/睡眠/"},{"name":"健康","slug":"健康","permalink":"xumenghao.top/tags/健康/"}]},{"title":"“月薪2万”为何招不到工人？","date":"2018-03-22T06:19:57.540Z","path":"/posts/4a17b158/","text":"近几日，一篇题为《活久见！月薪2万！广州老板当街大排长龙任人选！90后却不愿干》的文章引发热议。说的是广州开春“招工难”，招工者多，应征者少，甚至有制衣厂老板开出月薪2万的报酬，居然还谈不拢。“月薪2万招不到工人”，这是怎么回事？“用工荒”的真相，到底是什么？ James Xu - 中南海保安发来报道 老板和工人们陷入了互相算计的囚徒困境——年轻的工人非高薪就不去干活，就算干活也给你磨洋工；而老板的策略就是计件工资，干多少给多少，认为《劳动合同法》过于偏帮劳动者，那就用“高薪”骗你进来，利用《劳动法》执行不严强迫员工加班。 工厂里发生的事情，在“高大上”的IT行业也在上演。两者非常类似，相互比较，有助于让都市白领和工人群体深入理解对方。 工厂里发生的事情，在“高大上”的IT行业也在上演。两者非常类似，相互比较，有助于让都市白领和工人群体深入理解对方。 “月薪2万”是老板的画饼术，但这种画并不是没有理由 “月薪2万，90后却不愿干”，这个标题实在太扎眼，毕竟，月薪2万对于一线城市的白领阶层来说，也不能说算少，何况是工厂的工人。于是，读者们纷纷去看文章中的“月薪2万”到底是怎么回事。果然一看很多人就觉得有问题，原文说的是，“‘四线工做一件短袖T恤可以拿到1元，以前是0.8元，还是不满意’，一名揾工者仔细看过姚女士手中的衣服后，价钱没谈拢，默默走开了。老板娘透露，一名熟练的四线工一个月工资能轻松破万，‘厂里雇用的一个靓仔，一天可以做700多件衣服，一个月可拿到2万元’。 元宵节过后，广州海珠区的招工者们 &nbsp;&nbsp;显然，这2万元不是固定工资，而是计件工资，就算是熟手，一天700多件，显然也会累得够呛，而且通过简单的算术就可以知道，“一个月可拿到2万元”的前提是几乎整月无休。难怪一条高赞的网友评论是这么说的，“要么是计件，要么是提成，招人时所谓的高薪都是画的饼。无责任底薪2万招工人试试？” &nbsp;&nbsp;还有网友在留言中展示了对老板们更为激烈的态度——“还上万？现在招人的时候特别是工厂，说得天花乱坠，什么五六千的工资，你知道他怎么算的吗？按照一个熟练工，老员工两班倒，再加上你扣除的五险，和它给你缴的五险等等，全部算下来有这么多，这是你累死累活换来的，到手也就4000出头，知道为什么工厂不好招人吗？那是因为工厂不把操作工当人！知道为什么工厂不把人当人吗？那是因为管理层认为中国什么都缺，就不缺人，20岁的招不到我找30的，30的招不到招40的，大学的招不到招高中的，高中的招不到招初中的，没有底线。” &nbsp;&nbsp;站在工人一方的网友们的看法，显然与老板们的视角不一样。在老板们看来，“招工难”的原因，是因为现在的年轻人不爱吃苦，嫌累，不像他们的父辈，尤其是第一代进城农民工那么吃苦耐劳。而且认为现在的年轻人也不愿意磨练技术，技校的教育水平差，进厂了也只是为了见见世面，甚至谈恋爱，没有一直在工厂待下去的决心。 &nbsp;&nbsp;近期一篇流传广泛的解读文章，尤其戳中了老板的内心——“90后的农村员工，绝大多数是喝可乐、吃麦当劳长大的，刚刚出来工作的时候，就遇到新《劳动合同法》的强力保护，根本不关心企业的难处。90后员工只会和老板儿子比生活待遇，然后产生怨恨心态。”言下之意，老板们搞一堆逼你加班还克扣工资的门门道道，也是被逼的，有理由的。非此治不了这些90后员工。 新一代的农民工，不像老一辈那么爱吃苦，他们有自己的生活 &nbsp;&nbsp;然而说老实话，谁愿意吃苦受累了？挑轻松的活干，这是人之常情，而像第一代农民工那么爱吃苦，反而是特殊年代的特殊状态，“他们上有老下有小，不敢歇，也不敢闹，他们拼命干活的动力是子女绝不再进厂当工人，能够改变家族命运。”指望90后农民工继续那么吃苦耐劳，既不现实，也不公平。而且，只要工人这个职业依然难以发固定薪资，发五险一金，依然称不上体面，各种职校、技校就依然处于鄙视链的底端，生源、教育水平就上不来，因此陷入恶性循环。指望像德国那样70%的年轻人上技校？不好意思，别人读完技校出来后都是高级技工，是拿高薪的体面人。 &nbsp;&nbsp;所以，老板和工人们就陷入了互相算计的囚徒困境——年轻的工人非高薪就不去干活，就算干活也给你磨洋工；而老板的策略就是计件工资，干多少给多少，认为《劳动合同法》过于偏帮劳动者，那就用“高薪”骗你进来，利用《劳动法》执行不严强迫员工加班。互相怨恨，从而陷入死循环。“用工荒”很大程度上就是这么来的。 IT界的“996”工作制，与“用工荒”产生的原因很类似 &nbsp;&nbsp;工厂里发生的事情，在“高大上”的IT行业也在上演。两者非常类似，相互比较，有助于让都市白领和工人群体深入理解对方。 &nbsp;&nbsp;一线、二线城市的许多知名IT企业，发生的事情叫做“996”。即“早上9点上班，晚9点下班，一周上6天班”，刨去每天的2小时午饭休息时间，相当于每周工作60小时，比劳动法规定的40小时要高出50%。通常，公司在创业阶段，或者陷入激烈同业竞争，强调“狼性”的时候就会执行“996”。如此高强度的工作，让很多程序员叫苦不迭，最让人抱怨的是，“996”让人失去了自己的生活，全部身心都投入到了工作上。唯一的安慰，大概只有那不菲的报酬，或许还有加班工资。 996”工作制让很多IT从业人员感到痛苦 &nbsp;&nbsp;问题来了，为什么以有钱、高薪著称的IT行业，不把薪水调低些，多招些人，而非得以高薪强迫员工“996”呢？ &nbsp;&nbsp;有很多具体原因。比如若调低薪水，那么根本招不来人才——在“成功狂热”泛滥的当下，很多人就是宁可累成狗也不愿意低薪，因为高薪有太多的意义，意味着行业的认可，意味未来的前景，在整个行业氛围熏陶下，人们只能被动接受“高付出才能有高薪”；又比如行业传染，别人的公司搞996效果不错，那我也学学，于是“狼性”被很多创业企业老板挂在嘴边，而996这种氛围，一旦形成了，很少人有敢按时下班的勇气，就是没事也得熬到9点以后。 &nbsp;&nbsp;事实上，对于很多老板来说，之所以信奉“996”，其实还是认为只有让员工疯狂加班，才能对得起那份高薪，而如果让员工8小时下班，那么员工肯定会磨洋工不给你好好出力，多招一些人，只会变成多招一些懒汉。所以，在员工看来是“一个人拿两个人的钱干三个人的事”，而在一些老板眼里成为理所当然，在他们看来，这是让少部分精英充分投入干活，效率更高。 对“狼性文化”的推崇在企业家之间很流行 &nbsp;&nbsp;老板们的看法并不是毫无道理，之前就有一些国外的调查显示，包括中国在内的东亚人工作时间虽长，但敬业程度，即工作的投入程度并不高。解决之道就是强迫员工加班，而很多员工的对应之道就是消极怠工。从而陷入恶性循环。 现状不可持续，让员工都能成为“体面人”才能让企业长久地发展 &nbsp;&nbsp;老板员工们互相算计，陷入囚徒困境，这显然是一种非常糟糕的局面。长此以往，“用工荒”不仅会阻碍社会经济发展，也会阻碍产业升级——熟练工人大量缺乏，职校技校培训水平低，没人看得上眼。年轻人嫌工作无尊严，收入不稳定，总之不体面，即便是农民工二代，也会质疑为啥要继续做这一行，因此许多年轻人纷纷转型做销售、人事等岗位，至少比工人体面。 &nbsp;&nbsp;这对于IT行业也一样，一旦IT业的发展红利减弱，饼不能越做越大了，就会有越来越多的人质疑为何还要“996”——目前实行“996”工作制的企业，名声已经很不好，但IT企业一旦放弃加班，其竞争力是否会被传统行业跟上呢？不管怎么说，畸形的加班制度只会加剧人心的怨恨，这注定是不能持续的。 德国的产业工人。让工人阶层更加“体面”，非常重要 &nbsp;&nbsp;解决问题的方式，只能是促进整个社会产生共识，加强劳资协商机制，让企业的员工都能成为“体面人”。何谓体面？不用太苦太累，能够每周放两天假，有不错的收入，还有足够的社会保障，即便是“厂弟”、“厂妹”，也会感觉到体面。 &nbsp;&nbsp;如何做到这一点？确实不容易实现。但一些路径是存在的，比如在严格执行劳动法的基础上，一定程度调整劳动合同法，让资方和劳方的权益都更加受到保障。对此，一些相关的机构该采取切实行动了。","tags":[{"name":"话题","slug":"话题","permalink":"xumenghao.top/tags/话题/"},{"name":"招工","slug":"招工","permalink":"xumenghao.top/tags/招工/"},{"name":"高薪","slug":"高薪","permalink":"xumenghao.top/tags/高薪/"},{"name":"社会","slug":"社会","permalink":"xumenghao.top/tags/社会/"}]},{"title":"Hello World","date":"2018-03-22T03:58:27.331Z","path":"/posts/4a17b156/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"从输入url到页面展示到底发生了什么","date":"2018-03-21T02:13:49.000Z","path":"/posts/4a17b160/","text":"浏览器解析url的过程 James Xu - 中南海保安发来报道 阅读目录 1、输入地址2、浏览器查找域名的 IP 地址3、浏览器向 web 服务器发送一个 HTTP 请求4、服务器的永久重定向响应5、浏览器跟踪重定向地址6、服务器处理请求7、服务器返回一个 HTTP 响应 8、浏览器显示 HTML9、浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等） &nbsp;&nbsp;刚开始写这篇文章还是挺纠结的，因为网上搜索“从输入url到页面展示到底发生了什么”，你可以搜到一大堆的资料。而且面试这道题基本是必考题，二月份面试的时候，虽然知道这个过程发生了什么，不过当面试官一步步追问下去的，很多细节就不太清楚了。 &nbsp;&nbsp;最近刚好也在看http协议相关的东西，所以想对这个话题来个深入的总结，本文的目的是通过输入url之后发生的事情来做知识的总结和扩展。所以文章可能会很杂。 总的过程大概如下: 1、输入地址 &nbsp;&nbsp;当我们开始在浏览器中输入网址的时候，浏览器其实就已经在智能的匹配可能得 url 了，他会从历史记录，书签等地方，找到已经输入的字符串可能对应的 url，然后给出智能提示，让你可以补全url地址。对于 google的chrome 的浏览器，他甚至会直接从缓存中把网页展示出来，就是说，你还没有按下 enter，页面就出来了。 2、浏览器查找域名的 IP 地址 1、请求一旦发起，浏览器首先要做的事情就是解析这个域名，一般来说，浏览器会首先查看本地硬盘的 hosts 文件，看看其中有没有和这个域名对应的规则，如果有的话就直接使用 hosts 文件里面的 ip 地址。 2、如果在本地的 hosts 文件没有能够找到对应的 ip 地址，浏览器会发出一个 DNS请求到本地DNS服务器 。本地DNS服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动。 3、查询你输入的网址的DNS请求到达本地DNS服务器之后，本地DNS服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果，此过程是递归的方式进行查询。如果没有，本地DNS服务器还要向DNS根服务器进行查询。 4、根DNS服务器没有记录具体的域名和IP地址的对应关系，而是告诉本地DNS服务器，你可以到域服务器上去继续查询，并给出域服务器的地址。这种过程是迭代的过程。 5、本地DNS服务器继续向域服务器发出请求，在这个例子中，请求的对象是.com域服务器。.com域服务器收到请求之后，也不会直接返回域名和IP地址的对应关系，而是告诉本地DNS服务器，你的域名的解析服务器的地址。 6、最后，本地DNS服务器向域名的解析服务器发出请求，这时就能收到一个域名和IP地址对应关系，本地DNS服务器不仅要把IP地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。 下面这张图很完美的解释了这一过程： 知识扩展： 1、什么是DNS？ &nbsp;&nbsp;DNS（Domain Name System，域名系统），因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。 &nbsp;&nbsp;通俗的讲，我们更习惯于记住一个网站的名字，比如www.baidu.com,而不是记住它的ip地址，比如：167.23.10.2。而计算机更擅长记住网站的ip地址，而不是像www.baidu.com等链接。因为，DNS就相当于一个电话本，比如你要找www.baidu.com这个域名，那我翻一翻我的电话本，我就知道，哦，它的电话（ip）是167.23.10.2。 2、DNS查询的两种方式：递归查询和迭代查询 1、递归解析 &nbsp;&nbsp;当局部DNS服务器自己不能回答客户机的DNS查询时，它就需要向其他DNS服务器进行查询。此时有两种方式，如图所示的是递归方式。局部DNS服务器自己负责向其他DNS服务器进行查询，一般是先向该域名的根域服务器查询，再由根域名服务器一级级向下查询。最后得到的查询结果返回给局部DNS服务器，再由局部DNS服务器返回给客户端。 2、迭代解析 &nbsp;&nbsp;当局部DNS服务器自己不能回答客户机的DNS查询时，也可以通过迭代查询的方式进行解析，如图所示。局部DNS服务器不是自己向其他DNS服务器进行查询，而是把能解析该域名的其他DNS服务器的IP地址返回给客户端DNS程序，客户端DNS程序再继续向这些DNS服务器进行查询，直到得到查询结果为止。也就是说，迭代解析只是帮你找到相关的服务器而已，而不会帮你去查。比如说：baidu.com的服务器ip地址在192.168.4.5这里，你自己去查吧，本人比较忙，只能帮你到这里了。 3、DNS域名称空间的组织方式 我们在前面有说到根DNS服务器，域DNS服务器，这些都是DNS域名称空间的组织方式。按其功能命名空间中用来描述 DNS 域名称的五个类别的介绍详见下表中，以及与每个名称类型的示例 （盗图） 4、DNS负载均衡 当一个网站有足够多的用户的时候，假如每次请求的资源都位于同一台机器上面，那么这台机器随时可能会蹦掉。处理办法就是用DNS负载均衡技术，它的原理是在DNS服务器中为同一个主机名配置多个IP地址,在应答DNS查询时,DNS服务器对每个查询将以DNS文件中主机记录的IP地址按顺序返回不同的解析结果,将客户端的访问引导到不同的机器上去,使得不同的客户端访问不同的服务器,从而达到负载均衡的目的｡例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等。 3、浏览器向 web 服务器发送一个 HTTP 请求 &nbsp;&nbsp;拿到域名对应的IP地址之后，浏览器会以一个随机端口（1024&lt;端口&lt;65535）向服务器的WEB程序（常用的有httpd,nginx等）80端口发起TCP的连接请求。这个连接请求到达服务器端后（这中间通过各种路由设备，局域网内除外），进入到网卡，然后是进入到内核的TCP/IP协议栈（用于识别该连接请求，解封包，一层一层的剥开），还有可能要经过Netfilter防火墙（属于内核的模块）的过滤，最终到达WEB程序，最终建立了TCP/IP的连接。 TCP连接如图所示: &nbsp;&nbsp;建立了TCP连接之后，发起一个http请求。一个典型的 http request header 一般需要包括请求的方法，例如 GET 或者 POST 等，不常用的还有 PUT 和 DELETE 、HEAD、OPTION以及 TRACE 方法，一般的浏览器只能发起 GET 或者 POST 请求。 客户端向服务器发起http请求的时候，会有一些请求信息，请求信息包含三 个部分： 请求方法URI协议/版本 请求头(Request Header) 请求正文： 下面是一个完整的HTTP请求例子： GET/sample.jspHTTP/1.1 Accept:image/gif.image/jpeg,/Accept-Language:zh-cnConnection:Keep-AliveHost:localhostUser-Agent:Mozila/4.0(compatible;MSIE5.01;Window NT5.0)Accept-Encoding:gzip,deflate username=JamesXu&amp;password=1234 &nbsp;&nbsp;注意：最后一个请求头之后是一个空行，发送回车符和换行符，通知服务器以下不再有请求头。 （1）请求的第一行是“方法URL议/版本”：GET/sample.jsp HTTP/1.1（2）请求头(Request Header) 请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。 Accept:image/gif.image/jpeg./Accept-Language:zh-cnConnection:Keep-AliveHost:localhostUser-Agent:Mozila/4.0(compatible:MSIE5.01:Windows NT5.0)Accept-Encoding:gzip,deflate. （3）请求正文 &nbsp;&nbsp;请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。请求正文中可以包含客户提交的查询字符串信息： username=jinqiao&amp;password=1234 知识扩展：1）TCP三次握手 &nbsp;&nbsp;第一次握手：客户端A将标志位SYN置为1,随机产生一个值为seq=J（J的取值范围为=1234567）的数据包到服务器，客户端A进入SYN_SENT状态，等待服务端B确认； &nbsp;&nbsp;第二次握手：服务端B收到数据包后由标志位SYN=1知道客户端A请求建立连接，服务端B将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给客户端A以确认连接请求，服务端B进入SYN_RCVD状态。 &nbsp;&nbsp;第三次握手：客户端A收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给服务端B，服务端B检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，客户端A和服务端B进入ESTABLISHED状态，完成三次握手，随后客户端A与服务端B之间可以开始传输数据了。 如图所示： 2）为什需要三次握手？ &nbsp;&nbsp;《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误” &nbsp;&nbsp;书中的例子是这样的，“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接 &nbsp;&nbsp;假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”。主要目的防止server端一直等待，浪费资源。 3）TCP四次挥手 &nbsp;&nbsp;第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。 &nbsp;&nbsp;第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。 &nbsp;&nbsp;第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。 &nbsp;&nbsp;第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。 4）为什么建立连接是三次握手，而关闭连接却是四次挥手呢？ &nbsp;&nbsp;这是因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。 4、服务器的永久重定向响应 &nbsp;&nbsp;服务器给浏览器响应一个301永久重定向响应，这样浏览器就会访问http://www.google.com/ 而非http://google.com/。 &nbsp;&nbsp;为什么服务器一定要重定向而不是直接发送用户想看的网页内容呢？其中一个原因跟搜索引擎排名有关。如果一个页面有两个地址，就像http://www.yy.com/和http://yy.com/，搜索引擎会认为它们是两个网站，结果造成每个搜索链接都减少从而降低排名。而搜索引擎知道301永久重定向是什么意思，这样就会把访问带www的和不带www的地址归到同一个网站排名下。还有就是用不同的地址会造成缓存友好性变差，当一个页面有好几个名字时，它可能会在缓存里出现好几次。 扩展知识1）301和302的区别。 &nbsp;&nbsp;301和302状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址，这个地址可以从响应的Location首部中获取（用户看到的效果就是他输入的地址A瞬间变成了另一个地址B）——这是它们的共同点。 &nbsp;&nbsp;他们的不同在于。301表示旧地址A的资源已经被永久地移除了（这个资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址； &nbsp;&nbsp;302表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，搜索引擎会抓取新的内容而保存旧的网址。 SEO302好于301 2）重定向原因： （1）网站调整（如改变网页目录结构）；（2）网页被移到一个新地址；（3）网页扩展名改变(如应用需要把.php改成.Html或.shtml)。 &nbsp;&nbsp;这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个404页面错误信息，访问流量白白丧失；再者某些注册了多个域名的网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。 3）什么时候进行301或者302跳转呢？ &nbsp;&nbsp;当一个网站或者网页24—48小时内临时移动到一个新的位置，这时候就要进行302跳转，而使用301跳转的场景就是之前的网站因为某种原因需要移除掉，然后要到新的地址访问，是永久性的。清晰明确而言：使用301跳转的大概场景如下： 1、域名到期不想续费（或者发现了更适合网站的域名），想换个域名。2、在搜索引擎的搜索结果中出现了不带www的域名，而带www的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个。3、空间服务器不稳定，换空间的时候。 5、浏览器跟踪重定向地址 &nbsp;&nbsp;现在浏览器知道了 &quot;http://www.google.com/&quot;才是要访问的正确地址，所以它会发送另一个http请求。这里没有啥好说的 6、服务器处理请求 &nbsp;&nbsp;经过前面的重重步骤，我们终于将我们的http请求发送到了服务器这里，其实前面的重定向已经是到达服务器了，那么，服务器是如何处理我们的请求的呢？ &nbsp;&nbsp;后端从在固定的端口接收到TCP报文开始，它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。 &nbsp;&nbsp;一些大一点的网站会将你的请求到反向代理服务器中，因为当网站访问量非常大，网站越来越慢，一台服务器已经不够用了。于是将同一个应用部署在多台服务器上，将大量用户的请求分配给多台机器处理。此时，客户端不是直接通过HTTP协议访问某网站应用服务器，而是先请求到Nginx，Nginx再请求应用服务器，然后将结果返回给客户端，这里Nginx的作用是反向代理服务器。同时也带来了一个好处，其中一台服务器万一挂了，只要还有其他服务器正常运行，就不会影响用户使用。 如图所示： &nbsp;&nbsp;通过Nginx的反向代理，我们到达了web服务器，服务端脚本处理我们的请求，访问我们的数据库，获取需要获取的内容等等，当然，这个过程涉及很多后端脚本的复杂操作。由于对这一块不熟，所以这一块只能介绍这么多了。 扩展阅读：1）什么是反向代理？ &nbsp;&nbsp;客户端本来可以直接通过HTTP协议访问某网站应用服务器，网站管理员可以在中间加上一个Nginx，客户端请求Nginx，Nginx请求应用服务器，然后将结果返回给客户端，此时Nginx就是反向代理服务器。 7、服务器返回一个 HTTP 响应 &nbsp;&nbsp;经过前面的6个步骤，服务器收到了我们的请求，也处理我们的请求，到这一步，它会把它的处理结果返回，也就是返回一个HTPP响应。 HTTP响应与HTTP请求相似，HTTP响应也由3个部分构成，分别是： 状态行 响应头(Response Header) 响应正文 HTTP/1.1 200 OKDate: Sat, 31 Dec 2005 23:59:59 GMTContent-Type: text/html;charset=ISO-8859-1 Content- Length: 122＜html＞＜head＞＜title＞http＜/title＞＜/head＞＜body＞＜!– body goes here –＞＜/body＞＜/html＞ 状态行：&nbsp;&nbsp;状态行由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。 格式: HTTP-Version Status-Code Reason-Phrase CRLF 例如: HTTP/1.1 200 OK \\r\\n – 协议版本：是用http1.0还是其他版本 – 状态描述：状态描述给出了关于状态代码的简短的文字描述。比如状态代码为200时的描述为 ok – 状态代码：状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。如下 1xx：信息性状态码，表示服务器已接收了客户端请求，客户端可继续发送请求。 100 Continue 101 Switching Protocols 2xx：成功状态码，表示服务器已成功接收到请求并进行处理。200 OK 表示客户端请求成功 204 No Content 成功，但不返回任何实体的主体部分 206 Partial Content 成功执行了一个范围（Range）请求 3xx：重定向状态码，表示服务器要求客户端重定向。 301 Moved Permanently 永久性重定向，响应报文的Location首部应该有该资源的新URL 302 Found 临时性重定向，响应报文的Location首部给出的URL用来临时定位资源 303 See Other 请求的资源存在着另一个URI，客户端应使用GET方法定向获取请求的资源 304 Not Modified 服务器内容没有更新，可以直接读取浏览器缓存 307 Temporary Redirect 临时重定向。与302 Found含义一样。302禁止POST变换为GET，但实际使用时并不一定，307则更多浏览器可能会遵循这一标准，但也依赖于浏览器具体实现 4xx：客户端错误状态码，表示客户端的请求有非法内容。 400 Bad Request 表示客户端请求有语法错误，不能被服务器所理解 401 Unauthonzed 表示请求未经授权，该状态代码必须与 WWW-Authenticate 报头域一起使用 403 Forbidden 表示服务器收到请求，但是拒绝提供服务，通常会在响应正文中给出不提供服务的原因 404 Not Found 请求的资源不存在，例如，输入了错误的URL 5xx：服务器错误状态码，表示服务器未能正常处理客户端的请求而出现意外错误。 500 Internel Server Error 表示服务器发生不可预期的错误，导致无法完成客户端的请求 503 Service Unavailable 表示服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常 响应头：响应头部：由关键字/值对组成，每行一对，关键字和值用英文冒号”:”分隔，典型的响应头有： 响应正文&nbsp;&nbsp;包含着我们需要的一些具体信息，比如cookie，html,image，后端返回的请求数据等等。这里需要注意，响应正文和响应头之间有一行空格，表示响应头的信息到空格为止，下图是fiddler抓到的请求正文，红色框中的：响应正文： 8、浏览器显示 HTML &nbsp;&nbsp;在浏览器没有完整接受全部HTML文档时，它就已经开始显示这个页面了，浏览器是如何把页面呈现在屏幕上的呢？不同浏览器可能解析的过程不太一样，这里我们只介绍webkit的渲染过程，下图对应的就是WebKit渲染的过程，这个过程包括： &nbsp;&nbsp;解析html以构建dom树 -&gt; 构建render树 -&gt; 布局render树 -&gt; 绘制render树 &nbsp;&nbsp;浏览器在解析html文件时，会”自上而下“加载，并在加载过程中进行解析渲染。在解析过程中，如果遇到请求外部资源时，如图片、外链的CSS、iconfont等，请求过程是异步的，并不会影响html文档进行加载。 &nbsp;&nbsp;解析过程中，浏览器首先会解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。 &nbsp;&nbsp;DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。 &nbsp;&nbsp;页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。 &nbsp;&nbsp;当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。因为JS有可能会修改DOM，最为经典的document.write，这意味着，在JS执行完成前，后续所有资源的下载可能是没有必要的，这是js阻塞后续资源下载的根本原因。所以我明平时的代码中，js是放在html文档末尾的。 JS的解析是由浏览器中的JS解析引擎完成的，比如谷歌的是V8。JS是单线程运行，也就是说，在同一个时间内只能做一件事，所有的任务都需要排队，前一个任务结束，后一个任务才能开始。但是又存在某些任务比较耗时，如IO读写等，所以需要一种机制可以先执行排在后面的任务，这就是：同步任务(synchronous)和异步任务(asynchronous)。 &nbsp;&nbsp;JS的执行机制就可以看做是一个主线程加上一个任务队列(task queue)。同步任务就是放在主线程上执行的任务，异步任务是放在任务队列中的任务。所有的同步任务在主线程上执行，形成一个执行栈;异步任务有了运行结果就会在任务队列中放置一个事件；脚本运行时先依次运行执行栈，然后会从任务队列里提取事件，运行任务队列中的任务，这个过程是不断重复的，所以又叫做事件循环(Event loop)。具体的过程可以看我这篇文章：点击这里 9、浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等） &nbsp;&nbsp;其实这个步骤可以并列在步骤8中，在浏览器显示HTML时，它会注意到需要获取其他地址内容的标签。这时，浏览器会发送一个获取请求来重新获得这些文件。比如我要获取外图片，CSS，JS文件等，类似于下面的链接： 图片：http://static.ak.fbcdn.net/rsrc.php/z12E0/hash/8q2anwu7.gif CSS式样表：http://static.ak.fbcdn.net/rsrc.php/z448Z/hash/2plh8s4n.css JavaScript 文件：http://static.ak.fbcdn.net/rsrc.php/zEMOA/hash/c8yzb6ub.js &nbsp;&nbsp;这些地址都要经历一个和HTML读取类似的过程。所以浏览器会在DNS中查找这些域名，发送请求，重定向等等… &nbsp;&nbsp;不像动态页面，静态文件会允许浏览器对其进行缓存。有的文件可能会不需要与服务器通讯，而从缓存中直接读取，或者可以放到CDN中 ————分割线———— &nbsp;&nbsp;至此，从输入url到页面展示的过程终于整理完了。本文前前后后整理了差不多一个星期，当然，网上有很多文章的顺序可能跟本文不太一样，也是可以的。 &nbsp;&nbsp;如今已离开呆了一年的大YY，进入了另一家公司，有很多东西在后面等着学习，有点小压力的同时也有很强烈的兴奋，哈哈。愿你在金三银四里找到满意的工作，干巴爹。 当然，文笔有限，有误之处，欢迎指出，本文参考了很多的文章，不过很多文章的链接不记得了，所以只列出了下面三个参考链接。 参考文献：https://segmentfault.com/a/1190000006879700http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/http://zrj.me/archives/589","tags":[{"name":"浏览器","slug":"浏览器","permalink":"xumenghao.top/tags/浏览器/"},{"name":"前端","slug":"前端","permalink":"xumenghao.top/tags/前端/"}]}]