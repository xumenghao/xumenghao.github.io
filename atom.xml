<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>James Xu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="xumenghao.top/"/>
  <updated>2018-04-19T00:47:26.265Z</updated>
  <id>xumenghao.top/</id>
  
  <author>
    <name>James Xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 骚操作</title>
    <link href="xumenghao.top//posts/4a17b210/"/>
    <id>xumenghao.top//posts/4a17b210/</id>
    <published>2018-04-18T08:46:59.955Z</published>
    <updated>2018-04-19T00:47:26.265Z</updated>
    
    <content type="html"><![CDATA[<p>我没房没车没钱，但是我骚啊！！！</p><a id="more"></a><p><code>James Xu - 中南海保安发来报道</code></p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><hr><p>如有错误，欢迎批评指正！  </p><p>技术无极限，唯一的限制是你的想象力！  </p><p>在JavaScript世界中，有些操作会让你无法理解，但是却无比优雅。比如下面这些：  </p><p><img src="https://user-gold-cdn.xitu.io/2017/10/3/0b17e3e7381e0e2076f9509eebf18b0a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><h4 id="5种方式实现值交换"><a href="#5种方式实现值交换" class="headerlink" title="5种方式实现值交换"></a>5种方式实现值交换</h4><hr><p>下面几种方式都行</p><pre><code>1. var temp = a; a = b; b = temp; (传统，但需要借助临时变量)2. a ^= b; b ^= a; a ^= b; (需要两个整数)3. b = [a, a = b][0] (借助数组)4. [a, b] = [b, a]; (ES6，解构赋值)5. a = a + b; b = a - b; a = a - b; (小学奥赛题)</code></pre><h4 id="去掉小数部分"><a href="#去掉小数部分" class="headerlink" title="去掉小数部分"></a>去掉小数部分</h4><hr><p>下面几种方式都行</p><pre><code>parseInt(num)~~numnum &gt;&gt; 0num | 0</code></pre><h4 id="判断-x-是否是整数"><a href="#判断-x-是否是整数" class="headerlink" title="判断 x 是否是整数"></a>判断 x 是否是整数</h4><hr><p>下面几种方式都行</p><pre><code>function isInt(x) {    return (x ^ 0) === x}// return Math.round(x) === x// return (typeof x === &apos;number&apos;) &amp;&amp; (x % 1 === 0)// ES6 -&gt; Number.isInteger()</code></pre><h4 id="递归求阶乘"><a href="#递归求阶乘" class="headerlink" title="递归求阶乘"></a>递归求阶乘</h4><hr><pre><code>function factorial(n) {    return (n &gt; 1) ? n * f(n - 1) : n}</code></pre><h4 id="判断符号是否相同"><a href="#判断符号是否相同" class="headerlink" title="判断符号是否相同"></a>判断符号是否相同</h4><hr><pre><code>function sameSign(a, b) {      return (a ^ b) &gt;= 0}</code></pre><h4 id="克隆数组"><a href="#克隆数组" class="headerlink" title="克隆数组"></a>克隆数组</h4><hr><pre><code>arr.slice(0)</code></pre><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><pre><code>// ES6Array.from(new Set(arr))// ES5arr.filter(function(ele, index, array){    return index===array.indexOf(ele)})</code></pre><h4 id="数组最大值"><a href="#数组最大值" class="headerlink" title="数组最大值"></a>数组最大值</h4><hr><pre><code>function maxArr(arr) {    return Math.max.apply(null, arr)}</code></pre><h4 id="数组最小值"><a href="#数组最小值" class="headerlink" title="数组最小值"></a>数组最小值</h4><hr><pre><code>function minArr(arr) {    return Math.min.apply(null, arr)}</code></pre><h4 id="随机获取数组的一个成员"><a href="#随机获取数组的一个成员" class="headerlink" title="随机获取数组的一个成员"></a>随机获取数组的一个成员</h4><hr><pre><code>function randomOne(arr) {    return arr[Math.floor(Math.random() * arr.length)]}</code></pre><h4 id="产生随机颜色"><a href="#产生随机颜色" class="headerlink" title="产生随机颜色"></a>产生随机颜色</h4><hr><pre><code>function getRandomColor() {    return `#${Math.random().toString(16).substr(2, 6)}`}</code></pre><h4 id="随机生成指定长度的字符串"><a href="#随机生成指定长度的字符串" class="headerlink" title="随机生成指定长度的字符串"></a>随机生成指定长度的字符串</h4><hr><pre><code>function randomStr(n) {    let standard = &apos;abcdefghijklmnopqrstuvwxyz9876543210&apos;    let len = standard.length    let result = &apos;&apos;    for (let i = 0; i &lt; n; i++) {        result += standard.charAt(Math.floor(Math.random() * len))    }    return result}</code></pre><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><hr><pre><code>JSON.parse(JSON.stringify(obj))</code></pre><h4 id="打印出来看看"><a href="#打印出来看看" class="headerlink" title="打印出来看看"></a>打印出来看看</h4><hr><pre><code>console.log(([][[]] + [])[+!![]] + ([] + {})[!+[] + !![]])console.log((!(~+[]) + {})[--[~+&apos;&apos;][+[]] * [~+[]] + ~~!+[]] + ({} + [])[[~!+[]] * ~+[]])</code></pre><h4 id="美化console"><a href="#美化console" class="headerlink" title="美化console"></a>美化console</h4><hr><pre><code>console.info(&quot;%c哈哈&quot;, &quot;color: #3190e8; font-size: 30px; font-family: sans-serif&quot;);</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://user-gold-cdn.xitu.io/2017/10/3/4c71ea3419145e520dd88485962f18df?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我没房没车没钱，但是我骚啊！！！&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="xumenghao.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="xumenghao.top/tags/JavaScript/"/>
    
      <category term="HTML" scheme="xumenghao.top/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>赌王儿子何猷君：如何拥有自己的“开挂”人生！</title>
    <link href="xumenghao.top//posts/4a17b207/"/>
    <id>xumenghao.top//posts/4a17b207/</id>
    <published>2018-04-11T03:52:17.020Z</published>
    <updated>2018-04-11T04:31:26.881Z</updated>
    
    <content type="html"><![CDATA[<p><em>“投胎是个技术活”，但偏偏就有人不仅会投胎，含着金汤匙生在了终点线上，还顺便在终点线上创造了一堆记录，何猷君就绝对是这样一个存在。</em></p><a id="more"></a><p><code>James Xu - 中南海保安发来报道</code></p><p>大家看了前两天开播的《最强大脑》了吗？我看完之后，已经深深被何猷君吸引了。</p><p>不认识他？澳门赌王何鸿燊你们认识了吧，没错，他就是何鸿燊的儿子。</p><p>即使出生在终点线，拥有大多数人奋斗几辈子都难以企及的财富，但也绝不坐享其成，被称为“明明可以靠家世靠颜值，可他偏偏就要靠智商，靠才华，关键还能秒杀全场。”</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://imgsrc.baidu.com/baike/pic/item/0dd7912397dda1449f02765cb9b7d0a20df486d0.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在最新的《最强大脑》第一期中，凭借实力拿下两个环节第一名，直通30强。不过这点小成绩对他来说可能根本不算什么，因为人家从小就是数学天才啊！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://imgsrc.baidu.com/baike/pic/item/d62a6059252dd42a30021b45083b5bb5c8eab8d0.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>小学时，他连续两年在“世界数学测试”邀请赛中获奖，爸爸何鸿燊亲自为他颁奖。</p><p>18岁那年同时拿到牛津大学与麻省理工学院的录取通知。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://imgsrc.baidu.com/baike/pic/item/960a304e251f95caac5f9758c2177f3e660952b1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>后来他选择了进入麻省理工学院就读，只花了3年的时间就完成了4年的学业。2016年3月，何猷君继续考取MIT的金融硕士，是史上最年轻的学生，那年他才21岁。</p><p>他曾在网上晒过一份本科成绩单，科科接近满分。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://imgsrc.baidu.com/baike/pic/item/cf1b9d16fdfaaf51a5b59b51875494eef11f7a8d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>毕业后也没有像哥哥姐姐一样加入家族事业，不仅拿到了世界最大金融公司的Offer、还创办了一个慈善机构。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://imgsrc.baidu.com/baike/pic/item/5d6034a85edf8db1af78668a0223dd54574e748d.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>除了读书，何猷君会的事还多着呢。</p><p>他打网球很有天分，在法国公开赛上获过奖杯，甚至曾经考虑过走职业网球选手的路。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://imgsrc.baidu.com/baike/pic/item/4ec2d5628535e5dda94abf317dc6a7efcf1b62fd.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>音乐方面也难不倒他，钢琴吉他什么的也是上手就来。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://imgsrc.baidu.com/baike/pic/item/29381f30e924b89948e17cd665061d950b7bf67b.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>不仅出得了厅堂，而且下得了厨房！对亲朋好友都好得不得了，经常给朋友们亲自下厨，来一场惊喜的爱心晚餐。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://imgsrc.baidu.com/baike/pic/item/faf2b2119313b07ee6c94ae607d7912396dd8ce3.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在大家眼中，何猷君应该开着名车，穿着名牌，横跨整个城市去高谈阔论，可他的日常却是乘地铁上班。他说，“不会迟到，很正常”</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://imgsrc.baidu.com/baike/pic/item/5243fbf2b21193139b37e55e6e380cd790238de3.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>除此之外，何猷君还是个超级爱家人的大暖男。对自己的妹妹何超欣超级宠爱，简直就是“妹控”。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://imgsrc.baidu.com/baike/pic/item/5d6034a85edf8db1af48668a0223dd54574e74fd.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>他和妈妈梁安琪关系也是非常好，在麻省提前一年毕业的事，他一直没有告诉妈妈，直到毕业前几星期才订票叫妈妈过来参加毕业典礼。</p><p>当被问到为什么要这么努力，何猷君给出的理由也很硬气——“因为我想让世界知道，我可以用我的双手达到一个正常麻省理工高材生也很难达到的目标，因为我就是我。”</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://imgsrc.baidu.com/baike/pic/item/b3b7d0a20cf431adf3d959d74036acaf2fdd98d0.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>何猷君这种发自内心觉得我生下来就是要努力比别人强大的想法和觉悟，其实并不是每个人都能有的——上一辈积累的财富给了他们接受优质教育，跻身精英阶层的机会。但说到底，拥有精英的想法，最终靠的不是财富，而是教育。</p><p>没有赌王的丰厚家底，平凡的我们又该如何像何猷君那样拥有自己的“开挂”人生呢？</p><p><strong>好好读书</strong></p><p>赌王女儿何超莲说，“爸爸对我们只有一个要求，就是好好读书。”</p><p>赌王告诉子女的四字真言，实际上源自他真实的人生启示。何鸿燊出生于富贵的家庭，小时候衣食无忧，却不爱读书，用纨绔子弟来形容也不为过。但由于父亲投资失败家道中落，何鸿燊尝尽了人世冷暖。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://imgsrc.baidu.com/baike/pic/item/d53f8794a4c27d1e44183f2a10d5ad6eddc43825.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>觉醒后的赌王发奋读书，以优秀的成绩考入香港大学，并获得奖学金。并用自己的努力重新建立起庞大的商业帝国。在他心中，即使现在的家境优渥，一切皆会有变数，唯有凭借自己的实力，才能应对未知的变化。</p><p><strong>多勤奋</strong></p><p>赌王说，我没有什么秘诀，一是做事必须勤奋；二是锲而不舍，有始有终。勤劳努力，战胜困难，才是最大的资本。没有到收工钟响已经洗干净手的人，一定是老板最看不起的人，也是人生不会成功的人。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://imgsrc.baidu.com/baike/pic/item/0823dd54564e9258bb529c009782d158cdbf4efd.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>有父亲这样的榜样，子女也耳濡目染。何猷君哪怕是个富二代，也会努力拼搏创业。坐经济舱、挤地铁、任何工作都亲历亲为，找项目找办公室，和小伙伴挤在几平米的小屋里。</p><p><strong>自己的事情自己解决</strong></p><p>何猷君曾发微博称近日与好友坐经济舱出行，因护照丢失无法入境，他多次求助航空公司，但对方爱答不理，不予配合寻找，导致他和朋友在机场等了一夜。直到管理人员认出他的身份，态度大变，10分钟之內找到护照。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://imgsrc.baidu.com/baike/pic/item/4a36acaf2edda3cc4290a2ce0ae93901203f92e3.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>事情一发生，网友们都称赞他没有搬出自己的身份，也没有求助妈妈要求特殊待遇。而妈妈梁安琪则说，这个儿子从小到大喜欢自己解决问题，如果不是媒体告诉我，我完全不知道。</p><p>从而可以看出，虽然何猷君在家里什么都不缺，但他丝毫没有“一切人都要为我服务”的想法。</p><p>你以为别人头顶光环，不需要努力就能得到想要的一切，但真正可怕的还是，比你优秀的人偏偏还比你努力千百倍。我们又有什么理由不努力呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;“投胎是个技术活”，但偏偏就有人不仅会投胎，含着金汤匙生在了终点线上，还顺便在终点线上创造了一堆记录，何猷君就绝对是这样一个存在。&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="人物" scheme="xumenghao.top/categories/%E4%BA%BA%E7%89%A9/"/>
    
    
      <category term="话题" scheme="xumenghao.top/tags/%E8%AF%9D%E9%A2%98/"/>
    
      <category term="人物" scheme="xumenghao.top/tags/%E4%BA%BA%E7%89%A9/"/>
    
  </entry>
  
  <entry>
    <title>404 NOT FOUND!</title>
    <link href="xumenghao.top//posts/4a17b205/"/>
    <id>xumenghao.top//posts/4a17b205/</id>
    <published>2018-04-10T07:47:10.312Z</published>
    <updated>2018-04-10T08:01:17.951Z</updated>
    
    <content type="html"><![CDATA[<p>抱歉，沒有找到您需要的文章！！</p><a id="more"></a><p><code>James Xu - 中南海保安发来报道</code></p><blockquote><p>404页面是网站必备的一个页面，它承载着用户体验与SEO优化的重任。404页面通常为用户访问了网站上不存在或已删除的页面，服务器返回的404错误。如果站长没有设置404页面，会出现死链接，蜘蛛爬行这类网址时，不利于搜索引擎收录。  </p></blockquote><h5 id="404-Not-Found-由来"><a href="#404-Not-Found-由来" class="headerlink" title="404 Not Found 由来"></a>404 Not Found 由来</h5><hr><p>据说在第三次科技革命之前，互联网的形态就是一个大型的中央数据库，这个数据库就设置在404房间里面。那时候所有的请求都是由人工手动完成的，如果在数据库中没有找到请求者所需要的文件，或者由于请求者写错了文件编号，用户就会得到一个返回信息：room 404 : file not found。后来互联网兴起后，人们也就习惯了用404作为服务器未找到文件的错误代码了。当然实际考证传说中的room 404是不存在的。  </p><h5 id="设置404页面的两大好处"><a href="#设置404页面的两大好处" class="headerlink" title="设置404页面的两大好处"></a>设置404页面的两大好处</h5><hr><ul><li>引导用户不要关闭网站，增强用户体验。</li><li>防止网站出现死链接。</li></ul><p><a href="https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin" target="_blank" rel="noopener">查看更多 HTTP状态码介绍</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.runoob.com/wp-content/themes/runoob/assets/img/404.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;抱歉，沒有找到您需要的文章！！&lt;/p&gt;
    
    </summary>
    
      <category term="浏览器" scheme="xumenghao.top/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="HTTP" scheme="xumenghao.top/tags/HTTP/"/>
    
      <category term="浏览器" scheme="xumenghao.top/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>饭后嚼两粒木糖醇，有用吗？</title>
    <link href="xumenghao.top//posts/4a17b204/"/>
    <id>xumenghao.top//posts/4a17b204/</id>
    <published>2018-04-10T02:25:41.943Z</published>
    <updated>2018-04-10T05:35:47.035Z</updated>
    
    <content type="html"><![CDATA[<p>嚼口香糖太久可能把脸变大？</p><a id="more"></a><p><code>James Xu - 中南海保安发来报道</code></p><blockquote><p>嚼木糖醇可以替代刷牙吗？</p></blockquote><p>1.木糖醇是蔗糖的一种替代品，可以在吃甜食的同时减少热量的摄入。但是，到目前为止，并没有研究表明木糖醇有预防龋齿的效果。<br>2.相比糖果，木糖醇口香糖对口腔有一些好处，但不能替代刷牙。另外，咀嚼口香糖的时间过长可能会造成咬肌太过发达，使脸变大。  </p><blockquote><p>嚼木糖醇可以预防龋齿吗？</p></blockquote><p>1.大家可能都看过口香糖的广告。吃过东西以后，由于细菌产酸，口腔内的 pH 值会快速下降，口腔环境趋于酸性，久而久之会导致龋齿。<br>2.吃上两粒口香糖，pH值迅速回升，口腔环境变为中性或者弱碱性，可以很好地预防龋齿。<br>3.然后出现画外音：“这个糖不是一般的糖，是木糖醇，木糖醇是好东西，能预防龋齿的。”真的是这样吗？  </p><h5 id="一、木糖醇是什么？"><a href="#一、木糖醇是什么？" class="headerlink" title="一、木糖醇是什么？"></a>一、木糖醇是什么？</h5><p>木糖醇，是蔗糖的一种替代品。<br>为什么要寻找蔗糖的替代品呢？<br>近些年大家逐渐意识到了：糖，不是好东西，吃多了会产生各种问题：比如热量过高导致肥胖、血糖太高诱发糖尿病、糖被口腔里的细菌分解后产生酸性物质腐蚀牙齿等。<br>然而，我们的身体对糖的渴望是写在基因里的：糖是有甜味的，能够提供能量，自然界中的纯糖极其少见，一旦糖能够被无限量地供应，很多人都会沉迷在<strong>“糖瘾”</strong>里，对健康有极大损害。    </p><p><img src="http://inews.gtimg.com/newsapp_bt/0/2788797892/641" alt=""></p><p>所以，食品界一直在寻找糖的替代品，一方面满足我们的口腹之欲，另一方面减少甚至消除对健康的危害，最好再有点好处。<br>木糖醇就是在这一背景下被发现的，它和蔗糖差不多甜，但<strong>热量只有蔗糖的60%左右</strong>。而且教科书上说，细菌吃了木糖醇以后并<strong>不会产酸</strong>，也就是说，它不会对牙齿有什么危害。如果细菌吃多了木糖醇，还会撑死，简直就是天大的好处了！在这样的概念之下，木糖醇很快被添加到了口香糖中，要扭转大众“吃糖会坏牙”的观念。  </p><h5 id="二、每天嚼一嚼，蛀牙远离我？"><a href="#二、每天嚼一嚼，蛀牙远离我？" class="headerlink" title="二、每天嚼一嚼，蛀牙远离我？"></a>二、每天嚼一嚼，蛀牙远离我？</h5><p>但是，我们每天嚼嚼口香糖就可以彻底告别虫牙了吗？<br>查阅了相关研究后，我发现它并没有那么“美好”。<br>木糖醇不产酸这个事是真的，热量相对较低也是真的，但它的预防龋齿作用受到了不少学者的质疑：  </p><ol><li>一般认为，要是想通过吃木糖醇预防龋齿，则每天需要吃6克以上的木糖醇，但这不具备实际可操作性，木糖醇口香糖一般每颗含木糖醇0.35g左右。这样算来，每次嚼3粒，每天嚼5次，可能才能达到有效剂量。  </li><li><strong>不能确定木糖醇能否杀细菌</strong>。随着研究的深入，关于木糖醇是否真的可以杀死口腔内的致病菌，是有争议的。龋病是个慢性病，想查看木糖醇预防龋齿的临床实验效果，需要观察患者几年以上的时间才有意义，而这种<strong>长期临床实验受多种因素的影响和制约</strong>，想要得出令人信服的结果是非常困难的。  </li></ol><p>美国儿童牙科学会2015年专门为木糖醇发了一份指南，结合现状它的态度是：  </p><ol><li>支持使用木糖醇替代蔗糖；  </li><li>木糖醇的防龋或者抑菌效果，有待进一步证实；  </li><li>关于该吃多少木糖醇、一天吃几次才是理想的防龋剂量，也需要更多的研究。  </li></ol><h5 id="三、吃木糖醇还是有好处的"><a href="#三、吃木糖醇还是有好处的" class="headerlink" title="三、吃木糖醇还是有好处的"></a>三、吃木糖醇还是有好处的</h5><p>虽然能不能预防龋齿还有待进一步研究，但是吃木糖醇还是有不少好处：  </p><ol><li>木糖醇是好东西，特别是对于爱坏牙又爱吃糖的小朋友，如果非要吃糖，那么吃点木糖醇糖果是没有害处的。  </li><li>在咀嚼口香糖过程中，会促进唾液的分泌，这对于口腔是有好处的。    </li><li>胶状的口香糖还可以粘附牙齿的上的食物残渣，对于牙齿也是有一定清洁作用。  </li><li>吃木糖醇口香糖，口腔里的 pH值并没有因为糖的存在而降低，不会对牙齿有腐蚀。<br>但是，这些作用并没有那么神奇，我觉得从效率和效果上甚至还不如清水漱口，还不足以宣称可以“预防龋齿”，该刷牙还是要好好刷牙，不能用木糖醇口香糖替代刷牙。  </li></ol><p><img src="http://inews.gtimg.com/newsapp_bt/0/2788802065/641" alt=""></p><p>最后，还有一个小提醒，嚼口香糖时间不能太长，有实验表明，木糖醇在口腔里的浓度峰值一般都出现在5分钟以内，再嚼也就没什么太多作用了。而且长时间咀嚼会加重咬合肌肉以及颞下颌关节的负担，<strong>脸会由于肌肉发达而变大</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;嚼口香糖太久可能把脸变大？&lt;/p&gt;
    
    </summary>
    
      <category term="话题" scheme="xumenghao.top/categories/%E8%AF%9D%E9%A2%98/"/>
    
    
      <category term="话题" scheme="xumenghao.top/tags/%E8%AF%9D%E9%A2%98/"/>
    
      <category term="健康" scheme="xumenghao.top/tags/%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
  <entry>
    <title>烟草行业的暴利</title>
    <link href="xumenghao.top//posts/4a17b203/"/>
    <id>xumenghao.top//posts/4a17b203/</id>
    <published>2018-04-03T01:43:52.873Z</published>
    <updated>2018-04-10T05:40:27.679Z</updated>
    
    <content type="html"><![CDATA[<p>65元中华烟成本不到3元</p><a id="more"></a><p><code>James Xu - 中南海保安发来报道</code></p><p>&nbsp;&nbsp;都知道烟草行业暴利，但暴利到何种程度大家又都说不清楚，市面上65元一包的软中华成本又是多少？本文揭露了烟草行业的种种暴利，从成本到税收，全部无所遁形。    </p><p>&nbsp;&nbsp;我国是世界上烟草生产和消费最大的国家，吸烟率在38％以上。有资料统计，世界上的吸烟人数正在下降，而与此同时，中国的烟民队伍却在不断扩大：我国现有烟民3.5亿，比美国的人口总数还多。  </p><p>&nbsp;&nbsp;中国已经成为名副其实的“第一吸烟大国”。  </p><p><img src="http://img1.gtimg.com/finance/pics/hv1/106/137/2269/147576766.jpg" alt="我国现有烟民3.5亿"></p><h5 id="几块钱的烟和几百块的烟-成本并不大"><a href="#几块钱的烟和几百块的烟-成本并不大" class="headerlink" title="几块钱的烟和几百块的烟 成本并不大"></a>几块钱的烟和几百块的烟 成本并不大</h5><p>&nbsp;&nbsp;尽管国家在去年出台了“史上最严”禁烟令，但依然不妨碍中国烟民的与日俱增。  </p><p>&nbsp;&nbsp;而这也与中国源远流长的“烟文化”息息相关。在中国特定的社会环境下，烟不仅是提神解闷的“尤物”，更是待客访友的“信使”。  </p><p>&nbsp;&nbsp;中国人讲面子、讲排场，吸烟不仅仅是一种消遣方式，也是一种身份的象征。找个关系、谈个生意，不送几条高档香烟是绝对不行的。  </p><p>&nbsp;&nbsp;我们知道，市面上的香烟价格有几块钱到上百块不等，那么便宜的几块钱的香烟和上百块钱的香烟为什么中间的差价这么大呢？  </p><p>&nbsp;&nbsp;就拿65元一包的软中华来说，这样的价格对于普通白领来说并不便宜，这寥寥烟草，为何能卖到如此天价呢？  </p><p><img src="http://img1.gtimg.com/finance/pics/hv1/140/137/2269/147576800.jpg" alt="软中华成本不过3元"></p><p>&nbsp;&nbsp;先来看看制造香烟的成本费用。  </p><p>&nbsp;&nbsp;其实，无论高档烟还是低档烟，它们的原料都大同小异，烟叶原料等级虽有不同，但价格差不了太多。从收购商到种植者每公斤大约是二十多块钱，甚至有些更便宜。  </p><p>&nbsp;&nbsp;唯一的差异可能在制作工序上。从复烤、筛选到剪丝、成型，一直到最后包装成品，不同高档烟一般会选烟的中部作为烟草，而香精的添加量会多些，用最好的烟嘴，采用高浸透滤棒，再加上高端的包装。  </p><p>&nbsp;&nbsp;即使如此，一包65元的中华烟成本也不会超过3元，而那些上百块钱的香烟成本也不会超过8块钱。烟草行业的利润可想而知。  </p><h5 id="烟草行业的暴利"><a href="#烟草行业的暴利" class="headerlink" title="烟草行业的暴利"></a>烟草行业的暴利</h5><p>&nbsp;&nbsp;根据前瞻产业研究院发布的《2013-2017年中国烟草制品行业产销需求与投资预测分析报告》，2001-2012年，中国烟草制品行业毛利率维持在57%以上的较高水平，且呈现逐年上升的态势，到2012年行业的毛利率达到了74.06%。  </p><p><img src="http://img1.gtimg.com/finance/pics/hv1/146/137/2269/147576806.jpg" alt="2001-2012年中国烟草制品行业毛利率情况（单位：%）"></p><h5 id="74-的毛利率是一个神马概念？"><a href="#74-的毛利率是一个神马概念？" class="headerlink" title="74%的毛利率是一个神马概念？"></a>74%的毛利率是一个神马概念？</h5><p>&nbsp;&nbsp;我们不妨与盈利能力较强的上市公司对比一下。2012年同一年，第一季报上市公司的平均毛利率水平为18.18%。也就是说，烟草行业毛利率约为A股上市公司平均毛利率的4倍！</p><p>&nbsp;&nbsp;同样的投入，A股上市公司挣1块钱，烟草业却可以挣4块钱！</p><p>&nbsp;&nbsp;成本那么低，利润那么高，香烟到消费者手上变得那么贵，原因是什么？个中缘由其实也并不难猜，最关键在于烟草税。</p><h5 id="谁在“保护”烟草暴利？烟草税！"><a href="#谁在“保护”烟草暴利？烟草税！" class="headerlink" title="谁在“保护”烟草暴利？烟草税！"></a>谁在“保护”烟草暴利？烟草税！</h5><p>&nbsp;&nbsp;烟草行业的“暴利”令人咋舌，但与这个行业的“暴税”相比，又是大巫见小巫了。</p><p>&nbsp;&nbsp;众所周知，烟草税占据国家税收很大一部分，烟草行业是纳税大户；</p><p>&nbsp;&nbsp;由于中国烟民太多，国家对烟草行业一直抽重税，对于国家来说这是一笔不菲的收入。</p><p>&nbsp;&nbsp;实际上一包烟的成本，由卷烟厂代征54.5%的烟草消费税，而这些税中含有：增值税、所得税、印花税等等，再加上卷烟厂生产成本和利润，然后把烟卖给烟草专卖局，专卖局再转手卖批发给零售商，所以香烟高的价格是高在税费上。</p><p>&nbsp;&nbsp;据央广网报道，2016年烟草行业全年实现工商税利10795亿元。整个“十二五”期间，累计实现工商税利总额47680亿元，其中约87%上缴国家财政，累计上缴41323亿元！</p><h5 id="4万亿是什么概念？"><a href="#4万亿是什么概念？" class="headerlink" title="4万亿是什么概念？"></a>4万亿是什么概念？</h5><p>&nbsp;&nbsp;在2008年金融危机爆发后，我国政府曾经出台过一轮经济刺激计划，其后遗症至今仍被广为诟病，而那轮影响深远的货币投放总量也不过才4万亿。</p><p>&nbsp;&nbsp;财政部发布的2015年财政收支情况显示，当年全国一般公共预算收入152217亿元，烟草单个行业上缴的数额占财政收入的7%还多。——烟草之于政府“钱袋子”的紧密关系就非常明了了。</p><p>&nbsp;&nbsp;难怪，近年来社会上破垄断呼声颇高，连千百年来铁板一块的盐业都开始松动，但烟草垄断依然是纹丝不动。</p><p>&nbsp;&nbsp;烟草现在的平均综合税率在68%左右，这一部分被国家拿走了。</p><p>&nbsp;&nbsp;还剩下32%，零售户的利润一般要求保持在10%左右。</p><p>&nbsp;&nbsp;那还有22%，这22%的毛利听起来还不错，但这包括物流成本、仓库成本等，烟草企业最终的实际利润率并不高。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;65元中华烟成本不到3元&lt;/p&gt;
    
    </summary>
    
      <category term="话题" scheme="xumenghao.top/categories/%E8%AF%9D%E9%A2%98/"/>
    
    
      <category term="健康" scheme="xumenghao.top/tags/%E5%81%A5%E5%BA%B7/"/>
    
      <category term="烟草" scheme="xumenghao.top/tags/%E7%83%9F%E8%8D%89/"/>
    
  </entry>
  
  <entry>
    <title>手机端页面自适应解决方案—rem布局进阶版</title>
    <link href="xumenghao.top//posts/4a17b202/"/>
    <id>xumenghao.top//posts/4a17b202/</id>
    <published>2018-03-23T01:01:46.678Z</published>
    <updated>2018-04-10T02:48:10.688Z</updated>
    
    <content type="html"><![CDATA[<p>好玩的rem布局</p><a id="more"></a><p><code>James Xu - 中南海保安发来报道</code></p><blockquote><p>一年前笔者写了一篇 <a href="&quot;https://www.jianshu.com/p/b00cd3506782&quot;">《手机端页面自适应解决方案—rem布局》</a>，意外受到很多朋友的关注和喜欢。但随着时间的推移，该方案已然过时，故为大家介绍一个目前我极力推荐使用的，更加完美的方案——rem布局（进阶版）</p></blockquote><p><strong>另外：</strong></p><blockquote><ul><li>此方案仅适用于移动端web</li><li>文章底部<strong>常见问题说明第四条</strong> ，笔者已给出一个相当便捷的解决方案，欢迎留言交流。（2018/3/23）</li></ul></blockquote><p>该方案使用相当简单，把下面这段已压缩过的 <strong>原生JS</strong>（仅1kb，源码已在文章底部更新） 放到 HTML 的 head 标签中即可（注:不要手动设置viewport，该方案自动帮你设置）</p><pre><code>&lt;script&gt;!function(e){function t(a){if(i[a])return i[a].exports;var n=i[a]={exports:{},id:a,loaded:!1};return e[a].call(n.exports,n,n.exports,t),n.loaded=!0,n.exports}var i={};return t.m=e,t.c=i,t.p=&quot;&quot;,t(0)}([function(e,t){&quot;use strict&quot;;Object.defineProperty(t,&quot;__esModule&quot;,{value:!0});var i=window;t[&quot;default&quot;]=i.flex=function(normal,e,t){var a=e||100,n=t||1,r=i.document,o=navigator.userAgent,d=o.match(/Android[\S\s]+AppleWebkit\/(\d{3})/i),l=o.match(/U3\/((\d+|\.){5,})/i),c=l&amp;&amp;parseInt(l[1].split(&quot;.&quot;).join(&quot;&quot;),10)&gt;=80,p=navigator.appVersion.match(/(iphone|ipad|ipod)/gi),s=i.devicePixelRatio||1;p||d&amp;&amp;d[1]&gt;534||c||(s=1);var u=normal?1:1/s,m=r.querySelector(&apos;meta[name=&quot;viewport&quot;]&apos;);m||(m=r.createElement(&quot;meta&quot;),m.setAttribute(&quot;name&quot;,&quot;viewport&quot;),r.head.appendChild(m)),m.setAttribute(&quot;content&quot;,&quot;width=device-width,user-scalable=no,initial-scale=&quot;+u+&quot;,maximum-scale=&quot;+u+&quot;,minimum-scale=&quot;+u),r.documentElement.style.fontSize=normal?&quot;50px&quot;: a/2*s*n+&quot;px&quot;},e.exports=t[&quot;default&quot;]}]);  flex(false,100, 1);&lt;/script&gt;</code></pre><p>作者：<em>minooo</em><br>链接：<a href="https://www.jianshu.com/p/985d26b40199" target="_blank" rel="noopener">https://www.jianshu.com/p/985d26b40199</a><br>來源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h3 id="代码原理"><a href="#代码原理" class="headerlink" title="代码原理"></a>代码原理</h3><p>这是阿里团队的高清方案布局代码，所谓高清方案就是利用rem的特性（我们知道默认情况下html的1rem = 16px），根据设备屏幕的DPR（设备像素比，又称DPPX，比如dpr=2时，表示1个CSS像素由4个物理像素点组成）<strong>根据设备DPR调整页面的压缩比率（即：1/dpr），同时动态设置 html 的font-size为（50 * dpr)，进而达到高清效果</strong>。</p><h3 id="有何优势"><a href="#有何优势" class="headerlink" title="有何优势"></a>有何优势</h3><ul><li>引用简单，布局简便</li><li>根据设备屏幕的DPR,自动设置最合适的高清缩放。</li><li>保证了不同设备下视觉体验的一致性。（老方案是，屏幕越大元素越大；此方案是，屏幕越大，看的越多）</li><li>有效解决移动端真实1px问题（这里的1px 是设备屏幕上的物理像素）</li></ul><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>重要的事情说三遍！<br><strong>绝不是每个地方都要用rem，rem只适用于固定尺寸</strong>！<br><strong>绝不是每个地方都要用rem，rem只适用于固定尺寸</strong>！<br><strong>绝不是每个地方都要用rem，rem只适用于固定尺寸</strong>！<br>在相当数量的布局情境中（比如底部导航元素平分屏幕宽，大尺寸元素），你必须使用百分比或者flex才能完美布局！</p><p>看过 <a href="&quot;https://www.jianshu.com/p/b00cd3506782&quot;">‘《手机端页面自适应解决方案—rem布局》’</a>的朋友，应该对rem有所了解，这里不再赘述，<br><strong>此方案也是默认 1rem = 100px，所以你布局的时候，完全可以按照设计师给你的效果图写各种尺寸啦</strong>。<br>比如你在效果图上量取的某个按钮元素长 55px, 宽37px ，那你直接可以这样写样式：</p><pre><code>.myBtn {     width: 0.55rem;     height: 0.37rem;  }  </code></pre><h3 id="为了让朋友们更清晰感受此方案的巨大优势，下面是源码和Demo"><a href="#为了让朋友们更清晰感受此方案的巨大优势，下面是源码和Demo" class="headerlink" title="为了让朋友们更清晰感受此方案的巨大优势，下面是源码和Demo"></a>为了让朋友们更清晰感受此方案的巨大优势，下面是源码和Demo</h3><p><a href="&quot;https://link.jianshu.com/?t=https%3A%2F%2Fminooo.github.io%2FDemo%2Freact-study-step-03-demo%2Findex.html&quot;">实践应用1（请在手机端或者手机模式下浏览效果更佳！）</a></p><p><a href="&quot;https://link.jianshu.com/?t=https%3A%2F%2Fminooo.github.io%2FDemo%2Freact-study-step-04-demo%2Findex.html&quot;">实践应用2（请在手机端或者手机模式下浏览效果更佳！）</a></p><p><a href="&quot;http://m.jr.duduapp.net/&quot;">线上项目（请在手机端或者手机模式下浏览效果更佳！）</a></p><p><a href="&quot;https://codepen.io/minooo/pen/WoQjKW?editors=1100&quot;">示例源码</a></p><h3 id="常见问题说明，新手很有必要看一下（2018-3-23）"><a href="#常见问题说明，新手很有必要看一下（2018-3-23）" class="headerlink" title="常见问题说明，新手很有必要看一下（2018/3/23）"></a>常见问题说明，新手很有必要看一下（2018/3/23）</h3><blockquote><p><code>许多同学对该方案存在不少误解导致使用出现各种问题，这里统一回复下。</code></p></blockquote><p><strong>1.问：为啥手机网页效果图宽度是要640或者750的，我非得弄个666的不行咩？</strong></p><p>答：老实说当然可以，不过为了规范，640或者750是相对合适的。<br>拿Iphone 5s 举例，它的css像素宽度是320px，由于它的dpr=2，所以它的物理像素宽度为320 × 2 = 640px，这也就是为什么，你在5s上截了一张图，在电脑上打开，它的原始宽度是640px的原因。<br>那 iphone 6 的截图宽度呢？ 375 × 2 = 750<br>那 iphone 6 sp 的截图宽度呢？ 414 × 3 = 1242<br>以此类推，你现在能明白效果图为什么一般是 640 ，750 甚至是 1242 的原因了么？（真没有歧视安卓机的意思。。。）</p><p><strong>2.问：宽度用rem写的情况下， 在 iphone6 上没问题， 在 iphone5上会有横向滚动条，何解？</strong></p><p>答：假设你的效果图宽度是750，在这个效果图上可能有一个宽度为7rem（高清方案默认 1rem = 100px）的元素。我们知道，高清方案的特点就是几乎完美还原效果图，也就是说，你写了一个宽度为 7rem 的元素，那么在目前主流移动设备上都是7rem。然而，iphone 5 的宽度为640，也就是6.4rem。于是横向滚动条不可避免的出现了。<br>怎么办呢？ 这是我目前推荐的比较安全的方式：<strong>如果元素的宽度超过效果图宽度的一半（效果图宽为640或750），果断使用百分比宽度，或者flex布局</strong>。就像把等屏宽的图片宽度设为100%一样。</p><p><strong>3.问：不是 1rem = 100px吗，为什么我的代码写了一个宽度为3rem的元素，在电脑端的谷歌浏览器上宽度只有150px?</strong></p><p>答：先说高清方案代码，再次强调咱们的高清方案代码是根据设备的dpr动态设置html 的 font-size，<br>如果dpr=1(如电脑端），则html的font-size为50px，此时 1rem = 50px<br>如果dpr=2(如iphone 5 和 6），则html的font-size为100px，此时 1rem = 100px<br>如果dpr=3(如iphone 6 sp），则html的font-size为150px，此时 1rem = 150px<br>如果dpr为其他值，即便不是整数，如3.4 , 也是一样直接将dpr 乘以 50 。</p><p>再来说说效果图，一般来讲，我们的效果图宽度要么是640，要么是750，无论哪一个，它们对应设备的dpr=2，此时，1 rem = 50 × 2 = 100px。这也就是为什么高清方案默认1rem = 100px。而将1rem默认100px也是好处多多，可以帮你快速换算单位，比如在750宽度下的效果图，某元素宽度为53px，那么css宽度直接设为53/100=0.53rem了。</p><p>然而极少情况下，有设计师将效果图宽定为1242px，因为他手里只有一个iphone 6 sp (dpr = 3)，设计完效果图刚好可以在他的iphone 6 sp里查看调整。一切完毕之后，他将这个效果图交给你来切图。由于这个效果图对应设备的dpr=3，也就是1rem = 50 × 3 = 150px。所以如果你量取了一个宽度为90px的元素，它的css宽度应该为 90/150=0.6rem。由于咱们的高清方案默认1rem=100px，为了还原效果图，你需要这样换算。当然，一个技巧就是你可以直接修改咱们的高清方案的默认设置。在代码的最后 你会看到 flex(false, 100, 1) ，将其修改成flex(false, 66.66667, 1)就不用那么麻烦的换算了，此时那个90px的直接写成0.9rem就可以了。</p><p><strong>4.问：在此方案下，我如果引用了别的UI库，那些UI库的元素会显得特别小，如何解决？</strong></p><p>答：可以这样去理解问题的原因，如果不用高清方案，别的UI库的元素在移动设备上（假设这个设备是iphone 5好了）显示是正常的，这没有问题，然后我们在这个设备上将该页面截图放到电脑上看，发现宽度是640（问答1解释过了），根据你的像素眼大致测量，你发现这个设备上的某个字体大小应该是12px，而你在电脑上测量应该是24px。</p><p>现在我们使用高清方案去还原这个页面，那么字体大小应该写为 0.24rem 才对！</p><p>所以，如果你引用了其他的UI库，为了兼容高清方案，你需要对该UI库里凡是应用px的地方做相应处理，即： a px =&gt; a*0.02 rem<br>(具体处理方式因人而异，有模块化开发经验的同学可使用类似的 px2rem 的插件去转化，也可以完全手动处理）</p><p><strong>（2018/3/23更新）然而真实情况往往更为复杂，比如，你引入了百度地图（N个样式需要处理转换）；或者你引入了一个framework；又或者你使用了 video 标签，上面默认的尺寸样式很难处理。等等这些棘手问题</strong></p><p>面对这些情况，此时我们的高清方案如果不再压缩页面，那么以上问题将迎刃而解。<br>基于这样的思路，笔者对高清方案的源码做了如下修改，即添加一个叫做 normal 的参数，由它来控制页面是否压缩。<br>在文章顶部代码的最后，你会看到 <code>flex(false, 100, 1)</code>，默认情况下页面是开启压缩的。</p><p>如果你需要禁止压缩，由于我们的源码执行后，直接将flex函数挂载到全局变量window上了，<strong>此时你直接在需要禁止压缩的页面执行 </strong><code>window.flex(true)</code> <strong>就可以了，而rem的用法保持不变</strong>。</p><p>有一点美中不足的是，如果禁止了页面压缩，高清屏的1像素就不能实现了，如果你必须要实现1像素，那么自行谷歌：css 0.5像素，有N多的解决方案，这里不再赘述。</p><p><strong>5.问：有时候字体会不受控制的变大，怎么办？</strong></p><p>答：在X5新内核Blink中，在排版页面的时候，会主动对字体进行放大，会检测页面中的主字体，当某一块字体在我们的判定规则中，认为字号较小，并且是页面中的主要字体，就会采取主动放大的操作。然而这不是我们想要的，可以采取给最大高度解决</p><p>解决方案：</p><pre><code>*, *:before, *:after { max-height: 100000px }</code></pre><p>补充：有同学反映，在一些情况下<code>textarea</code> 标签内的字体大小即便加上上面的方案，字体也会变大，无法控制。此时你需要给 <code>textarea</code> 的 <code>display</code> 设为 <code>table</code> 或者 <code>inline-table</code>即可恢复正常。</p><p><strong>6.问：我在底部导航用的flex感觉更合适一些，请问这样子混着用可以吗？</strong></p><p>答：咱们的rem适合写固定尺寸。其余的根据需要换成flex或者百分比。源码示例中就有这三种的综合运用。</p><p><strong>7.问：用了这个方案如何使用媒体查询呢？</strong></p><p>一般来讲，使用了这个方案是没必要用媒体查询了，如果你必须要用，假设你要对 iphone5 （css像素宽度320px,<br>这里需要取其物理像素，也就是640）宽度下的类名做处理，你可以这样</p><pre><code>@media screen and (max-width: 640px) {      .yourLayout {          width:100%;      }  }  </code></pre><p><strong>8.问：可以提供下这个高清方案的源码吗？</strong></p><pre><code>&apos;use strict&apos;  /**   * @param {Boolean} [normal = false] - 默认开启页面压缩以使页面高清;   * @param {Number} [baseFontSize = 100] - 基础fontSize, 默认100px;   * @param {Number} [fontscale = 1] - 有的业务希望能放大一定比例的字体;   */  const win = window;  export default win.flex = (normal, baseFontSize, fontscale) =&gt; {  const _baseFontSize = baseFontSize || 100;  const _fontscale = fontscale || 1;  const doc = win.document;  const ua = navigator.userAgent;  const matches = ua.match(/Android[\S\s]+AppleWebkit\/(\d{3})/i);  const UCversion = ua.match(/U3\/((\d+|\.){5,})/i);  const isUCHd = UCversion &amp;&amp; parseInt(UCversion[1].split(&apos;.&apos;).join(&apos;&apos;), 10) &gt;= 80;  const isIos = navigator.appVersion.match(/(iphone|ipad|ipod)/gi);  let dpr = win.devicePixelRatio || 1;  if (!isIos &amp;&amp; !(matches &amp;&amp; matches[1] &gt; 534) &amp;&amp; !isUCHd) {    // 如果非iOS, 非Android4.3以上, 非UC内核, 就不执行高清, dpr设为1;    dpr = 1;  }  const scale = normal ? 1 : 1 / dpr;  let metaEl = doc.querySelector(&apos;meta[name=&quot;viewport&quot;]&apos;);  if (!metaEl) {    metaEl = doc.createElement(&apos;meta&apos;);    metaEl.setAttribute(&apos;name&apos;, &apos;viewport&apos;);    doc.head.appendChild(metaEl);  }  metaEl.setAttribute(&apos;content&apos;, `width=device-     width,user-scalable=no,initial-scale=${scale},maximum-scale=${scale},minimum-scale=${scale}`);  doc.documentElement.style.fontSize = normal ? &apos;50px&apos; : `${_baseFontSize / 2 * dpr * _fontscale}px`;  };   </code></pre><p><strong>10.问：我在使用 rem 布局进阶方案的时候遇到了XXX的问题，如何解决？</strong></p><ul><li>此方案久经考验，具有普遍适用性，自身出致命问题的情况很少，至少笔者是没遇到过。</li><li>绝大多数你遇到的问题，都是由于对rem布局理解不到位导致的。本文对rem布局做了大量的解释说明，配置了若干 demo，你可以把你遇到的问题放到demo里测试。遇到问题时，首先问自己，为什么这明显的错误大家没遇到就我遇到了？？</li><li>如果你真的经过充分验证，比对，确实是rem布局自身出了问题，那么请私信我，把还原问题场景的 demo 或者文件发给我。谢谢！</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好玩的rem布局&lt;/p&gt;
    
    </summary>
    
      <category term="Web前端" scheme="xumenghao.top/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="rem布局" scheme="xumenghao.top/tags/rem%E5%B8%83%E5%B1%80/"/>
    
      <category term="HTML5" scheme="xumenghao.top/tags/HTML5/"/>
    
      <category term="前端" scheme="xumenghao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>为什么喝碳酸饮料的人越来越少？</title>
    <link href="xumenghao.top//posts/4a17b201/"/>
    <id>xumenghao.top//posts/4a17b201/</id>
    <published>2018-03-23T00:43:11.470Z</published>
    <updated>2018-04-10T05:39:58.743Z</updated>
    
    <content type="html"><![CDATA[<p>最近，某饮料巨头公布了2017年的成绩单。财报显示，无论是净收入还是净利润都出现了下滑。事实上，这并非饮料行业第一次出现糟糕局面。据统计，美国碳酸软饮料销量连续11年下跌。20世纪可以说是属于碳酸饮料的世纪，碳酸饮料风靡全球，甚至代表了一种文化。然而到了现在，碳酸饮料为什么不行了？</p><a id="more"></a><p><code>James Xu - 中南海保安发来报道</code></p><blockquote><ul><li>近年来，由于生活方式的改变，越来越多的人开始关心饮食的安全、健康问题，碳酸饮料销量的下滑是健康观念转变的结果。</li><li>碳酸饮料已经出现100多年了，人类的娱乐、通讯、工作、饮食等等都发生了翻天覆地的变化，但它几乎没什么变化，还是熟悉的配方，熟悉的味道。</li><li>碳酸饮料已经出现100多年了，人类的娱乐、通讯、工作、饮食等等都发生了翻天覆地的变化，但它几乎没什么变化，还是熟悉的配方，熟悉的味道。</li></ul></blockquote><h4 id="几乎所有的碳酸饮料都正在经历全球范围内的销量下滑"><a href="#几乎所有的碳酸饮料都正在经历全球范围内的销量下滑" class="headerlink" title="几乎所有的碳酸饮料都正在经历全球范围内的销量下滑"></a>几乎所有的碳酸饮料都正在经历全球范围内的销量下滑</h4><hr><p>&nbsp;&nbsp;2016年，美国饮料行业刊物《饮料文摘》报告显示，美国碳酸软饮料销量连续11年下跌，2015年下降1.2%，降幅大于2014年的0.9%。行业内三大巨头销售量皆有所下降。同时，2015年碳酸软饮料人均消费量下降至153.7升，创自1985年来的30年最低。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img1.gtimg.com/ninja/1/2018/03/ninja152171629532786.jpg" alt="在过去的二十年里，汽水在美国的销量暴跌" title="">                </div>                <div class="image-caption">在过去的二十年里，汽水在美国的销量暴跌</div>            </figure><p>&nbsp;&nbsp;中国的情况也不容乐观。数据显示，2015年中国碳酸饮料产量1794.5万吨，较2014年的1810万吨下滑0.86%。</p><p>&nbsp;&nbsp;2016年，中国质量协会发布的《饮料行业整体综合满意度指数》显示，2016年消费者偏好度最低的饮料是碳酸饮料，排在包装水、蛋白质饮料、功能性饮料、茶饮料、果汁饮料之后。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img1.gtimg.com/ninja/1/2018/03/ninja152171631586663.png" alt="图片来源：《京华时报》资料" title="">                </div>                <div class="image-caption">图片来源：《京华时报》资料</div>            </figure><p>&nbsp;&nbsp;20世纪可以说是属于碳酸饮料的世纪，一系列碳酸饮料风靡全球，甚至代表了一种文化。然而到了今天，碳酸饮料为什么不行了？</p><h4 id="相比微甜的口感和畅饮的快感，现代人更加注重健康"><a href="#相比微甜的口感和畅饮的快感，现代人更加注重健康" class="headerlink" title="相比微甜的口感和畅饮的快感，现代人更加注重健康"></a>相比微甜的口感和畅饮的快感，现代人更加注重健康</h4><hr><p>&nbsp;&nbsp;说到碳酸饮料，你会想到什么？在美国问答网站Quara上有一个回答很精辟：美国、糖和肥胖。</p><p>&nbsp;&nbsp;近年来，由于生活方式的改变，越来越多的人开始关心饮食的安全、健康问题。地中海饮食的流行是一个例子，碳酸饮料销量的下滑同样是健康观念转变的结果。</p><p>&nbsp;&nbsp;碳酸饮料被认为对人体健康有负面影响，例如导致人的骨质疏松、蛀牙、肥胖等等，当然，其中一些也还存在争议。但可以确信的一点是，碳酸饮料中的糖含量实在是太高了。</p><p>&nbsp;&nbsp;根据《中国居民膳食指南2016》中的建议：“控制添加糖的摄入量，每天摄入不超过50克，最好控制在25克以下。”所谓添加糖就是食物中额外添加的糖，比如冰糖、白砂糖、果葡糖浆等等，这些糖已经被研究证实，会引发肥胖、扰乱代谢等等。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img1.gtimg.com/ninja/1/2018/03/ninja152171636551811.jpg" alt="碳酸饮料业绩的大幅下滑，预示着整个中国乃至全球大健康消费浪潮的全面来临" title="">                </div>                <div class="image-caption">碳酸饮料业绩的大幅下滑，预示着整个中国乃至全球大健康消费浪潮的全面来临</div>            </figure><p>&nbsp;&nbsp;就拿一款流行的碳酸饮料来说，每100毫升的含糖量为10.6克，一瓶500毫升，含糖量达到53克，超过了膳食指南建议的一天的糖摄入量。</p><p>&nbsp;&nbsp;北京大学中国社会科学调查中心2015年发布的报告显示，与2002年相比，2013年中国7岁至17岁城市儿童青少年超重率和肥胖率分别上升2.4个和3.1个百分点，而农村则分别上升5.1个和3.6个百分点，均高于城市。</p><p>&nbsp;&nbsp;同样是在2013年，北京市教委就一纸禁令将碳酸饮料挡在了中小学校园门外：通知明确规定，中小学不得出售碳酸饮料等不利于健康的食品饮料。</p><p>&nbsp;&nbsp;中国还没有从国家层面对食品减糖的措施和标准做出进一步要求，但已经有一些国家这样做了。</p><p>&nbsp;&nbsp;2014年1月，以国民饮食习惯不健康、肥胖问题严重而“著称”的墨西哥对碳酸饮料征税1比索/升，成为全球第一个开征“糖税”的国家。短短几年间，这一新的税种已在全球蔚然成风。刚刚过去的2017年，包括英国、法国在内的多个国家纷纷加入征收“糖税”的行列，还有十几个国家的征税计划已在议会讨论之中。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img1.gtimg.com/ninja/1/2018/03/ninja152171637887507.jpg" alt="图片来源：《财经》杂志" title="">                </div>                <div class="image-caption">图片来源：《财经》杂志</div>            </figure><p>&nbsp;&nbsp;在一些健康研究机构看来，以碳酸饮料为代表的含糖饮料是造成肥胖的罪魁祸首之一。在很多国家，肥胖问题最突出的群体就是贫困人口，他们消费这种高糖、高热量的食品比较多，而且又对价格比较敏感，“糖税”的征收使碳酸饮料销路更窄。</p><p>&nbsp;&nbsp;碳酸饮料销量连续下跌，第一个原因，是因为消费者的健康意识提升了。碳酸饮料不健康，卡路里含量太高，长期饮用者肥胖率会大幅度提升。而健康的果汁和苏打水则要健康得多，天然的甜香口感不是人工甜味剂能比的。</p><h4 id="100年来，碳酸饮料的创新实在是微不足道"><a href="#100年来，碳酸饮料的创新实在是微不足道" class="headerlink" title="100年来，碳酸饮料的创新实在是微不足道"></a>100年来，碳酸饮料的创新实在是微不足道</h4><hr><p>&nbsp;&nbsp;除了因为健康原因主动或被动远离碳酸饮料的消费者，碳酸饮料销量的下滑也与自身的固步自封有关。</p><p>&nbsp;&nbsp;碳酸饮料已经出现100多年了，在这100多年的时间里，人类的娱乐、通讯、工作、饮食等等都发生了翻天覆地的变化。碳酸饮料的广告和包装虽然一年比一年花哨，营销方式经常也是其他行业学习的样本，但是它推出的产品，百年来几乎没什么变化，还是熟悉的配方，熟悉的味道。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1521776628311&di=c54d9058ef7554686434b265d811de40&imgtype=0&src=http%3A%2F%2Fwww.hxkfh.com%2Fupload%2Fimage%2F20170227%2F20170227110212_1054.jpg" alt="是洋葱，我加了洋葱（纯属无厘头）" title="">                </div>                <div class="image-caption">是洋葱，我加了洋葱（纯属无厘头）</div>            </figure><p>&nbsp;&nbsp;“小步快跑，试错迭代 。”吴晓波在《腾讯传》中多次提到腾讯致胜的方法。碳酸饮料不好卖，首要还在于产品的创新。事实上，碳酸饮料曾在口味上做出新的尝试，但最终以失败告终。此后，并没有其他太多爆品。</p><p>&nbsp;&nbsp;连娃哈哈老总宗庆后也曾反思，饮料企业这几年在产品创新方面确实没有做好，研发人员主要还是待在实验室里闭门造车，推出来的产品不能满足需求，因而消费者也不买账，很难打开市场。</p><h4 id="对消费者来说，碳酸饮料也不再是酷与潮流的代表"><a href="#对消费者来说，碳酸饮料也不再是酷与潮流的代表" class="headerlink" title="对消费者来说，碳酸饮料也不再是酷与潮流的代表"></a>对消费者来说，碳酸饮料也不再是酷与潮流的代表</h4><hr><p>&nbsp;&nbsp;而在中国，碳酸饮料销量的下滑除了健康和固步自封以外，还有其他的原因。</p><p>&nbsp;&nbsp;以前物质不充裕，饮料只要口感好、能解渴，就会卖的不错。但是现在不一样了，除了关心健康的人群会选择无糖饮料或者包装水以外，就算选择有糖饮料的人大多时候也都不会选择碳酸饮料。</p><p>&nbsp;&nbsp;一方面，随着中国人收入的增长，可以负担并选择得起其他饮料了，尽管碳酸饮料20年没有涨价，但很多人还是愿意花上数倍的价钱买杯咖啡或者奶茶。</p><p><img src="http://img1.gtimg.com/ninja/1/2018/03/ninja152171647693281.jpg" alt=""></p><p>&nbsp;&nbsp;另一方面，现在喝饮料不仅仅是为了解渴，经常还是一种社交行为，奶茶店、咖啡馆贩卖的不仅是饮品，还是空间和体验。</p><p>&nbsp;&nbsp;还有一点要承认，在精神层面碳酸饮料已经过时了，不再是酷与潮流的代表。</p><p>&nbsp;&nbsp;对80后来说，在大家都喝北冰洋和黑加仑饮料的年代，谁要是能拿出一瓶国外品牌的碳酸饮料，是件极其有面儿的事。很多人喝完碳酸饮料之后，还故意打出一个嗝，让别人不爽，但自己很爽。</p><p>&nbsp;&nbsp;而现在，只是一款普通得不能再普通的饮料。中国质量协会发布的报告指出，碳酸饮料目前只是依靠消费者对于口感的认可和个人习惯在保持着一定的用户黏性，其主要的消费人群80后、90后很多也大多是在青少年时期养成的习惯。</p><p>&nbsp;&nbsp;消费升级对碳酸饮料销量的影响，首先是消费者会选择更好、更健康的东西，这也是很多人都能感知到的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img1.gtimg.com/ninja/1/2018/03/ninja152171649725083.jpg" alt="越来越注重健康饮食的消费者开始逐渐“抛弃”碳酸饮料、转投健康饮品了" title="">                </div>                <div class="image-caption">越来越注重健康饮食的消费者开始逐渐“抛弃”碳酸饮料、转投健康饮品了</div>            </figure><p>&nbsp;&nbsp;而消费升级中还有一类人，喜欢新鲜和个性，要不一样的东西。一份针对33个年收入超过40万以上的家庭访谈显示，海淘在很大程度上属于为精神需求买单的产物，很多小众品牌比传统奢侈品更受欢迎。</p><p>&nbsp;&nbsp;在饮料这样的快消品中也一样，百年未变的碳酸饮料在当下只是一瓶饮料，它无法提供商品以外的精神价值，也无法触达这一代消费者的心智。</p><p>&nbsp;&nbsp;而酷与时尚的代表在这个时代也早已变成了奶茶。就像那些买到网红奶茶的年轻人，第一件事不是喝奶茶，而是迅速拿出手机，用镜头拍下这一刻。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img1.gtimg.com/ninja/1/2018/03/ninja152171652323091.jpg" alt="上世纪80年代，可乐是一种时尚，不少地方的饮料厂都跟进生产自己的可乐''" title="">                </div>                <div class="image-caption">上世纪80年代，可乐是一种时尚，不少地方的饮料厂都跟进生产自己的可乐''</div>            </figure><p>可以说，在自身（产品固步自封）与时代（消费升级、健康观念转变）的共同作用下，碳酸饮料的时代或许要结束了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，某饮料巨头公布了2017年的成绩单。财报显示，无论是净收入还是净利润都出现了下滑。事实上，这并非饮料行业第一次出现糟糕局面。据统计，美国碳酸软饮料销量连续11年下跌。20世纪可以说是属于碳酸饮料的世纪，碳酸饮料风靡全球，甚至代表了一种文化。然而到了现在，碳酸饮料为什么不行了？&lt;/p&gt;
    
    </summary>
    
      <category term="健康" scheme="xumenghao.top/categories/%E5%81%A5%E5%BA%B7/"/>
    
    
      <category term="健康" scheme="xumenghao.top/tags/%E5%81%A5%E5%BA%B7/"/>
    
      <category term="饮料" scheme="xumenghao.top/tags/%E9%A5%AE%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>“炸裂的《复联3》预告里，唯独就少了他的影子？</title>
    <link href="xumenghao.top//posts/4a17b200/"/>
    <id>xumenghao.top//posts/4a17b200/</id>
    <published>2018-03-22T06:46:48.866Z</published>
    <updated>2018-04-10T05:42:47.109Z</updated>
    
    <content type="html"><![CDATA[<p><strong>《复仇者联盟3：无限战争》</strong>的首支预告在去年以24小时2.3亿的浏览量，创造了有史以来的最高纪录</p><a id="more"></a><p><code>James Xu - 中南海保安发来报道</code></p><p>前几天第二支预告更是在人群中炸开了花，只见叔的首页一片哀嚎。</p><p>美队徒手单挑灭霸，虐。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128348/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>锤哥惨遭捏头，虐。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3051573566/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>奇异博士被强行针灸，太虐了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128272/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>而且这些之前的预告里，大家已经看到了悲壮的画面。</p><p>比如幻视脑门的心灵宝石不保。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128359/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>钢铁侠被灭霸一拳打飞。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128341/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>小蜘蛛狠狠摔在地上，灭霸被指虐童。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128364/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>不得不说，漫威连发刀子都不带重样，活活是要粉丝心碎的节奏。</p><p>而且官方早早就传出这一部电影中，会有重要角色死去。</p><p>鉴于退休，换血和合约到期等消息，美队和钢铁侠牺牲的可能性非常大，建议影迷们提早给自己做好心理建设，以免一时无法接受。</p><p>叔觉得，这些都还不是最惨的。</p><p>有一位超级英雄，迄今为止，在《复联3》的任何预告和片段里都没有出现。</p><p>没错，那个消失的男人，就是鹰眼。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128315/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>叔一帧一帧的确认过，不算漫威的片头logo，就真的连一丁点迹象都没有。</p><p>公布的电影海报，也没有鹰眼的一席之地。</p><p>粉丝们都看不下去了，纷纷开启了改图模式。</p><p>有些是灵魂p图，有些是满屏鹰眼，还有凭借抠图让鹰眼一人分饰所有角色，以及纵向延展画幅，找到了头顶重担的鹰眼。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128338/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>《娱乐周刊》整整放出了15张角色海报，他也没在其中。</p><p>善良的外国网友索性自制了一款封面，尽力挽尊。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128312/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>不要说：“蚁人不是也没出场嘛。“</p><p>也不要用“《复联3》里有67个超级英雄，不能每一个都顾及到”来反驳叔。</p><p>首先，蚁人最起码是有个人独立电影的，何况《蚁人2：黄蜂女现身》也马上要在今年暑期上映了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128295/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>再看看鹰眼。</p><p>他第一次现身于《雷神》（2011）的彩蛋，是《复仇者联盟》（2012）中的初代复仇者之一，怎么着都算是MCU中比较元老级的人物了。</p><p>然后美队、雷神、浩克、钢铁侠、黑寡妇都有镜头，只有他音信全无，还是不是一起战斗过的盆友了？</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128281/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>不仅如此，他也是初代复仇者里面，唯一一个没有独立电影项目的成员。</p><p>《黑寡妇》已定于2020年上映，片酬都定了下来。如果到时候电影票房超过9亿，斯嘉丽·约翰逊一共能拿到3100万美元，将成为好莱坞片酬最高的女演员。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128275/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>鹰眼却没有得到重视，后来传言这个角色可能会交给Netflix制作成剧，但计划迟迟未能拍板。</p><p>对此鹰眼的饰演者杰瑞米·雷纳表示：“我不知道这个想法现实不现实，但我饰演的每一位角色，我都非常想要深挖一下他们的故事，我总觉得我很多角色都没拍够，毫无疑问鹰眼也是其中一个！”</p><p>雷纳说得很在理，漫画中鹰眼克林特·巴顿绝对是个有故事的男同学。</p><p>身为一个在马戏团长大的孤儿，他有过污点，碰过黑钱，努力惩恶扬善，也曾自甘堕落。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3087043365/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>他的感情线也足够丰富，迷恋过黑寡妇和猩红女巫，跟黄蜂女有过一腿，还和仿生鸟芭芭拉·莫尔斯结过婚。</p><p>不过叔最看重的，还是他的那一份坚持。</p><p>他没有超级血清，也没有酷炫装甲，更没有变种基因，却一次次义无反顾地用血肉之躯冲锋陷阵。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128283/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>哪怕身负重伤，出院痊愈后，依然会不遗余力地维护正义。</p><p>这才是超级英雄真正的奥义啊。</p><p>在今年1月发售的《老人鹰眼》中，鹰眼还尽力赶在自己完全失明前，为昔日的队友复仇。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128328/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>执着的精神和忠诚度都十分感人。</p><p>当周围都是超能力者和神的时候，鹰眼自然会显得普通。</p><p>恰恰是他平凡人的身份，在队伍中起到了平衡互补的作用。他既能提醒着那些能力超群的英雄们不要飞得离太阳太近，也在以他们为目标提升着自我。</p><p>鹰眼接受过全面的训练，擅长远程武器，尤其是弓箭，不同的箭头会有发挥不同的功能，包括套索，电击，爆炸等。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128328/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>他赤手空拳的技能过关，还能轻易把身边的物体当作带有攻击性的武器，锡盘、纸牌、硬币这些东西到他手里都可以是危险品。</p><p>记得《蜘蛛侠：英雄归来》上映之后流行起了“没有战衣我什么都不是。”的梗。</p><p>所以没有弓箭的鹰眼，仍会是个厉害的家伙。</p><p>值得一提的是，他的臂力惊人。他的那把250磅力的弓，超级反派“交火”拿在手里连弓弦都拉不动。</p><p>本是一介凡人的他恪守着“从不失手”的信条，让自己变得超凡。</p><p>“我一旦失手,就只不过是个拿着弓箭的普通人而已。我心里一直都在欺骗着自己。这就是为什么我从不射失。”</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128290/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>虽然有时喜剧、综艺和观众私底下都会开玩笑地吐槽鹰眼弱，存在感低，官方也会自黑。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128282/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>没了箭我只是个穿着滑稽的男人</p><p>但作为一个漫威老粉，叔这次真心觉得MCU对这个角色有点“始乱终弃”。</p><p>在电影宇宙中，鹰眼也是蛮苦逼了。</p><p>《复联》第一部，没等大显身手就被洛基用手杖蛊惑，瞬间反水，直到影片后半段才被黑寡妇的拳头打醒。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128287/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>《复联2》上映前，猩红女巫的加入，把鹰眼的flag给立得高高的。</p><p>众人纷纷怀疑克林特会像漫画的情节一样，会死在精神失控的猩红女巫所制造的灾难中。</p><p>结果鹰眼又是在电影刚开场的一战中就受了伤，之后居然还交代出自己已婚育有3个孩子，还坐拥一个农场。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128414/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>按这种电影的套路来讲，幸福家庭里的顶梁柱基本都命不久矣。</p><p>没想到快银竟然替他领了便当。</p><p>到了《美队3：内战》，决定回归家庭的鹰眼刚退休5分钟，就应美队的召唤前来支援。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128279/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>最后他被和猎鹰、蚁人与猩红女巫一起关进了海底监狱，美队又把他们救了出来。</p><p>叔经常会看到有人吹捧钢铁侠美国队长。萝卜白菜各有所爱，这点无可非议。</p><p>但某些人对鹰眼一脸嫌弃，顺便还要中伤演员，叔就忍不住要评评理了。</p><p>杰瑞米·雷纳跟鹰眼有着一定的相似之处，都是草根出身，通过不懈的付出才取得了今天的成就。</p><p><img src="http://inews.gtimg.com/newsapp_match/0/3084128298/0" alt=""></p><p>他是大器晚成型的演员，在不出名的时候演过很多小型的独立电影。</p><p>一路打拼追寻表演梦的他，凭借08年的《拆弹部队》提名了奥斯卡影帝。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128314/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>主要靠翻修房子为生的他那时远没有现在这么富裕，因为家里还没接上自来水，参加颁奖典礼之前是去星巴克洗的漱。</p><p>与阿汤哥合作的《碟中谍4》是他进入好莱坞商业制作的敲门砖，在此之后塑造起了硬汉形象。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128267/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>2017年，《福布斯》公布的年度吸金力最强男星榜单中，杰瑞米·雷纳以1900万美元排名17，“美队”克里斯·埃文斯，“星爵”克里斯·普拉特和“绿巨人”马克·鲁弗洛都位列其后。</p><p>MCU里的男星也有不少人表达了自己对雷纳和鹰眼的青睐。</p><p>动作捕捉大师安迪·瑟金斯非常想和鹰眼组队，因为穿战服的雷纳相当有型。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128376/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>当被问到想成为哪个超级英雄时，“冬兵“塞巴斯蒂安·斯坦表示鹰眼就很酷。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128333/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>“幻视”保罗·贝坦尼也是对鹰眼称赞了一番。</p><p>这么多事实摆在这，瞧不起鹰眼的黑子服气吗？</p><p>还不服的话，那只能靠杰瑞米·雷纳机智不失涵养的言辞来回怼毒评了。</p><p>罗素兄弟表示鹰眼在这部电影在进行他个人的旅程，《复联3》出镜少的角色会是《复联4》的主力。</p><p>有网友用《复联4：鹰蚁奇迹》这么个讽刺的标题，说出了大家心中的质疑。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128278/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>尽管鹰眼换了发型，被拍到穿了新的战衣，也并不能确定鹰眼会更名转型成漫画中的“浪人”，毕竟我们也不是没被漫威骗过。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://inews.gtimg.com/newsapp_match/0/3084128293/0" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>不管鹰眼身上是有不能透露的契口，还是彻底打了酱油，叔都希望漫威能给这个角色应有的待遇。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;《复仇者联盟3：无限战争》&lt;/strong&gt;的首支预告在去年以24小时2.3亿的浏览量，创造了有史以来的最高纪录&lt;/p&gt;
    
    </summary>
    
      <category term="电影" scheme="xumenghao.top/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
      <category term="话题" scheme="xumenghao.top/tags/%E8%AF%9D%E9%A2%98/"/>
    
      <category term="复联3" scheme="xumenghao.top/tags/%E5%A4%8D%E8%81%943/"/>
    
      <category term="漫威" scheme="xumenghao.top/tags/%E6%BC%AB%E5%A8%81/"/>
    
  </entry>
  
  <entry>
    <title>前端常见跨域解决方案</title>
    <link href="xumenghao.top//posts/4a17b157/"/>
    <id>xumenghao.top//posts/4a17b157/</id>
    <published>2018-03-22T06:19:57.576Z</published>
    <updated>2018-04-10T02:47:45.614Z</updated>
    
    <content type="html"><![CDATA[<p>学习下跨域</p><a id="more"></a><p><code>James Xu - 中南海保安发来报道</code></p><h4 id="什么是跨域？"><a href="#什么是跨域？" class="headerlink" title="什么是跨域？"></a>什么是跨域？</h4><p>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源，这里跨域是广义的。</p><p>广义的跨域：</p><p> 1.资源跳转： A链接、重定向、表单提交<br> 2.资源嵌入：<code>&lt;link&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;frame&gt;</code>等dom标签，还有样式中<code>background:url()</code>、<code>@font-face()</code>等文件外链<br> 3.脚本请求： js发起的ajax请求、dom和js对象的跨域操作等</p><p>其实我们通常所说的跨域是狭义的，是由浏览器同源策略限制的一类请求场景。</p><p>什么是同源策略？</p><p>同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><p>同源策略限制以下几种行为：</p><p> 1.Cookie、LocalStorage 和 IndexDB 无法读取<br> 2.DOM 和 Js对象无法获得<br> 3.AJAX 请求不能发送</p><h4 id="常见跨域场景"><a href="#常见跨域场景" class="headerlink" title="常见跨域场景"></a>常见跨域场景</h4><blockquote><p>URL                                      说明                    是否允许通信<br><a href="http://www.domain.com/a.js" target="_blank" rel="noopener">http://www.domain.com/a.js</a><br><a href="http://www.domain.com/b.js" target="_blank" rel="noopener">http://www.domain.com/b.js</a>         同一域名，不同文件或路径           允许<br><a href="http://www.domain.com/lab/c.js" target="_blank" rel="noopener">http://www.domain.com/lab/c.js</a></p><p><a href="http://www.domain.com:8000/a.js" target="_blank" rel="noopener">http://www.domain.com:8000/a.js</a><br><a href="http://www.domain.com/b.js" target="_blank" rel="noopener">http://www.domain.com/b.js</a>         同一域名，不同端口                不允许<br><a href="http://www.domain.com/a.js" target="_blank" rel="noopener">http://www.domain.com/a.js</a><br><a href="https://www.domain.com/b.js" target="_blank" rel="noopener">https://www.domain.com/b.js</a>        同一域名，不同协议                不允许<br><a href="http://192.168.4.12/b.js" target="_blank" rel="noopener">http://192.168.4.12/b.js</a>           域名和域名对应相同ip              不允许<br><a href="http://www.domain.com/a.js" target="_blank" rel="noopener">http://www.domain.com/a.js</a><br><a href="http://www.domain.com/a.js" target="_blank" rel="noopener">http://www.domain.com/a.js</a><br><a href="http://x.domain.com/b.js" target="_blank" rel="noopener">http://x.domain.com/b.js</a>           主域相同，子域不同                不允许<br><a href="http://domain.com/c.js" target="_blank" rel="noopener">http://domain.com/c.js</a><br><a href="http://www.domain1.com/a.js" target="_blank" rel="noopener">http://www.domain1.com/a.js</a><br><a href="http://www.domain2.com/b.js" target="_blank" rel="noopener">http://www.domain2.com/b.js</a>        不同域名                         不允许</p></blockquote><h4 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h4><p> 1.通过jsonp跨域<br> 2.document.domain + iframe跨域<br> 3.location.hash + iframe<br> 4.window.name + iframe跨域<br> 5.postMessage跨域<br> 6.跨域资源共享（CORS）<br> 7.nginx代理跨域<br> 8.nodejs中间件代理跨域<br> 9.WebSocket协议跨域</p><h4 id="一、通过jsonp跨域"><a href="#一、通过jsonp跨域" class="headerlink" title="一、通过jsonp跨域"></a>一、通过jsonp跨域</h4><p> 通常为了减轻web服务器的负载，我们把js、css，img等静态资源分离到另一台独立域名的服务器上，在html页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以通过动态创建script，再请求一个带参网址实现跨域通信。</p><p> 1.原生实现：</p><blockquote><p><script><br>  &nbsp;&nbsp; var script = document.createElement(‘script’);<br>  &nbsp;&nbsp; script.type = ‘text/javascript’;<br>  &nbsp;&nbsp; // 传参并指定回调执行函数为onBack<br>  &nbsp;&nbsp; script.src = ‘<a href="http://www.domain2.com:8080/login">http://www.domain2.com:8080/login</a>?  user=admin&amp;callback=onBack’;<br>   document.head.appendChild(script);<br>   // 回调执行函数<br>  &nbsp;&nbsp;function onBack(res) {<br>  &nbsp;&nbsp;&nbsp;&nbsp;     alert(JSON.stringify(res));<br>  &nbsp;&nbsp;}<br></script><br>服务端返回如下（返回时即执行全局函数）：</p></blockquote><blockquote><p>onBack({“status”: true, “user”: “admin”})  </p></blockquote><p>2.jquery ajax：</p><blockquote><p>$.ajax({<br>&nbsp;&nbsp;    url: ‘<a href="http://www.domain2.com:8080/login&#39;" target="_blank" rel="noopener">http://www.domain2.com:8080/login&#39;</a>,<br>&nbsp;&nbsp;    type: ‘get’,<br>&nbsp;&nbsp;    dataType: ‘jsonp’,  // 请求方式为jsonp<br>&nbsp;&nbsp;    jsonpCallback: “onBack”,    // 自定义回调函数名<br>&nbsp;&nbsp;    data: {}<br>});  </p></blockquote><p>3.vue.js：  </p><blockquote><p>this.$http.jsonp(‘<a href="http://www.domain2.com:8080/login&#39;" target="_blank" rel="noopener">http://www.domain2.com:8080/login&#39;</a>, {<br>&nbsp;&nbsp;    params: {},<br>&nbsp;&nbsp;    jsonp: ‘onBack’<br>}).then((res) =&gt; {<br>&nbsp;&nbsp;    console.log(res);<br>})  </p></blockquote><p>后端node.js代码示例：  </p><blockquote><p>var querystring = require(‘querystring’);<br>var http = require(‘http’);<br>var server = http.createServer();  </p><p>server.on(‘request’, function(req, res) {<br>&nbsp;&nbsp;    var params = qs.parse(req.url.split(‘?’)[1]);<br>&nbsp;&nbsp;    var fn = params.callback;  </p><p>&nbsp;&nbsp;    // jsonp返回设置<br>&nbsp;&nbsp;    res.writeHead(200, { ‘Content-Type’: ‘text/javascript’ });<br>&nbsp;&nbsp;    res.write(fn + ‘(‘ + JSON.stringify(params) + ‘)’);<br>&nbsp;&nbsp;<br>&nbsp;&nbsp;    res.end();<br>});  </p><p>server.listen(‘8080’);<br>console.log(‘Server is running at port 8080…’);  </p></blockquote><p>jsonp缺点：只能实现get一种请求。</p><h4 id="二、-document-domain-iframe跨域"><a href="#二、-document-domain-iframe跨域" class="headerlink" title="二、 document.domain + iframe跨域"></a>二、 document.domain + iframe跨域</h4><p>此方案仅限主域相同，子域不同的跨域应用场景。</p><p>实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。</p><p>1.父窗口：(<a href="http://www.domain.com/a.html" target="_blank" rel="noopener">http://www.domain.com/a.html</a>)</p><blockquote><p><code>&lt;iframe id=&quot;iframe&quot; src=&quot;http://child.domain.com/b.html&quot;&gt;&lt;/iframe&gt;</code><br><code>&lt;script&gt;</code><br>   &nbsp;&nbsp;document.domain = ‘domain.com’;<br>  &nbsp;&nbsp;var user = ‘admin’;<br><code>&lt;/script&gt;</code></p></blockquote><p>2.子窗口：(<a href="http://child.domain.com/b.html" target="_blank" rel="noopener">http://child.domain.com/b.html</a>)</p><blockquote><p><code>&lt;script&gt;</code><br>  &nbsp; document.domain = ‘domain.com’;<br>  &nbsp; // 获取父窗口中变量<br>  &nbsp; alert(‘get js data from parent —&gt; ‘ + window.parent.user);<br><code>&lt;/script&gt;</code></p></blockquote><h4 id="三、-location-hash-iframe跨域"><a href="#三、-location-hash-iframe跨域" class="headerlink" title="三、 location.hash + iframe跨域"></a>三、 location.hash + iframe跨域</h4><p>实现原理： a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</p><p>具体实现：A域：a.html -&gt; B域：b.html -&gt; A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。</p><p>1.a.html：(<a href="http://www.domain1.com/a.html" target="_blank" rel="noopener">http://www.domain1.com/a.html</a>)</p><blockquote><p><code>&lt;iframe id=&quot;iframe&quot; src=&quot;http://www.domain2.com/b.html&quot; style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;</code><br><code>&lt;script&gt;</code><br>  &nbsp; var iframe = document.getElementById(‘iframe’);<br>  &nbsp; // 向b.html传hash值<br>  &nbsp; setTimeout(function() {<br>  &nbsp;&nbsp;     iframe.src = iframe.src + ‘#user=admin’;<br>  &nbsp;}, 1000);<br>  &nbsp; // 开放给同域c.html的回调方法<br>  &nbsp;&nbsp;     alert(‘data from c.html —&gt; ‘ + res);<br>  &nbsp; }<br><code>&lt;/script&gt;</code></p></blockquote><p>2.b.html：(<a href="http://www.domain2.com/b.html" target="_blank" rel="noopener">http://www.domain2.com/b.html</a>)</p><blockquote><p><code>&lt;iframe id=&quot;iframe&quot; src=&quot;http://www.domain1.com/c.html&quot; style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;</code><br><code>&lt;script&gt;</code><br>  &nbsp; var iframe = document.getElementById(‘iframe’);<br>  &nbsp; // 监听a.html传来的hash值，再传给c.html<br>  &nbsp; window.onhashchange = function () {<br>  &nbsp;&nbsp;     iframe.src = iframe.src + location.hash;<br>  &nbsp; };<br><code>&lt;/script&gt;</code></p></blockquote><p>3.c.html：(<a href="http://www.domain1.com/c.html" target="_blank" rel="noopener">http://www.domain1.com/c.html</a>)</p><blockquote><p><code>&lt;script&gt;</code><br>   // 监听b.html传来的hash值<br>  &nbsp; window.onhashchange = function () {<br>    &nbsp;&nbsp; // 再通过操作同域a.html的js回调，将结果传回<br>    &nbsp;&nbsp;window.parent.parent.onCallback  (‘hello:’+location.hash.replace(‘#user=’,’’));<br>   &nbsp;};<br><code>&lt;/script&gt;</code></p></blockquote><h4 id="四、-window-name-iframe跨域"><a href="#四、-window-name-iframe跨域" class="headerlink" title="四、 window.name + iframe跨域"></a>四、 window.name + iframe跨域</h4><p>window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</p><p>1.a.html：(<a href="http://www.domain1.com/a.html" target="_blank" rel="noopener">http://www.domain1.com/a.html</a>)</p><blockquote><p>var proxy = function(url, callback) {<br>&nbsp;&nbsp;   var state = 0;<br>&nbsp;&nbsp;    var iframe = document.createElement(‘iframe’);  </p><p>&nbsp;&nbsp;    // 加载跨域页面<br>&nbsp;&nbsp;    iframe.src = url;  </p><p>&nbsp;&nbsp;    // onload事件会触发2次，第1次加载跨域页，并留存数据于window.name<br>&nbsp;&nbsp;    iframe.onload = function() {<br>&nbsp;&nbsp;&nbsp;        if (state === 1) {<br>&nbsp;&nbsp;&nbsp;&nbsp;            // 第2次onload(同域proxy页)成功后，读取同域window.name中数据<br>&nbsp;&nbsp;&nbsp;&nbsp;            callback(iframe.contentWindow.name);<br>&nbsp;&nbsp;&nbsp;&nbsp;            destoryFrame();  </p><p>&nbsp;&nbsp;&nbsp;        } else if (state === 0) {<br>&nbsp;&nbsp;&nbsp;            // 第1次onload(跨域页)成功后，切换到同域代理页面<br>&nbsp;&nbsp;&nbsp;            iframe.contentWindow.location = ‘<a href="http://www.domain1.com/proxy.html&#39;" target="_blank" rel="noopener">http://www.domain1.com/proxy.html&#39;</a>;<br>&nbsp;&nbsp;&nbsp;            state = 1;<br>&nbsp;&nbsp;&nbsp;        }<br>&nbsp;&nbsp;    };  </p><p>&nbsp;    document.body.appendChild(iframe);  </p><p>&nbsp;&nbsp;    // 获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）<br>&nbsp;&nbsp;    function destoryFrame() {<br>&nbsp;&nbsp;&nbsp;&nbsp;        iframe.contentWindow.document.write(‘’);<br>&nbsp;&nbsp;&nbsp;&nbsp;        iframe.contentWindow.close();<br>&nbsp;&nbsp;&nbsp;&nbsp;        document.body.removeChild(iframe);<br>&nbsp;&nbsp;    }<br>};  </p><p>// 请求跨域b页面数据<br>proxy(‘<a href="http://www.domain2.com/b.html&#39;" target="_blank" rel="noopener">http://www.domain2.com/b.html&#39;</a>, function(data){<br>&nbsp;&nbsp;    alert(data);<br>});  </p></blockquote><p>2.proxy.html：(<a href="http://www.domain1.com/proxy…" target="_blank" rel="noopener">http://www.domain1.com/proxy…</a>.<br>中间代理页，与a.html同域，内容为空即可。</p><p>3.b.html：(<a href="http://www.domain2.com/b.html" target="_blank" rel="noopener">http://www.domain2.com/b.html</a>)</p><blockquote><p><code>&lt;script&gt;</code><br>  &nbsp;&nbsp;window.name = ‘This is domain2 data!’;<br><code>&lt;/script&gt;</code> </p></blockquote><p>总结：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p><h4 id="五、-postMessage跨域"><a href="#五、-postMessage跨域" class="headerlink" title="五、 postMessage跨域"></a>五、 postMessage跨域</h4><p>postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：</p><ul><li>页面和其打开的新窗口的数据传递</li><li>多窗口之间消息传递</li><li>页面与嵌套的iframe消息传递</li><li>上面三个场景的跨域数据传递</li></ul><p>用法：postMessage(data,origin)方法接受两个参数<br>data： html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。<br>origin： 协议+主机+端口号，也可以设置为”*”，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为”/”。</p><p>1.a.html：(<a href="http://www.domain1.com/a.html" target="_blank" rel="noopener">http://www.domain1.com/a.html</a>)</p><blockquote><p><code>&lt;iframe id=&quot;iframe&quot; src=&quot;http://www.domain2.com/b.html&quot; style=&quot;display:none;&quot;&gt;&lt;/iframe&gt;</code><br><code>&lt;script&gt;</code><br>   &nbsp;var iframe = document.getElementById(‘iframe’);<br>   &nbsp;iframe.onload = function() {<br>       &nbsp;&nbsp;var data = {<br>           &nbsp;&nbsp;&nbsp;name: ‘aym’<br>       &nbsp;};<br>      &nbsp; // 向domain2传送跨域数据<br>       &nbsp;iframe.contentWindow.postMessage(JSON.stringify(data),’<a href="http://www.domain2.com&#39;)" target="_blank" rel="noopener">http://www.domain2.com&#39;)</a>;<br>   };<br>  &nbsp; // 接受domain2返回数据<br>  &nbsp; window.addEventListener(‘message’, function(e) {<br>   &nbsp;&nbsp;    alert(‘data from domain2 —&gt; ‘ + e.data);<br>   &nbsp;&nbsp;}, false);<br><code>&lt;/script&gt;</code></p></blockquote><p>2.）b.html：(<a href="http://www.domain2.com/b.html" target="_blank" rel="noopener">http://www.domain2.com/b.html</a>)</p><blockquote><p><code>&lt;script&gt;</code><br>// 接收domain1的数据<br>window.addEventListener(‘message’, function(e) {<br>&nbsp;&nbsp;alert(‘data from domain1 —&gt; ‘ + e.data);<br>       var data = JSON.parse(e.data);<br>      &nbsp;  if (data) {<br>           &nbsp;&nbsp;data.number = 16;<br>          &nbsp;&nbsp; // 处理后再发回domain1<br>          &nbsp;&nbsp; window.parent.postMessage(JSON.stringify  (data), &gt;&nbsp;&nbsp;&nbsp;’<a href="http://www.domain1.com&#39;)" target="_blank" rel="noopener">http://www.domain1.com&#39;)</a>;<br>      &nbsp;&nbsp; }<br>   }, false);<br><code>&lt;/script&gt;</code></p></blockquote><h4 id="六、-跨域资源共享（CORS）"><a href="#六、-跨域资源共享（CORS）" class="headerlink" title="六、 跨域资源共享（CORS）"></a>六、 跨域资源共享（CORS）</h4><p>普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置。<br>带cookie请求：前后端都需要设置字段，另外需注意：所带cookie为跨域请求接口所在域的cookie，而非当前页。<br>目前，所有浏览器都支持该功能(IE8+：IE8/9需要使用XDomainRequest对象来支持CORS）)，CORS也已经成为主流的跨域解决方案。</p><p>一、前端设置：</p><p>1.原生ajax</p><blockquote><p>// 前端设置是否带cookie<br>xhr.withCredentials = true;  </p></blockquote><p>示例代码：  </p><blockquote><p>var xhr = new XMLHttpRequest(); // IE8/9需用window.XDomainRequest兼容  </p><p>// 前端设置是否带cookie<br>xhr.withCredentials = true;  </p><p>xhr.open(‘post’, ‘<a href="http://www.domain2.com:8080/login&#39;" target="_blank" rel="noopener">http://www.domain2.com:8080/login&#39;</a>, true);<br>xhr.setRequestHeader(‘Content-Type’, ‘application/x-www-form-urlencoded’);<br>xhr.send(‘user=admin’);  </p><p>xhr.onreadystatechange = function() {<br>&nbsp;&nbsp;    if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) {<br>&nbsp;&nbsp;&nbsp;&nbsp;        alert(xhr.responseText);<br>&nbsp;&nbsp;    }<br>};  </p></blockquote><p>2.jQuery ajax</p><blockquote><p>$.ajax({<br>&nbsp;&nbsp;    …<br>&nbsp;&nbsp;   xhrFields: {<br>&nbsp;&nbsp;&nbsp;&nbsp;       withCredentials: true    // 前端设置是否带cookie<br>&nbsp;&nbsp;   },<br>&nbsp;&nbsp;   crossDomain: true,   // 会让请求头中包含跨域的额外信息，但不会含cookie<br>&nbsp;&nbsp;    …<br>});  </p></blockquote><p>3.vue框架</p><p>在vue-resource封装的ajax组件中加入以下代码：</p><blockquote><p>Vue.http.options.credentials = true</p></blockquote><p>二、 服务端设置：</p><p>若后端设置成功，前端浏览器控制台则不会出现跨域报错信息，反之，说明没设成功。</p><p>1.）Java后台：</p><blockquote><p>/*</p><ul><li>导入包：import javax.servlet.http.HttpServletResponse;</li><li>接口参数中定义：HttpServletResponse response<br>*/<br>response.setHeader(“Access-Control-Allow-Origin”, “<a href="http://www.domain1.com&quot;)" target="_blank" rel="noopener">http://www.domain1.com&quot;)</a>;  // 若有端口需写全（协议+域名+端口）<br>response.setHeader(“Access-Control-Allow-Credentials”, “true”);</li></ul></blockquote><p>2.）Nodejs后台示例：</p><blockquote><p>var http = require(‘http’);<br>var server = http.createServer();<br>var qs = require(‘querystring’);  </p><p>server.on(‘request’, function(req, res) {<br>&nbsp;&nbsp;    var postData = ‘’;  </p><p>&nbsp;&nbsp;    // 数据块接收中<br>&nbsp;&nbsp;    req.addListener(‘data’, function(chunk) {<br>&nbsp;&nbsp;&nbsp;&nbsp;        postData += chunk;<br>&nbsp;&nbsp;    });  </p><p>&nbsp;&nbsp;    // 数据接收完毕<br>&nbsp;&nbsp;    req.addListener(‘end’, function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;        postData = qs.parse(postData);  </p><p>&nbsp;&nbsp;&nbsp;&nbsp;        // 跨域后台设置<br>&nbsp;&nbsp;&nbsp;&nbsp;        res.writeHead(200, {<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            ‘Access-Control-Allow-Credentials’: ‘true’,     // 后端允许发送Cookie<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            ‘Access-Control-Allow-Origin’: ‘<a href="http://www.domain1.com&#39;" target="_blank" rel="noopener">http://www.domain1.com&#39;</a>,    // 允许访问的域（协议+域名+端口）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            ‘Set-Cookie’: ‘l=a123456;Path=/;Domain=<a href="http://www.domain2.com;HttpOnly&#39;" target="_blank" rel="noopener">www.domain2.com;HttpOnly&#39;</a>   // HttpOnly:脚本无法读取cookie<br>&nbsp;&nbsp;&nbsp;&nbsp;        });  </p><p>&nbsp;&nbsp;        res.write(JSON.stringify(postData));<br>&nbsp;&nbsp;        res.end();<br>&nbsp;&nbsp;    });<br>});  </p><p>server.listen(‘8080’);<br>console.log(‘Server is running at port 8080…’);  </p></blockquote><h4 id="七、-nginx代理跨域"><a href="#七、-nginx代理跨域" class="headerlink" title="七、 nginx代理跨域"></a>七、 nginx代理跨域</h4><p>1、 nginx配置解决iconfont跨域</p><p>浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。</p><blockquote><p>location / {<br> add_header Access-Control-Allow-Origin *;<br>}</p></blockquote><p>2、 nginx反向代理接口跨域</p><p>跨域原理： 同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。</p><p>实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。</p><p>nginx具体配置：</p><blockquote><p>#proxy服务器<br>server {<br>   listen       81;<br>   server_name  <a href="http://www.domain1.com" target="_blank" rel="noopener">www.domain1.com</a>;<br>   location / {<br>       proxy_pass   <a href="http://www.domain2.com:8080" target="_blank" rel="noopener">http://www.domain2.com:8080</a>;  #反向代理<br>       proxy_cookie_domain <a href="http://www.domain2.com" target="_blank" rel="noopener">www.domain2.com</a> <a href="http://www.domain1.com" target="_blank" rel="noopener">www.domain1.com</a>; #修改cookie里域名<br>       index  index.html index.htm;<br>       当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用<br>       add_header Access-Control-Allow-Origin <a href="http://www.domain1.com" target="_blank" rel="noopener">http://www.domain1.com</a>;  #当前端只跨域不带cookie时，可为*<br>       add_header Access-Control-Allow-Credentials true;<br>   }<br>}</p></blockquote><p>1.前端代码示例：</p><blockquote><p>var xhr = new XMLHttpRequest();</p><p>// 前端开关：浏览器是否读写cookie<br>xhr.withCredentials = true;</p><p>// 访问nginx中的代理服务器<br>xhr.open(‘get’, ‘<a href="http://www.domain1.com:81/?user=admin&#39;" target="_blank" rel="noopener">http://www.domain1.com:81/?user=admin&#39;</a>, true);<br>xhr.send();</p></blockquote><ol><li>Nodejs后台示例：</li></ol><blockquote><p>var http = require(‘http’);<br>var qs = require(‘querystring’);<br>var server = http.createServer();  </p><p>server.on(‘request’, function(req, res) {<br>&nbsp;&nbsp;    var params = qs.parse(req.url.substring(2));  </p><p>&nbsp;&nbsp;    // 向前台写cookie<br>&nbsp;&nbsp;    res.writeHead(200, {<br>&nbsp;&nbsp;&nbsp;&nbsp;       ‘SetCookie’:’l=a123456;Path=/;Domain=<a href="http://www.domain2.com;HttpOnly&#39;" target="_blank" rel="noopener">www.domain2.com;HttpOnly&#39;</a>   // HttpOnly:脚本无法读取<br>&nbsp;&nbsp;    });  </p><p>&nbsp;&nbsp;    res.write(JSON.stringify(params));<br>&nbsp;&nbsp;    res.end();<br>});  </p><p>server.listen(‘8080’);<br>console.log(‘Server is running at port 8080…’);  </p></blockquote><h4 id="八、-Nodejs中间件代理跨域"><a href="#八、-Nodejs中间件代理跨域" class="headerlink" title="八、 Nodejs中间件代理跨域"></a>八、 Nodejs中间件代理跨域</h4><p>node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发。</p><p>一、 非vue框架的跨域（2次跨域）</p><p>利用node + express + http-proxy-middleware搭建一个proxy服务器。</p><p>1.前端代码示例：</p><blockquote><p>var xhr = new XMLHttpRequest();</p><p>// 前端开关：浏览器是否读写cookie<br>xhr.withCredentials = true;</p><p>// 访问http-proxy-middleware代理服务器<br>xhr.open(‘get’, ‘<a href="http://www.domain1.com:3000/login?user=admin&#39;" target="_blank" rel="noopener">http://www.domain1.com:3000/login?user=admin&#39;</a>, true);<br>xhr.send();</p></blockquote><p>2.中间件服务器：</p><blockquote><p>var express = require(‘express’);<br>var proxy = require(‘http-proxy-middleware’);<br>var app = express();  </p><p>app.use(‘/‘, proxy({<br>&nbsp;&nbsp;    // 代理跨域目标接口<br>&nbsp;&nbsp;    target: ‘<a href="http://www.domain2.com:8080&#39;" target="_blank" rel="noopener">http://www.domain2.com:8080&#39;</a>,<br>&nbsp;&nbsp;    changeOrigin: true,  </p><p>&nbsp;&nbsp;    // 修改响应头信息，实现跨域并允许带cookie<br>&nbsp;&nbsp;   onProxyRes: function(proxyRes, req, res) {<br>&nbsp;&nbsp;&nbsp;&nbsp;        res.header(‘Access-Control-Allow-Origin’, ‘<a href="http://www.domain1.com&#39;)" target="_blank" rel="noopener">http://www.domain1.com&#39;)</a>;<br>&nbsp;&nbsp;&nbsp;&nbsp;       res.header(‘Access-Control-Allow-Credentials’, ‘true’);<br>&nbsp;&nbsp;    },  </p><p>&nbsp;&nbsp;    // 修改响应信息中的cookie域名<br>&nbsp;&nbsp;    cookieDomainRewrite: ‘<a href="http://www.domain1.com&#39;" target="_blank" rel="noopener">www.domain1.com&#39;</a>  // 可以为false，表示不修改<br>}));  </p><p>app.listen(3000);<br>console.log(‘Proxy server is listen at port 3000…’);  </p></blockquote><p>3.Nodejs后台同（六：nginx）</p><p>二、 vue框架的跨域（1次跨域）</p><p>利用node + webpack + webpack-dev-server代理接口跨域。在开发环境下，由于vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域，无须设置headers跨域信息了。</p><p>webpack.config.js部分配置：</p><blockquote><p>module.exports = {<br>&nbsp;&nbsp;    entry: {},<br>&nbsp;&nbsp;    module: {},<br>&nbsp;&nbsp;    …<br>&nbsp;&nbsp;    devServer: {<br>&nbsp;&nbsp;&nbsp;&nbsp;        historyApiFallback: true,<br>&nbsp;&nbsp;&nbsp;&nbsp;        proxy: [{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            context: ‘/login’,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            target: ‘<a href="http://www.domain2.com:8080&#39;" target="_blank" rel="noopener">http://www.domain2.com:8080&#39;</a>,  // 代理跨域目标接口<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            changeOrigin: true,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;            cookieDomainRewrite: ‘<a href="http://www.domain1.com&#39;" target="_blank" rel="noopener">www.domain1.com&#39;</a>  // 可以为false，表示不修改<br>&nbsp;&nbsp;&nbsp;&nbsp;        }],<br>&nbsp;&nbsp;        noInfo: true<br>&nbsp;&nbsp;    }<br>}</p></blockquote><h4 id="九、-WebSocket协议跨域"><a href="#九、-WebSocket协议跨域" class="headerlink" title="九、 WebSocket协议跨域"></a>九、 WebSocket协议跨域</h4><p>WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。<br>原生WebSocket API使用起来不太方便，我们使用Socket.io，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。</p><p>1.前端代码：</p><blockquote><p><code>&lt;div&gt;user input：&lt;input type=&quot;text&quot;&gt;&lt;/div&gt;</code>  </p><p><code>&lt;script src=&quot;./socket.io.js&quot;&lt;/script&gt;</code><br>var socket = io(‘<a href="http://www.domain2.com:8080&#39;)" target="_blank" rel="noopener">http://www.domain2.com:8080&#39;)</a>;<br>// 连接成功处理<br>socket.on(‘connect’, function() {<br>&nbsp;&nbsp;    // 监听服务端消息<br>&nbsp;&nbsp;    socket.on(‘message’, function(msg) {<br>&nbsp;&nbsp;&nbsp;&nbsp;       console.log(‘data from server: —&gt; ‘ + msg);<br>&nbsp;&nbsp;    });<br>&nbsp;&nbsp;   // 监听服务端关闭<br>&nbsp;&nbsp;    socket.on(‘disconnect’, function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;        console.log(‘Server socket has closed.’);<br>&nbsp;&nbsp;    });<br>});<br>document.getElementsByTagName(‘input’)[0].onblur =   function() {<br>&nbsp;&nbsp;    socket.send(this.value);<br>};<br>2.Nodejs socket后台：</p></blockquote><blockquote><p>var http = require(‘http’);<br>var socket = require(‘socket.io’);<br>// 启http服务</p><p>var server = http.createServer(function(req, res) {<br>&nbsp;&nbsp;    res.writeHead(200, {<br>&nbsp;&nbsp;&nbsp;&nbsp;        ‘Content-type’: ‘text/html’<br>&nbsp;&nbsp;    });<br>&nbsp;&nbsp;    res.end();<br>});  </p><p>server.listen(‘8080’);<br>console.log(‘Server is running at port 8080…’);  </p><p>// 监听socket连接<br>socket.listen(server).on(‘connection’, function(client) {<br>&nbsp;&nbsp;    // 接收信息<br>&nbsp;&nbsp;    client.on(‘message’, function(msg) {<br>&nbsp;&nbsp;&nbsp;&nbsp;        client.send(‘hello：’ + sg);<br>&nbsp;&nbsp;&nbsp;&nbsp;        console.log(‘data from client: —&gt; ‘ + msg);<br>&nbsp;&nbsp;    });  </p><p>&nbsp;&nbsp;    // 断开处理<br>&nbsp;&nbsp;    client.on(‘disconnect’, function() {<br>&nbsp;&nbsp;&nbsp;&nbsp;        console.log(‘Client socket has closed.’);<br>&nbsp;&nbsp;    });<br>});</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习下跨域&lt;/p&gt;
    
    </summary>
    
      <category term="Web前端" scheme="xumenghao.top/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="xumenghao.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="跨域" scheme="xumenghao.top/tags/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="postmessage" scheme="xumenghao.top/tags/postmessage/"/>
    
  </entry>
  
  <entry>
    <title>不重视睡眠，谈什么健康？</title>
    <link href="xumenghao.top//posts/4a17b159/"/>
    <id>xumenghao.top//posts/4a17b159/</id>
    <published>2018-03-22T06:19:57.553Z</published>
    <updated>2018-04-10T05:38:01.955Z</updated>
    
    <content type="html"><![CDATA[<p>早睡早起精神好！</p><a id="more"></a><p><code>James Xu - 中南海保安发来报道</code></p><p>&nbsp;&nbsp;一个公认的事实是，现在人们越来越重视健康了，所以相关行业蓬勃发展。但事实也证明，许多人尽管重视健康，却不知道如何实现健康的目的，一边定期体检、做疾病筛查，购买健康保险，定期健身，按卡路里和营养搭配三餐，一边却连某些基本的健康法则都很难做到，比如养成良好的作息习惯，保证充足睡眠。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://mpic.tiankong.com/4ca/d82/4cad82fca4ddb855da1169593add9bdd/640.jpg@670w" alt="玩手机，从小孩子抓起。。。" title="">                </div>                <div class="image-caption">玩手机，从小孩子抓起。。。</div>            </figure><p>&nbsp;&nbsp;3月21日是第18个世界睡眠日，今年的主题为“规律作息，健康睡眠”。一项针对全国20多个省（区市）的《2018年中国的90后年轻人睡眠指数研究》显示，90后的睡眠均值为66.26（满分为100），普遍睡眠不佳，31.1%的人晚睡晚起，能保持早睡早起作息的只占17.5%，接近1/3的人上午9点后起床。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://mpic.tiankong.com/c42/77a/c4277a70b61de213958d8021800f9262/640.jpg@300h" alt="早睡早起很难吗" title="">                </div>                <div class="image-caption">早睡早起很难吗</div>            </figure></p><p>&nbsp;&nbsp;超过80%的90后不能早睡早起，当然不排除一些人是受工作性质所迫，但身边的无数案例告诉我们，至少有很大一部分人是耽于玩乐，舍不得早睡，自然也就很难早起了。玩乐者，有的是捧着手机对着电脑“独乐乐”，有的是跟朋友一起“众乐乐”，无论哪一种，恐怕都没有非熬夜不可的必要性，只是习惯了，缺乏足够动力去调整生物钟。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://mpic.tiankong.com/4cc/7f0/4cc7f08e75dffa686cf1506715ab857a/640.jpg@300h" alt="工作学习导致不能早睡？" title="">                </div>                <div class="image-caption">工作学习导致不能早睡？</div>            </figure><p>&nbsp;&nbsp;有人从“年轻时拿命换钱，年老时拿钱换命”这句俗语中看出了年轻人轻忽健康的某种历史经验，以为“都是这么过来的”，这实在是一种错误的经验主义。须知今天的年轻人跟过去的相比，可玩的多了，夜生活多了，运动得少了，生活习惯从整体来看更加不利于健康，现在的青少年儿童近视率高发、身体素质下降，小小年纪得颈椎病、三高，这些都是过去的孩子所没有的。比如，80后就不像90后、00后，在十几岁时大多没有熬夜刷手机的经历，作息时间和视力没有经历过严重“摧残”，“过来人”的经验，有些已经不适用于年轻人了，仅从健康角度来说，等90后、00后步入中年，可能会面临与今天的中年人不同的健康问题和风险。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://mpic.tiankong.com/10f/135/10f135fe1c4667b02bd2fd6314663d05/640.jpg@300h" alt="玩手机时间长有害视力" title="">                </div>                <div class="image-caption">玩手机时间长有害视力</div>            </figure><p>&nbsp;&nbsp;科学研究结果表明，长期缺乏优质睡眠会导致抑郁、焦虑，记忆力下降等等，危害不比忽视疾病筛查、定期体检等等来得小。当今世界上有不少呼吁疾病筛查、关注XX健康的公益项目，当然都很有价值，但对许多人特别是广大网友来说，呼吁“规律作息，健康睡眠”的意义可能更为直接迫切。要真的重视健康，就不能对睡眠这件大事视而不见，否则就别奢谈养生、健身、治未病，因为那跟“可乐加枸杞”“啤酒泡党参”一样，只能是个笑话。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;早睡早起精神好！&lt;/p&gt;
    
    </summary>
    
      <category term="健康" scheme="xumenghao.top/categories/%E5%81%A5%E5%BA%B7/"/>
    
    
      <category term="睡眠" scheme="xumenghao.top/tags/%E7%9D%A1%E7%9C%A0/"/>
    
      <category term="健康" scheme="xumenghao.top/tags/%E5%81%A5%E5%BA%B7/"/>
    
  </entry>
  
  <entry>
    <title>“月薪2万”为何招不到工人？</title>
    <link href="xumenghao.top//posts/4a17b158/"/>
    <id>xumenghao.top//posts/4a17b158/</id>
    <published>2018-03-22T06:19:57.540Z</published>
    <updated>2018-04-10T05:38:33.503Z</updated>
    
    <content type="html"><![CDATA[<p>近几日，一篇题为《活久见！月薪2万！广州老板当街大排长龙任人选！90后却不愿干》的文章引发热议。说的是广州开春“招工难”，招工者多，应征者少，甚至有制衣厂老板开出月薪2万的报酬，居然还谈不拢。“月薪2万招不到工人”，这是怎么回事？“用工荒”的真相，到底是什么？</p><a id="more"></a><p><code>James Xu - 中南海保安发来报道</code></p><blockquote><ul><li>老板和工人们陷入了互相算计的囚徒困境——年轻的工人非高薪就不去干活，就算干活也给你磨洋工；而老板的策略就是计件工资，干多少给多少，认为《劳动合同法》过于偏帮劳动者，那就用“高薪”骗你进来，利用《劳动法》执行不严强迫员工加班。  </li><li>工厂里发生的事情，在“高大上”的IT行业也在上演。两者非常类似，相互比较，有助于让都市白领和工人群体深入理解对方。  </li><li>工厂里发生的事情，在“高大上”的IT行业也在上演。两者非常类似，相互比较，有助于让都市白领和工人群体深入理解对方。</li></ul></blockquote><h4 id="“月薪2万”是老板的画饼术，但这种画并不是没有理由"><a href="#“月薪2万”是老板的画饼术，但这种画并不是没有理由" class="headerlink" title="“月薪2万”是老板的画饼术，但这种画并不是没有理由"></a>“月薪2万”是老板的画饼术，但这种画并不是没有理由</h4><hr><p>“月薪2万，90后却不愿干”，这个标题实在太扎眼，毕竟，月薪2万对于一线城市的白领阶层来说，也不能说算少，何况是工厂的工人。于是，读者们纷纷去看文章中的“月薪2万”到底是怎么回事。果然一看很多人就觉得有问题，原文说的是，“‘四线工做一件短袖T恤可以拿到1元，以前是0.8元，还是不满意’，一名揾工者仔细看过姚女士手中的衣服后，价钱没谈拢，默默走开了。老板娘透露，一名熟练的四线工一个月工资能轻松破万，‘厂里雇用的一个靓仔，一天可以做700多件衣服，一个月可拿到2万元’。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img1.gtimg.com/ninja/1/2018/03/ninja152141988191876.jpeg" alt="元宵节过后，广州海珠区的招工者们" title="">                </div>                <div class="image-caption">元宵节过后，广州海珠区的招工者们</div>            </figure><p>&nbsp;&nbsp;显然，这2万元不是固定工资，而是计件工资，就算是熟手，一天700多件，显然也会累得够呛，而且通过简单的算术就可以知道，“一个月可拿到2万元”的前提是几乎整月无休。难怪一条高赞的网友评论是这么说的，“要么是计件，要么是提成，招人时所谓的高薪都是画的饼。无责任底薪2万招工人试试？”</p><p>&nbsp;&nbsp;还有网友在留言中展示了对老板们更为激烈的态度——“还上万？现在招人的时候特别是工厂，说得天花乱坠，什么五六千的工资，你知道他怎么算的吗？按照一个熟练工，老员工两班倒，再加上你扣除的五险，和它给你缴的五险等等，全部算下来有这么多，这是你累死累活换来的，到手也就4000出头，知道为什么工厂不好招人吗？那是因为工厂不把操作工当人！知道为什么工厂不把人当人吗？那是因为管理层认为中国什么都缺，就不缺人，20岁的招不到我找30的，30的招不到招40的，大学的招不到招高中的，高中的招不到招初中的，没有底线。”</p><p>&nbsp;&nbsp;站在工人一方的网友们的看法，显然与老板们的视角不一样。在老板们看来，“招工难”的原因，是因为现在的年轻人不爱吃苦，嫌累，不像他们的父辈，尤其是第一代进城农民工那么吃苦耐劳。而且认为现在的年轻人也不愿意磨练技术，技校的教育水平差，进厂了也只是为了见见世面，甚至谈恋爱，没有一直在工厂待下去的决心。</p><p>&nbsp;&nbsp;近期一篇流传广泛的解读文章，尤其戳中了老板的内心——“90后的农村员工，绝大多数是喝可乐、吃麦当劳长大的，刚刚出来工作的时候，就遇到新《劳动合同法》的强力保护，根本不关心企业的难处。90后员工只会和老板儿子比生活待遇，然后产生怨恨心态。”言下之意，老板们搞一堆逼你加班还克扣工资的门门道道，也是被逼的，有理由的。非此治不了这些90后员工。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img1.gtimg.com/ninja/1/2018/03/ninja152141993078370.jpg" alt="新一代的农民工，不像老一辈那么爱吃苦，他们有自己的生活" title="">                </div>                <div class="image-caption">新一代的农民工，不像老一辈那么爱吃苦，他们有自己的生活</div>            </figure><p>&nbsp;&nbsp;然而说老实话，谁愿意吃苦受累了？挑轻松的活干，这是人之常情，而像第一代农民工那么爱吃苦，反而是特殊年代的特殊状态，“他们上有老下有小，不敢歇，也不敢闹，他们拼命干活的动力是子女绝不再进厂当工人，能够改变家族命运。”指望90后农民工继续那么吃苦耐劳，既不现实，也不公平。而且，只要工人这个职业依然难以发固定薪资，发五险一金，依然称不上体面，各种职校、技校就依然处于鄙视链的底端，生源、教育水平就上不来，因此陷入恶性循环。指望像德国那样70%的年轻人上技校？不好意思，别人读完技校出来后都是高级技工，是拿高薪的体面人。</p><p>&nbsp;&nbsp;所以，老板和工人们就陷入了互相算计的囚徒困境——年轻的工人非高薪就不去干活，就算干活也给你磨洋工；而老板的策略就是计件工资，干多少给多少，认为《劳动合同法》过于偏帮劳动者，那就用“高薪”骗你进来，利用《劳动法》执行不严强迫员工加班。互相怨恨，从而陷入死循环。“用工荒”很大程度上就是这么来的。</p><h4 id="IT界的“996”工作制，与“用工荒”产生的原因很类似"><a href="#IT界的“996”工作制，与“用工荒”产生的原因很类似" class="headerlink" title="IT界的“996”工作制，与“用工荒”产生的原因很类似"></a>IT界的“996”工作制，与“用工荒”产生的原因很类似</h4><hr><p>&nbsp;&nbsp;工厂里发生的事情，在“高大上”的IT行业也在上演。两者非常类似，相互比较，有助于让都市白领和工人群体深入理解对方。</p><p>&nbsp;&nbsp;一线、二线城市的许多知名IT企业，发生的事情叫做“996”。即“早上9点上班，晚9点下班，一周上6天班”，刨去每天的2小时午饭休息时间，相当于每周工作60小时，比劳动法规定的40小时要高出50%。通常，公司在创业阶段，或者陷入激烈同业竞争，强调“狼性”的时候就会执行“996”。如此高强度的工作，让很多程序员叫苦不迭，最让人抱怨的是，“996”让人失去了自己的生活，全部身心都投入到了工作上。唯一的安慰，大概只有那不菲的报酬，或许还有加班工资。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img1.gtimg.com/ninja/1/2018/03/ninja152141996156400.png" alt="996”工作制让很多IT从业人员感到痛苦" title="">                </div>                <div class="image-caption">996”工作制让很多IT从业人员感到痛苦</div>            </figure><p>&nbsp;&nbsp;问题来了，为什么以有钱、高薪著称的IT行业，不把薪水调低些，多招些人，而非得以高薪强迫员工“996”呢？</p><p>&nbsp;&nbsp;有很多具体原因。比如若调低薪水，那么根本招不来人才——在“成功狂热”泛滥的当下，很多人就是宁可累成狗也不愿意低薪，因为高薪有太多的意义，意味着行业的认可，意味未来的前景，在整个行业氛围熏陶下，人们只能被动接受“高付出才能有高薪”；又比如行业传染，别人的公司搞996效果不错，那我也学学，于是“狼性”被很多创业企业老板挂在嘴边，而996这种氛围，一旦形成了，很少人有敢按时下班的勇气，就是没事也得熬到9点以后。</p><p>&nbsp;&nbsp;事实上，对于很多老板来说，之所以信奉“996”，其实还是认为只有让员工疯狂加班，才能对得起那份高薪，而如果让员工8小时下班，那么员工肯定会磨洋工不给你好好出力，多招一些人，只会变成多招一些懒汉。所以，在员工看来是“一个人拿两个人的钱干三个人的事”，而在一些老板眼里成为理所当然，在他们看来，这是让少部分精英充分投入干活，效率更高。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img1.gtimg.com/ninja/1/2018/03/ninja152141999667275.jpg" alt="对“狼性文化”的推崇在企业家之间很流行" title="">                </div>                <div class="image-caption">对“狼性文化”的推崇在企业家之间很流行</div>            </figure><p>&nbsp;&nbsp;老板们的看法并不是毫无道理，之前就有一些国外的调查显示，包括中国在内的东亚人工作时间虽长，但敬业程度，即工作的投入程度并不高。解决之道就是强迫员工加班，而很多员工的对应之道就是消极怠工。从而陷入恶性循环。</p><h4 id="现状不可持续，让员工都能成为“体面人”才能让企业长久地发展"><a href="#现状不可持续，让员工都能成为“体面人”才能让企业长久地发展" class="headerlink" title="现状不可持续，让员工都能成为“体面人”才能让企业长久地发展"></a>现状不可持续，让员工都能成为“体面人”才能让企业长久地发展</h4><hr><p>&nbsp;&nbsp;老板员工们互相算计，陷入囚徒困境，这显然是一种非常糟糕的局面。长此以往，“用工荒”不仅会阻碍社会经济发展，也会阻碍产业升级——熟练工人大量缺乏，职校技校培训水平低，没人看得上眼。年轻人嫌工作无尊严，收入不稳定，总之不体面，即便是农民工二代，也会质疑为啥要继续做这一行，因此许多年轻人纷纷转型做销售、人事等岗位，至少比工人体面。</p><p>&nbsp;&nbsp;这对于IT行业也一样，一旦IT业的发展红利减弱，饼不能越做越大了，就会有越来越多的人质疑为何还要“996”——目前实行“996”工作制的企业，名声已经很不好，但IT企业一旦放弃加班，其竞争力是否会被传统行业跟上呢？不管怎么说，畸形的加班制度只会加剧人心的怨恨，这注定是不能持续的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img1.gtimg.com/ninja/1/2018/03/ninja152142004282363.jpeg" alt="德国的产业工人。让工人阶层更加“体面”，非常重要" title="">                </div>                <div class="image-caption">德国的产业工人。让工人阶层更加“体面”，非常重要</div>            </figure><p>&nbsp;&nbsp;解决问题的方式，只能是促进整个社会产生共识，加强劳资协商机制，让企业的员工都能成为“体面人”。何谓体面？不用太苦太累，能够每周放两天假，有不错的收入，还有足够的社会保障，即便是“厂弟”、“厂妹”，也会感觉到体面。</p><p>&nbsp;&nbsp;如何做到这一点？确实不容易实现。但一些路径是存在的，比如在严格执行劳动法的基础上，一定程度调整劳动合同法，让资方和劳方的权益都更加受到保障。对此，一些相关的机构该采取切实行动了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近几日，一篇题为《活久见！月薪2万！广州老板当街大排长龙任人选！90后却不愿干》的文章引发热议。说的是广州开春“招工难”，招工者多，应征者少，甚至有制衣厂老板开出月薪2万的报酬，居然还谈不拢。“月薪2万招不到工人”，这是怎么回事？“用工荒”的真相，到底是什么？&lt;/p&gt;
    
    </summary>
    
      <category term="社会" scheme="xumenghao.top/categories/%E7%A4%BE%E4%BC%9A/"/>
    
    
      <category term="话题" scheme="xumenghao.top/tags/%E8%AF%9D%E9%A2%98/"/>
    
      <category term="招工" scheme="xumenghao.top/tags/%E6%8B%9B%E5%B7%A5/"/>
    
      <category term="高薪" scheme="xumenghao.top/tags/%E9%AB%98%E8%96%AA/"/>
    
      <category term="社会" scheme="xumenghao.top/tags/%E7%A4%BE%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="xumenghao.top//posts/4a17b156/"/>
    <id>xumenghao.top//posts/4a17b156/</id>
    <published>2018-03-22T03:58:27.331Z</published>
    <updated>2018-03-22T06:46:18.109Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从输入url到页面展示到底发生了什么</title>
    <link href="xumenghao.top//posts/4a17b160/"/>
    <id>xumenghao.top//posts/4a17b160/</id>
    <published>2018-03-21T02:13:49.000Z</published>
    <updated>2018-04-10T02:47:58.169Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器解析url的过程</p><a id="more"></a><p><code>James Xu - 中南海保安发来报道</code>  </p><p>阅读目录</p><blockquote><p>1、输入地址<br>2、浏览器查找域名的 IP 地址<br>3、浏览器向 web 服务器发送一个 HTTP 请求<br>4、服务器的永久重定向响应<br>5、浏览器跟踪重定向地址<br>6、服务器处理请求<br>7、服务器返回一个 HTTP 响应  　<br>8、浏览器显示 HTML<br>9、浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）</p></blockquote><p>&nbsp;&nbsp;刚开始写这篇文章还是挺纠结的，因为网上搜索“从输入url到页面展示到底发生了什么”，你可以搜到一大堆的资料。而且面试这道题基本是必考题，二月份面试的时候，虽然知道这个过程发生了什么，不过当面试官一步步追问下去的，很多细节就不太清楚了。  </p><p>&nbsp;&nbsp;最近刚好也在看http协议相关的东西，所以想对这个话题来个深入的总结，本文的目的是通过输入url之后发生的事情来做知识的总结和扩展。所以文章可能会很杂。  </p><p>总的过程大概如下:</p><h4 id="1、输入地址"><a href="#1、输入地址" class="headerlink" title="1、输入地址"></a>1、输入地址</h4><hr><p>&nbsp;&nbsp;当我们开始在浏览器中输入网址的时候，浏览器其实就已经在智能的匹配可能得 url 了，他会从历史记录，书签等地方，找到已经输入的字符串可能对应的 url，然后给出智能提示，让你可以补全url地址。对于 google的chrome 的浏览器，他甚至会直接从缓存中把网页展示出来，就是说，你还没有按下 enter，页面就出来了。</p><h4 id="2、浏览器查找域名的-IP-地址"><a href="#2、浏览器查找域名的-IP-地址" class="headerlink" title="2、浏览器查找域名的 IP 地址　"></a>2、浏览器查找域名的 IP 地址　</h4><hr><p>1、请求一旦发起，浏览器首先要做的事情就是解析这个域名，一般来说，浏览器会首先查看本地硬盘的 hosts 文件，看看其中有没有和这个域名对应的规则，如果有的话就直接使用 hosts 文件里面的 ip 地址。  </p><p>2、如果在本地的 hosts 文件没有能够找到对应的 ip 地址，浏览器会发出一个 DNS请求到本地DNS服务器 。本地DNS服务器一般都是你的网络接入服务器商提供，比如中国电信，中国移动。  </p><p>3、查询你输入的网址的DNS请求到达本地DNS服务器之后，本地DNS服务器会首先查询它的缓存记录，如果缓存中有此条记录，就可以直接返回结果，此过程是递归的方式进行查询。如果没有，本地DNS服务器还要向DNS根服务器进行查询。  </p><p>4、根DNS服务器没有记录具体的域名和IP地址的对应关系，而是告诉本地DNS服务器，你可以到域服务器上去继续查询，并给出域服务器的地址。这种过程是迭代的过程。  </p><p>5、本地DNS服务器继续向域服务器发出请求，在这个例子中，请求的对象是.com域服务器。.com域服务器收到请求之后，也不会直接返回域名和IP地址的对应关系，而是告诉本地DNS服务器，你的域名的解析服务器的地址。</p><p>6、最后，本地DNS服务器向域名的解析服务器发出请求，这时就能收到一个域名和IP地址对应关系，本地DNS服务器不仅要把IP地址返回给用户电脑，还要把这个对应关系保存在缓存中，以备下次别的用户查询时，可以直接返回结果，加快网络访问。  </p><p>下面这张图很完美的解释了这一过程： </p><h5 id="知识扩展："><a href="#知识扩展：" class="headerlink" title="知识扩展："></a>知识扩展：</h5><blockquote><p>1、什么是DNS？</p></blockquote><p>&nbsp;&nbsp;DNS（Domain Name System，域名系统），因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。</p><p>&nbsp;&nbsp;通俗的讲，我们更习惯于记住一个网站的名字，比如<code>www.baidu.com</code>,而不是记住它的ip地址，比如：167.23.10.2。而计算机更擅长记住网站的ip地址，而不是像<code>www.baidu.com</code>等链接。因为，DNS就相当于一个电话本，比如你要找<code>www.baidu.com</code>这个域名，那我翻一翻我的电话本，我就知道，哦，它的电话（ip）是167.23.10.2。</p><blockquote><p>2、DNS查询的两种方式：递归查询和迭代查询</p></blockquote><p>1、递归解析</p><p> &nbsp;&nbsp;当局部DNS服务器自己不能回答客户机的DNS查询时，它就需要向其他DNS服务器进行查询。此时有两种方式，如图所示的是递归方式。局部DNS服务器自己负责向其他DNS服务器进行查询，一般是先向该域名的根域服务器查询，再由根域名服务器一级级向下查询。最后得到的查询结果返回给局部DNS服务器，再由局部DNS服务器返回给客户端。</p><p>2、迭代解析</p><p>&nbsp;&nbsp;当局部DNS服务器自己不能回答客户机的DNS查询时，也可以通过迭代查询的方式进行解析，如图所示。局部DNS服务器不是自己向其他DNS服务器进行查询，而是把能解析该域名的其他DNS服务器的IP地址返回给客户端DNS程序，客户端DNS程序再继续向这些DNS服务器进行查询，直到得到查询结果为止。也就是说，迭代解析只是帮你找到相关的服务器而已，而不会帮你去查。比如说：baidu.com的服务器ip地址在192.168.4.5这里，你自己去查吧，本人比较忙，只能帮你到这里了。</p><blockquote><p>3、DNS域名称空间的组织方式</p></blockquote><p> 我们在前面有说到根DNS服务器，域DNS服务器，这些都是DNS域名称空间的组织方式。按其功能命名空间中用来描述 DNS 域名称的五个类别的介绍详见下表中，以及与每个名称类型的示例</p><p>（盗图）</p><blockquote><p>4、DNS负载均衡</p></blockquote><p>当一个网站有足够多的用户的时候，假如每次请求的资源都位于同一台机器上面，那么这台机器随时可能会蹦掉。处理办法就是用DNS负载均衡技术，它的原理是在DNS服务器中为同一个主机名配置多个IP地址,在应答DNS查询时,DNS服务器对每个查询将以DNS文件中主机记录的IP地址按顺序返回不同的解析结果,将客户端的访问引导到不同的机器上去,使得不同的客户端访问不同的服务器,从而达到负载均衡的目的｡例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等。</p><h4 id="3、浏览器向-web-服务器发送一个-HTTP-请求"><a href="#3、浏览器向-web-服务器发送一个-HTTP-请求" class="headerlink" title="3、浏览器向 web 服务器发送一个 HTTP 请求"></a>3、浏览器向 web 服务器发送一个 HTTP 请求</h4><hr><p>&nbsp;&nbsp;拿到域名对应的IP地址之后，浏览器会以一个随机端口（1024&lt;端口&lt;65535）向服务器的WEB程序（常用的有httpd,nginx等）80端口发起TCP的连接请求。这个连接请求到达服务器端后（这中间通过各种路由设备，局域网内除外），进入到网卡，然后是进入到内核的TCP/IP协议栈（用于识别该连接请求，解封包，一层一层的剥开），还有可能要经过Netfilter防火墙（属于内核的模块）的过滤，最终到达WEB程序，最终建立了TCP/IP的连接。</p><p>TCP连接如图所示:</p><p>&nbsp;&nbsp;建立了TCP连接之后，发起一个http请求。一个典型的 http request header 一般需要包括请求的方法，例如 GET 或者 POST 等，不常用的还有 PUT 和 DELETE 、HEAD、OPTION以及 TRACE 方法，一般的浏览器只能发起 GET 或者 POST 请求。</p><p>客户端向服务器发起http请求的时候，会有一些请求信息，请求信息包含三 个部分：</p><blockquote><p>请求方法URI协议/版本  </p><p>请求头(Request Header)  </p><p>请求正文：  </p></blockquote><p>下面是一个完整的HTTP请求例子：  </p><blockquote><p>GET/sample.jsp<br>HTTP/1.1   Accept:image/gif.image/jpeg,<em>/</em><br>Accept-Language:zh-cn<br>Connection:Keep-Alive<br>Host:localhost<br>User-Agent:Mozila/4.0(compatible;MSIE5.01;Window NT5.0)<br>Accept-Encoding:gzip,deflate  </p><p>username=JamesXu&amp;password=1234  </p></blockquote><p>&nbsp;&nbsp;注意：最后一个请求头之后是一个空行，发送回车符和换行符，通知服务器以下不再有请求头。</p><p>（1）请求的第一行是“方法URL议/版本”：GET/sample.jsp HTTP/1.1<br>（2）请求头(Request Header)</p><p>请求头包含许多有关的客户端环境和请求正文的有用信息。例如，请求头可以声明浏览器所用的语言，请求正文的长度等。</p><blockquote><p>Accept:image/gif.image/jpeg.<em>/</em><br>Accept-Language:zh-cn<br>Connection:Keep-Alive<br>Host:localhost<br>User-Agent:Mozila/4.0(compatible:MSIE5.01:Windows NT5.0)<br>Accept-Encoding:gzip,deflate.  </p></blockquote><p>（3）请求正文</p><p>&nbsp;&nbsp;请求头和请求正文之间是一个空行，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。请求正文中可以包含客户提交的查询字符串信息：</p><p><code>username=jinqiao&amp;password=1234</code></p><h5 id="知识扩展：-1"><a href="#知识扩展：-1" class="headerlink" title="知识扩展："></a>知识扩展：</h5><p>1）TCP三次握手</p><p>&nbsp;&nbsp;第一次握手：客户端A将标志位SYN置为1,随机产生一个值为seq=J（J的取值范围为=1234567）的数据包到服务器，客户端A进入SYN_SENT状态，等待服务端B确认；</p><p>&nbsp;&nbsp;第二次握手：服务端B收到数据包后由标志位SYN=1知道客户端A请求建立连接，服务端B将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给客户端A以确认连接请求，服务端B进入SYN_RCVD状态。</p><p>&nbsp;&nbsp;第三次握手：客户端A收到确认后，检查ack是否为J+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给服务端B，服务端B检查ack是否为K+1，ACK是否为1，如果正确则连接建立成功，客户端A和服务端B进入ESTABLISHED状态，完成三次握手，随后客户端A与服务端B之间可以开始传输数据了。</p><p>如图所示：</p><p>2）为什需要三次握手？</p><p>&nbsp;&nbsp;《计算机网络》第四版中讲“三次握手”的目的是“为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误”  </p><p>&nbsp;&nbsp;书中的例子是这样的，“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接</p><p>&nbsp;&nbsp;假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”。主要目的防止server端一直等待，浪费资源。</p><p>3）TCP四次挥手</p><p>&nbsp;&nbsp;第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。</p><p>&nbsp;&nbsp;第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。</p><p>&nbsp;&nbsp;第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。</p><p>&nbsp;&nbsp;第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</p><p>4）为什么建立连接是三次握手，而关闭连接却是四次挥手呢？</p><p>&nbsp;&nbsp;这是因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方也未必全部数据都发送给对方了，所以己方可以立即close，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送。</p><h4 id="4、服务器的永久重定向响应"><a href="#4、服务器的永久重定向响应" class="headerlink" title="4、服务器的永久重定向响应"></a>4、服务器的永久重定向响应</h4><hr><p>&nbsp;&nbsp;服务器给浏览器响应一个301永久重定向响应，这样浏览器就会访问<code>http://www.google.com/</code> 而非<code>http://google.com/</code>。</p><p>&nbsp;&nbsp;为什么服务器一定要重定向而不是直接发送用户想看的网页内容呢？其中一个原因跟搜索引擎排名有关。如果一个页面有两个地址，就像<code>http://www.yy.com/和http://yy.com/</code>，搜索引擎会认为它们是两个网站，结果造成每个搜索链接都减少从而降低排名。而搜索引擎知道301永久重定向是什么意思，这样就会把访问带www的和不带www的地址归到同一个网站排名下。还有就是用不同的地址会造成缓存友好性变差，当一个页面有好几个名字时，它可能会在缓存里出现好几次。</p><h5 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h5><p>1）301和302的区别。</p><p>&nbsp;&nbsp;301和302状态码都表示重定向，就是说浏览器在拿到服务器返回的这个状态码后会自动跳转到一个新的URL地址，这个地址可以从响应的Location首部中获取（用户看到的效果就是他输入的地址A瞬间变成了另一个地址B）——这是它们的共同点。</p><p>&nbsp;&nbsp;他们的不同在于。301表示旧地址A的资源已经被永久地移除了（这个资源不可访问了），搜索引擎在抓取新内容的同时也将旧的网址交换为重定向之后的网址；</p><p>&nbsp;&nbsp;302表示旧地址A的资源还在（仍然可以访问），这个重定向只是临时地从旧地址A跳转到地址B，搜索引擎会抓取新的内容而保存旧的网址。 SEO302好于301</p><p>2）重定向原因：  </p><p>（1）网站调整（如改变网页目录结构）；<br>（2）网页被移到一个新地址；<br>（3）网页扩展名改变(如应用需要把.php改成.Html或.shtml)。  </p><p>&nbsp;&nbsp;这种情况下，如果不做重定向，则用户收藏夹或搜索引擎数据库中旧地址只能让访问客户得到一个404页面错误信息，访问流量白白丧失；再者某些注册了多个域名的网站，也需要通过重定向让访问这些域名的用户自动跳转到主站点等。</p><p>3）什么时候进行301或者302跳转呢？</p><p>&nbsp;&nbsp;当一个网站或者网页24—48小时内临时移动到一个新的位置，这时候就要进行302跳转，而使用301跳转的场景就是之前的网站因为某种原因需要移除掉，然后要到新的地址访问，是永久性的。<br>清晰明确而言：使用301跳转的大概场景如下：</p><p>1、域名到期不想续费（或者发现了更适合网站的域名），想换个域名。<br>2、在搜索引擎的搜索结果中出现了不带www的域名，而带www的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个。<br>3、空间服务器不稳定，换空间的时候。  </p><h4 id="5、浏览器跟踪重定向地址"><a href="#5、浏览器跟踪重定向地址" class="headerlink" title="5、浏览器跟踪重定向地址"></a>5、浏览器跟踪重定向地址</h4><hr><p>&nbsp;&nbsp;现在浏览器知道了 <code>&quot;http://www.google.com/&quot;</code>才是要访问的正确地址，所以它会发送另一个http请求。这里没有啥好说的</p><h4 id="6、服务器处理请求"><a href="#6、服务器处理请求" class="headerlink" title="6、服务器处理请求"></a>6、服务器处理请求</h4><hr><p>&nbsp;&nbsp;经过前面的重重步骤，我们终于将我们的http请求发送到了服务器这里，其实前面的重定向已经是到达服务器了，那么，服务器是如何处理我们的请求的呢？</p><p>&nbsp;&nbsp;后端从在固定的端口接收到TCP报文开始，它会对TCP连接进行处理，对HTTP协议进行解析，并按照报文格式进一步封装成HTTP Request对象，供上层使用。</p><p>&nbsp;&nbsp;一些大一点的网站会将你的请求到反向代理服务器中，因为当网站访问量非常大，网站越来越慢，一台服务器已经不够用了。于是将同一个应用部署在多台服务器上，将大量用户的请求分配给多台机器处理。此时，客户端不是直接通过HTTP协议访问某网站应用服务器，而是先请求到Nginx，Nginx再请求应用服务器，然后将结果返回给客户端，这里Nginx的作用是反向代理服务器。同时也带来了一个好处，其中一台服务器万一挂了，只要还有其他服务器正常运行，就不会影响用户使用。</p><p>如图所示：</p><p>&nbsp;&nbsp;通过Nginx的反向代理，我们到达了web服务器，服务端脚本处理我们的请求，访问我们的数据库，获取需要获取的内容等等，当然，这个过程涉及很多后端脚本的复杂操作。由于对这一块不熟，所以这一块只能介绍这么多了。</p><h5 id="扩展阅读："><a href="#扩展阅读：" class="headerlink" title="扩展阅读："></a>扩展阅读：</h5><p>1）什么是反向代理？</p><p>&nbsp;&nbsp;客户端本来可以直接通过HTTP协议访问某网站应用服务器，网站管理员可以在中间加上一个Nginx，客户端请求Nginx，Nginx请求应用服务器，然后将结果返回给客户端，此时Nginx就是反向代理服务器。</p><h4 id="7、服务器返回一个-HTTP-响应"><a href="#7、服务器返回一个-HTTP-响应" class="headerlink" title="7、服务器返回一个 HTTP 响应　"></a>7、服务器返回一个 HTTP 响应　</h4><hr><p>&nbsp;&nbsp;经过前面的6个步骤，服务器收到了我们的请求，也处理我们的请求，到这一步，它会把它的处理结果返回，也就是返回一个HTPP响应。</p><p>HTTP响应与HTTP请求相似，HTTP响应也由3个部分构成，分别是：</p><blockquote><p>状态行</p><p>响应头(Response Header)</p><p>响应正文</p></blockquote><blockquote><p>HTTP/1.1 200 OK<br>Date: Sat, 31 Dec 2005 23:59:59 GMT<br>Content-Type: text/html;charset=ISO-8859-1   Content- Length: 122<br>＜html＞<br>＜head＞<br>＜title＞http＜/title＞<br>＜/head＞<br>＜body＞<br>＜!– body goes here –＞<br>＜/body＞<br>＜/html＞  </p></blockquote><h5 id="状态行："><a href="#状态行：" class="headerlink" title="状态行："></a>状态行：</h5><p>&nbsp;&nbsp;状态行由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。</p><p>格式:    HTTP-Version Status-Code Reason-Phrase CRLF</p><p>例如:    HTTP/1.1 200 OK \r\n</p><p>– 协议版本：是用http1.0还是其他版本  </p><p>– 状态描述：状态描述给出了关于状态代码的简短的文字描述。比如状态代码为200时的描述为 ok  </p><p>– 状态代码：状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。如下  </p><p>1xx：信息性状态码，表示服务器已接收了客户端请求，客户端可继续发送请求。</p><p>100 Continue</p><p>101 Switching Protocols</p><p>2xx：成功状态码，表示服务器已成功接收到请求并进行处理。200 OK 表示客户端请求成功</p><p>204 No Content 成功，但不返回任何实体的主体部分</p><p>206 Partial Content 成功执行了一个范围（Range）请求</p><p>3xx：重定向状态码，表示服务器要求客户端重定向。</p><p>301 Moved Permanently 永久性重定向，响应报文的Location首部应该有该资源的新URL</p><p>302 Found 临时性重定向，响应报文的Location首部给出的URL用来临时定位资源</p><p>303 See Other 请求的资源存在着另一个URI，客户端应使用GET方法定向获取请求的资源</p><p>304 Not Modified 服务器内容没有更新，可以直接读取浏览器缓存</p><p>307 Temporary Redirect 临时重定向。与302 Found含义一样。302禁止POST变换为GET，但实际使用时并不一定，307则更多浏览器可能会遵循这一标准，但也依赖于浏览器具体实现</p><p>4xx：客户端错误状态码，表示客户端的请求有非法内容。</p><p>400 Bad Request 表示客户端请求有语法错误，不能被服务器所理解</p><p>401 Unauthonzed 表示请求未经授权，该状态代码必须与 WWW-Authenticate 报头域一起使用</p><p>403 Forbidden 表示服务器收到请求，但是拒绝提供服务，通常会在响应正文中给出不提供服务的原因</p><p>404 Not Found 请求的资源不存在，例如，输入了错误的URL</p><p>5xx：服务器错误状态码，表示服务器未能正常处理客户端的请求而出现意外错误。</p><p>500 Internel Server Error 表示服务器发生不可预期的错误，导致无法完成客户端的请求</p><p>503 Service Unavailable 表示服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常</p><h5 id="响应头："><a href="#响应头：" class="headerlink" title="响应头："></a>响应头：</h5><p>响应头部：由关键字/值对组成，每行一对，关键字和值用英文冒号”:”分隔，典型的响应头有：</p><h5 id="响应正文"><a href="#响应正文" class="headerlink" title="响应正文"></a>响应正文</h5><p>&nbsp;&nbsp;包含着我们需要的一些具体信息，比如cookie，html,image，后端返回的请求数据等等。这里需要注意，响应正文和响应头之间有一行空格，表示响应头的信息到空格为止，下图是fiddler抓到的请求正文，红色框中的：响应正文：</p><h4 id="8、浏览器显示-HTML"><a href="#8、浏览器显示-HTML" class="headerlink" title="8、浏览器显示 HTML"></a>8、浏览器显示 HTML</h4><hr><p>&nbsp;&nbsp;在浏览器没有完整接受全部HTML文档时，它就已经开始显示这个页面了，浏览器是如何把页面呈现在屏幕上的呢？不同浏览器可能解析的过程不太一样，这里我们只介绍webkit的渲染过程，下图对应的就是WebKit渲染的过程，这个过程包括：</p><p>&nbsp;&nbsp;解析html以构建dom树 -&gt; 构建render树 -&gt; 布局render树 -&gt; 绘制render树</p><p>&nbsp;&nbsp;浏览器在解析html文件时，会”自上而下“加载，并在加载过程中进行解析渲染。在解析过程中，如果遇到请求外部资源时，如图片、外链的CSS、iconfont等，请求过程是异步的，并不会影响html文档进行加载。</p><p>&nbsp;&nbsp;解析过程中，浏览器首先会解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。</p><p>&nbsp;&nbsp;DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。</p><p>&nbsp;&nbsp;页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain。</p><p>&nbsp;&nbsp;当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。因为JS有可能会修改DOM，最为经典的document.write，这意味着，在JS执行完成前，后续所有资源的下载可能是没有必要的，这是js阻塞后续资源下载的根本原因。所以我明平时的代码中，js是放在html文档末尾的。</p><p>JS的解析是由浏览器中的JS解析引擎完成的，比如谷歌的是V8。JS是单线程运行，也就是说，在同一个时间内只能做一件事，所有的任务都需要排队，前一个任务结束，后一个任务才能开始。但是又存在某些任务比较耗时，如IO读写等，所以需要一种机制可以先执行排在后面的任务，这就是：同步任务(synchronous)和异步任务(asynchronous)。</p><p>&nbsp;&nbsp;JS的执行机制就可以看做是一个主线程加上一个任务队列(task queue)。同步任务就是放在主线程上执行的任务，异步任务是放在任务队列中的任务。所有的同步任务在主线程上执行，形成一个执行栈;异步任务有了运行结果就会在任务队列中放置一个事件；脚本运行时先依次运行执行栈，然后会从任务队列里提取事件，运行任务队列中的任务，这个过程是不断重复的，所以又叫做事件循环(Event loop)。具体的过程可以看我这篇文章：点击这里</p><h4 id="9、浏览器发送请求获取嵌入在-HTML-中的资源（如图片、音频、视频、CSS、JS等等）"><a href="#9、浏览器发送请求获取嵌入在-HTML-中的资源（如图片、音频、视频、CSS、JS等等）" class="headerlink" title="9、浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）"></a>9、浏览器发送请求获取嵌入在 HTML 中的资源（如图片、音频、视频、CSS、JS等等）</h4><hr><p>&nbsp;&nbsp;其实这个步骤可以并列在步骤8中，在浏览器显示HTML时，它会注意到需要获取其他地址内容的标签。这时，浏览器会发送一个获取请求来重新获得这些文件。比如我要获取外图片，CSS，JS文件等，类似于下面的链接：</p><blockquote><p>图片：<a href="http://static.ak.fbcdn.net/rsrc.php/z12E0/hash/8q2anwu7.gif" target="_blank" rel="noopener">http://static.ak.fbcdn.net/rsrc.php/z12E0/hash/8q2anwu7.gif</a></p><p>CSS式样表：<a href="http://static.ak.fbcdn.net/rsrc.php/z448Z/hash/2plh8s4n.css" target="_blank" rel="noopener">http://static.ak.fbcdn.net/rsrc.php/z448Z/hash/2plh8s4n.css</a></p><p>JavaScript 文件：<a href="http://static.ak.fbcdn.net/rsrc.php/zEMOA/hash/c8yzb6ub.js" target="_blank" rel="noopener">http://static.ak.fbcdn.net/rsrc.php/zEMOA/hash/c8yzb6ub.js</a></p></blockquote><p>&nbsp;&nbsp;这些地址都要经历一个和HTML读取类似的过程。所以浏览器会在DNS中查找这些域名，发送请求，重定向等等…</p><p>&nbsp;&nbsp;不像动态页面，静态文件会允许浏览器对其进行缓存。有的文件可能会不需要与服务器通讯，而从缓存中直接读取，或者可以放到CDN中  </p><p>————分割线————</p><p>&nbsp;&nbsp;至此，从输入url到页面展示的过程终于整理完了。本文前前后后整理了差不多一个星期，当然，网上有很多文章的顺序可能跟本文不太一样，也是可以的。</p><p>&nbsp;&nbsp;如今已离开呆了一年的大YY，进入了另一家公司，有很多东西在后面等着学习，有点小压力的同时也有很强烈的兴奋，哈哈。愿你在金三银四里找到满意的工作，干巴爹。</p><p>当然，文笔有限，有误之处，欢迎指出，本文参考了很多的文章，不过很多文章的链接不记得了，所以只列出了下面三个参考链接。</p><blockquote><p>参考文献：<br><a href="https://segmentfault.com/a/1190000006879700" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006879700</a><br><a href="http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/" target="_blank" rel="noopener">http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/</a><br><a href="http://zrj.me/archives/589" target="_blank" rel="noopener">http://zrj.me/archives/589</a> </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;浏览器解析url的过程&lt;/p&gt;
    
    </summary>
    
      <category term="浏览器" scheme="xumenghao.top/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="HTML" scheme="xumenghao.top/tags/HTML/"/>
    
      <category term="浏览器解析" scheme="xumenghao.top/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
</feed>
